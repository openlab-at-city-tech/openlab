{"version":3,"file":"./build/reusable-blocks/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window [\"wp\",\"blockEditor\"]","webpack://wp/external window [\"wp\",\"blocks\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/./packages/reusable-blocks/build-module/store/@wordpress/reusable-blocks/src/store/actions.js","webpack://wp/./packages/reusable-blocks/build-module/store/@wordpress/reusable-blocks/src/store/reducer.js","webpack://wp/./packages/reusable-blocks/build-module/store/@wordpress/reusable-blocks/src/store/selectors.js","webpack://wp/./packages/reusable-blocks/build-module/store/@wordpress/reusable-blocks/src/store/index.js","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/external window [\"wp\",\"components\"]","webpack://wp/external window [\"wp\",\"primitives\"]","webpack://wp/./packages/icons/build-module/library/@wordpress/icons/src/library/symbol.js","webpack://wp/external window [\"wp\",\"notices\"]","webpack://wp/external window [\"wp\",\"coreData\"]","webpack://wp/./packages/reusable-blocks/build-module/components/reusable-blocks-menu-items/@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-block-convert-button.js","webpack://wp/external window [\"wp\",\"url\"]","webpack://wp/./packages/reusable-blocks/build-module/components/reusable-blocks-menu-items/@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-blocks-manage-button.js","webpack://wp/./packages/reusable-blocks/build-module/components/reusable-blocks-menu-items/@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","/**\n * WordPress dependencies\n */\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport {\n\tcreateBlock,\n\tisReusableBlock,\n\tparse,\n\tserialize,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Returns a generator converting a reusable block into a static block.\n *\n * @param {string} clientId The client ID of the block to attach.\n */\nexport const __experimentalConvertBlockToStatic =\n\t( clientId ) =>\n\t( { registry } ) => {\n\t\tconst oldBlock = registry\n\t\t\t.select( blockEditorStore )\n\t\t\t.getBlock( clientId );\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_block',\n\t\t\t\toldBlock.attributes.ref\n\t\t\t);\n\n\t\tconst newBlocks = parse(\n\t\t\ttypeof reusableBlock.content === 'function'\n\t\t\t\t? reusableBlock.content( reusableBlock )\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n\t};\n\n/**\n * Returns a generator converting one or more static blocks into a pattern.\n *\n * @param {string[]}           clientIds The client IDs of the block to detach.\n * @param {string}             title     Pattern title.\n * @param {'fully'|'unsynced'} syncType  They way block is synced, current 'fully' and 'unsynced'.\n */\nexport const __experimentalConvertBlocksToReusable =\n\t( clientIds, title, syncType ) =>\n\tasync ( { registry, dispatch } ) => {\n\t\tconst meta =\n\t\t\tsyncType === 'unsynced'\n\t\t\t\t? {\n\t\t\t\t\t\twp_pattern_sync_status: syncType,\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\n\t\tconst reusableBlock = {\n\t\t\ttitle: title || __( 'Untitled Pattern block' ),\n\t\t\tcontent: serialize(\n\t\t\t\tregistry\n\t\t\t\t\t.select( blockEditorStore )\n\t\t\t\t\t.getBlocksByClientId( clientIds )\n\t\t\t),\n\t\t\tstatus: 'publish',\n\t\t\tmeta,\n\t\t};\n\n\t\tconst updatedRecord = await registry\n\t\t\t.dispatch( 'core' )\n\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\tif ( syncType === 'unsynced' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\tref: updatedRecord.id,\n\t\t} );\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( clientIds, newBlock );\n\t\tdispatch.__experimentalSetEditingReusableBlock(\n\t\t\tnewBlock.clientId,\n\t\t\ttrue\n\t\t);\n\t};\n\n/**\n * Returns a generator deleting a reusable block.\n *\n * @param {string} id The ID of the reusable block to delete.\n */\nexport const __experimentalDeleteReusableBlock =\n\t( id ) =>\n\tasync ( { registry } ) => {\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t// Don't allow a reusable block with a temporary ID to be deleted.\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove any other blocks that reference this reusable block.\n\t\tconst allBlocks = registry.select( blockEditorStore ).getBlocks();\n\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t\t);\n\t\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t\t( block ) => block.clientId\n\t\t);\n\n\t\t// Remove the parsed block.\n\t\tif ( associatedBlockClientIds.length ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t.removeBlocks( associatedBlockClientIds );\n\t\t}\n\n\t\tawait registry\n\t\t\t.dispatch( 'core' )\n\t\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\n\t};\n\n/**\n * Returns an action descriptor for SET_EDITING_REUSABLE_BLOCK action.\n *\n * @param {string}  clientId  The clientID of the reusable block to target.\n * @param {boolean} isEditing Whether the block should be in editing state.\n * @return {Object} Action descriptor.\n */\nexport function __experimentalSetEditingReusableBlock( clientId, isEditing ) {\n\treturn {\n\t\ttype: 'SET_EDITING_REUSABLE_BLOCK',\n\t\tclientId,\n\t\tisEditing,\n\t};\n}\n","/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\nexport function isEditingReusableBlock( state = {}, action ) {\n\tif ( action?.type === 'SET_EDITING_REUSABLE_BLOCK' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ action.clientId ]: action.isEditing,\n\t\t};\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tisEditingReusableBlock,\n} );\n","/**\n * Returns true if reusable block is in the editing state.\n *\n * @param {Object} state    Global application state.\n * @param {number} clientId the clientID of the block.\n * @return {boolean} Whether the reusable block is in the editing state.\n */\nexport function __experimentalIsEditingReusableBlock( state, clientId ) {\n\treturn state.isEditingReusableBlock[ clientId ];\n}\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport * as actions from './actions';\nimport reducer from './reducer';\nimport * as selectors from './selectors';\n\nconst STORE_NAME = 'core/reusable-blocks';\n\n/**\n * Store definition for the reusable blocks namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\tactions,\n\treducer,\n\tselectors,\n} );\n\nregister( store );\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"primitives\"];","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\n\nconst symbol = (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t<Path d=\"M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z\" />\n\t</SVG>\n);\n\nexport default symbol;\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"notices\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"coreData\"];","/**\n * WordPress dependencies\n */\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport {\n\tBlockSettingsMenuControls,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { useCallback, useState } from '@wordpress/element';\nimport {\n\tMenuItem,\n\tModal,\n\tButton,\n\tTextControl,\n\t__experimentalHStack as HStack,\n\t__experimentalVStack as VStack,\n\tToggleControl,\n} from '@wordpress/components';\nimport { symbol } from '@wordpress/icons';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store } from '../../store';\n\n/**\n * Menu control to convert block(s) to reusable block.\n *\n * @param {Object}   props              Component props.\n * @param {string[]} props.clientIds    Client ids of selected blocks.\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\n * @return {import('@wordpress/element').WPComponent} The menu control or null.\n */\nexport default function ReusableBlockConvertButton( {\n\tclientIds,\n\trootClientId,\n} ) {\n\tconst [ syncType, setSyncType ] = useState( 'unsynced' );\n\tconst [ isModalOpen, setIsModalOpen ] = useState( false );\n\tconst [ title, setTitle ] = useState( '' );\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst { getBlocksByClientId, canInsertBlockType } =\n\t\t\t\tselect( blockEditorStore );\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! select( coreStore ).getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\tblocks[ 0 ].attributes.ref\n\t\t\t\t);\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a reusable block.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when reusable blocks are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block', rootClientId ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t!! canUser( 'create', 'blocks' );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds, rootClientId ]\n\t);\n\n\tconst { __experimentalConvertBlocksToReusable: convertBlocksToReusable } =\n\t\tuseDispatch( store );\n\n\tconst { createSuccessNotice, createErrorNotice } =\n\t\tuseDispatch( noticesStore );\n\tconst onConvert = useCallback(\n\t\tasync function ( reusableBlockTitle ) {\n\t\t\ttry {\n\t\t\t\tawait convertBlocksToReusable(\n\t\t\t\t\tclientIds,\n\t\t\t\t\treusableBlockTitle,\n\t\t\t\t\tsyncType\n\t\t\t\t);\n\t\t\t\tcreateSuccessNotice(\n\t\t\t\t\tsyncType === 'fully'\n\t\t\t\t\t\t? __( 'Synced Pattern created.' )\n\t\t\t\t\t\t: __( 'Unsynced Pattern created.' ),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch ( error ) {\n\t\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tconvertBlocksToReusable,\n\t\t\tclientIds,\n\t\t\tsyncType,\n\t\t\tcreateSuccessNotice,\n\t\t\tcreateErrorNotice,\n\t\t]\n\t);\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose } ) => (\n\t\t\t\t<>\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\ticon={ symbol }\n\t\t\t\t\t\tonClick={ () => setIsModalOpen( true ) }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ __( 'Create pattern' ) }\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t{ isModalOpen && (\n\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\ttitle={ __( 'Create pattern' ) }\n\t\t\t\t\t\t\tonRequestClose={ () => {\n\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\toverlayClassName=\"reusable-blocks-menu-items__convert-modal\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<form\n\t\t\t\t\t\t\t\tonSubmit={ ( event ) => {\n\t\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\t\tonConvert( title );\n\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<VStack spacing=\"5\">\n\t\t\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t\t\t\t\tlabel={ __( 'Name' ) }\n\t\t\t\t\t\t\t\t\t\tvalue={ title }\n\t\t\t\t\t\t\t\t\t\tonChange={ setTitle }\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t\t\t\t\t'Keep all pattern instances in sync'\n\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t\t\t\t\t'Editing the original pattern will also update anywhere the pattern is used.'\n\t\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t\t\tchecked={ syncType === 'fully' }\n\t\t\t\t\t\t\t\t\t\tonChange={ () => {\n\t\t\t\t\t\t\t\t\t\t\tsetSyncType(\n\t\t\t\t\t\t\t\t\t\t\t\tsyncType === 'fully'\n\t\t\t\t\t\t\t\t\t\t\t\t\t? 'unsynced'\n\t\t\t\t\t\t\t\t\t\t\t\t\t: 'fully'\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<HStack justify=\"right\">\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{ __( 'Cancel' ) }\n\t\t\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\t\t\t\t\t{ __( 'Save' ) }\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</HStack>\n\t\t\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</Modal>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"url\"];","/**\n * WordPress dependencies\n */\nimport { MenuItem } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { isReusableBlock } from '@wordpress/blocks';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n\tBlockSettingsMenuControls,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { addQueryArgs } from '@wordpress/url';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store as reusableBlocksStore } from '../../store';\n\nfunction ReusableBlocksManageButton( { clientId } ) {\n\tconst { canRemove, isVisible, innerBlockCount } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlock, canRemoveBlock, getBlockCount } =\n\t\t\t\tselect( blockEditorStore );\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst reusableBlock = getBlock( clientId );\n\n\t\t\treturn {\n\t\t\t\tcanRemove: canRemoveBlock( clientId ),\n\t\t\t\tisVisible:\n\t\t\t\t\t!! reusableBlock &&\n\t\t\t\t\tisReusableBlock( reusableBlock ) &&\n\t\t\t\t\t!! canUser(\n\t\t\t\t\t\t'update',\n\t\t\t\t\t\t'blocks',\n\t\t\t\t\t\treusableBlock.attributes.ref\n\t\t\t\t\t),\n\t\t\t\tinnerBlockCount: getBlockCount( clientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst { __experimentalConvertBlockToStatic: convertBlockToStatic } =\n\t\tuseDispatch( reusableBlocksStore );\n\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t<MenuItem\n\t\t\t\thref={ addQueryArgs( 'edit.php', { post_type: 'wp_block' } ) }\n\t\t\t>\n\t\t\t\t{ __( 'Manage Patterns' ) }\n\t\t\t</MenuItem>\n\t\t\t{ canRemove && (\n\t\t\t\t<MenuItem onClick={ () => convertBlockToStatic( clientId ) }>\n\t\t\t\t\t{ innerBlockCount > 1\n\t\t\t\t\t\t? __( 'Convert to regular blocks' )\n\t\t\t\t\t\t: __( 'Convert to regular block' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n\nexport default ReusableBlocksManageButton;\n","/**\n * WordPress dependencies\n */\nimport { withSelect } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport ReusableBlockConvertButton from './reusable-block-convert-button';\nimport ReusableBlocksManageButton from './reusable-blocks-manage-button';\n\nfunction ReusableBlocksMenuItems( { clientIds, rootClientId } ) {\n\treturn (\n\t\t<>\n\t\t\t<ReusableBlockConvertButton\n\t\t\t\tclientIds={ clientIds }\n\t\t\t\trootClientId={ rootClientId }\n\t\t\t/>\n\t\t\t{ clientIds.length === 1 && (\n\t\t\t\t<ReusableBlocksManageButton clientId={ clientIds[ 0 ] } />\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nexport default withSelect( ( select ) => {\n\tconst { getSelectedBlockClientIds } = select( blockEditorStore );\n\treturn {\n\t\tclientIds: getSelectedBlockClientIds(),\n\t};\n} )( ReusableBlocksMenuItems );\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","__experimentalConvertBlockToStatic","clientId","registry","oldBlock","select","blockEditorStore","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","parse","content","dispatch","replaceBlocks","__experimentalConvertBlocksToReusable","clientIds","title","syncType","async","meta","wp_pattern_sync_status","undefined","__","serialize","getBlocksByClientId","status","updatedRecord","saveEntityRecord","newBlock","createBlock","id","__experimentalSetEditingReusableBlock","__experimentalDeleteReusableBlock","associatedBlockClientIds","getBlocks","filter","block","isReusableBlock","map","length","removeBlocks","deleteEntityRecord","isEditing","type","combineReducers","isEditingReusableBlock","state","action","__experimentalIsEditingReusableBlock","store","createReduxStore","actions","reducer","selectors","register","SVG","xmlns","viewBox","Path","d","ReusableBlockConvertButton","rootClientId","setSyncType","useState","isModalOpen","setIsModalOpen","setTitle","canConvert","useSelect","canUser","coreStore","canInsertBlockType","blocks","getEntityRecord","every","isValid","hasBlockSupport","name","convertBlocksToReusable","useDispatch","createSuccessNotice","createErrorNotice","noticesStore","onConvert","useCallback","reusableBlockTitle","error","message","BlockSettingsMenuControls","onClose","MenuItem","icon","symbol","onClick","Modal","onRequestClose","overlayClassName","onSubmit","event","preventDefault","spacing","TextControl","__nextHasNoMarginBottom","label","onChange","ToggleControl","help","checked","justify","Button","variant","canRemove","isVisible","innerBlockCount","canRemoveBlock","getBlockCount","convertBlockToStatic","reusableBlocksStore","href","addQueryArgs","post_type","withSelect","getSelectedBlockClientIds"],"sourceRoot":""}