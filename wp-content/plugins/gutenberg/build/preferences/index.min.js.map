{"version":3,"file":"./build/preferences/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window \"React\"","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window [\"wp\",\"components\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/external window [\"wp\",\"primitives\"]","../../packages/icons/src/library/check.js","webpack://wp/external window [\"wp\",\"a11y\"]","../../packages/preferences/src/store/reducer.js","../../packages/preferences/src/store/actions.js","../../packages/preferences/src/store/selectors.js","../../packages/preferences/src/store/constants.js","../../packages/preferences/src/store/index.js","../../packages/preferences/src/components/preference-toggle-menu-item/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"primitives\"];","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\n\nconst check = (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t<Path d=\"M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z\" />\n\t</SVG>\n);\n\nexport default check;\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"a11y\"];","/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\n/**\n * Reducer returning the defaults for user preferences.\n *\n * This is kept intentionally separate from the preferences\n * themselves so that defaults are not persisted.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function defaults( state = {}, action ) {\n\tif ( action.type === 'SET_PREFERENCE_DEFAULTS' ) {\n\t\tconst { scope, defaults: values } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ scope ]: {\n\t\t\t\t...state[ scope ],\n\t\t\t\t...values,\n\t\t\t},\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Higher order reducer that does the following:\n * - Merges any data from the persistence layer into the state when the\n *   `SET_PERSISTENCE_LAYER` action is received.\n * - Passes any preferences changes to the persistence layer.\n *\n * @param {Function} reducer The preferences reducer.\n *\n * @return {Function} The enhanced reducer.\n */\nfunction withPersistenceLayer( reducer ) {\n\tlet persistenceLayer;\n\n\treturn ( state, action ) => {\n\t\t// Setup the persistence layer, and return the persisted data\n\t\t// as the state.\n\t\tif ( action.type === 'SET_PERSISTENCE_LAYER' ) {\n\t\t\tconst { persistenceLayer: persistence, persistedData } = action;\n\t\t\tpersistenceLayer = persistence;\n\t\t\treturn persistedData;\n\t\t}\n\n\t\tconst nextState = reducer( state, action );\n\t\tif ( action.type === 'SET_PREFERENCE_VALUE' ) {\n\t\t\tpersistenceLayer?.set( nextState );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const preferences = withPersistenceLayer( ( state = {}, action ) => {\n\tif ( action.type === 'SET_PREFERENCE_VALUE' ) {\n\t\tconst { scope, name, value } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ scope ]: {\n\t\t\t\t...state[ scope ],\n\t\t\t\t[ name ]: value,\n\t\t\t},\n\t\t};\n\t}\n\n\treturn state;\n} );\n\nexport default combineReducers( {\n\tdefaults,\n\tpreferences,\n} );\n","/**\n * Returns an action object used in signalling that a preference should be\n * toggled.\n *\n * @param {string} scope The preference scope (e.g. core/edit-post).\n * @param {string} name  The preference name.\n */\nexport function toggle( scope, name ) {\n\treturn function ( { select, dispatch } ) {\n\t\tconst currentValue = select.get( scope, name );\n\t\tdispatch.set( scope, name, ! currentValue );\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a preference should be set\n * to a value\n *\n * @param {string} scope The preference scope (e.g. core/edit-post).\n * @param {string} name  The preference name.\n * @param {*}      value The value to set.\n *\n * @return {Object} Action object.\n */\nexport function set( scope, name, value ) {\n\treturn {\n\t\ttype: 'SET_PREFERENCE_VALUE',\n\t\tscope,\n\t\tname,\n\t\tvalue,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that preference defaults should\n * be set.\n *\n * @param {string}            scope    The preference scope (e.g. core/edit-post).\n * @param {Object<string, *>} defaults A key/value map of preference names to values.\n *\n * @return {Object} Action object.\n */\nexport function setDefaults( scope, defaults ) {\n\treturn {\n\t\ttype: 'SET_PREFERENCE_DEFAULTS',\n\t\tscope,\n\t\tdefaults,\n\t};\n}\n\n/** @typedef {() => Promise<Object>} WPPreferencesPersistenceLayerGet */\n/** @typedef {(Object) => void} WPPreferencesPersistenceLayerSet */\n/**\n * @typedef WPPreferencesPersistenceLayer\n *\n * @property {WPPreferencesPersistenceLayerGet} get An async function that gets data from the persistence layer.\n * @property {WPPreferencesPersistenceLayerSet} set A function that sets data in the persistence layer.\n */\n\n/**\n * Sets the persistence layer.\n *\n * When a persistence layer is set, the preferences store will:\n * - call `get` immediately and update the store state to the value returned.\n * - call `set` with all preferences whenever a preference changes value.\n *\n * `setPersistenceLayer` should ideally be dispatched at the start of an\n * application's lifecycle, before any other actions have been dispatched to\n * the preferences store.\n *\n * @param {WPPreferencesPersistenceLayer} persistenceLayer The persistence layer.\n *\n * @return {Object} Action object.\n */\nexport async function setPersistenceLayer( persistenceLayer ) {\n\tconst persistedData = await persistenceLayer.get();\n\treturn {\n\t\ttype: 'SET_PERSISTENCE_LAYER',\n\t\tpersistenceLayer,\n\t\tpersistedData,\n\t};\n}\n","/**\n * Returns a boolean indicating whether a prefer is active for a particular\n * scope.\n *\n * @param {Object} state The store state.\n * @param {string} scope The scope of the feature (e.g. core/edit-post).\n * @param {string} name  The name of the feature.\n *\n * @return {*} Is the feature enabled?\n */\nexport function get( state, scope, name ) {\n\tconst value = state.preferences[ scope ]?.[ name ];\n\treturn value !== undefined ? value : state.defaults[ scope ]?.[ name ];\n}\n","/**\n * The identifier for the data store.\n *\n * @type {string}\n */\nexport const STORE_NAME = 'core/preferences';\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as actions from './actions';\nimport * as selectors from './selectors';\nimport { STORE_NAME } from './constants';\n\n/**\n * Store definition for the interface namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\treducer,\n\tactions,\n\tselectors,\n} );\n\nregister( store );\n","/**\n * WordPress dependencies\n */\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { MenuItem } from '@wordpress/components';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { check } from '@wordpress/icons';\nimport { speak } from '@wordpress/a11y';\n\n/**\n * Internal dependencies\n */\nimport { store as preferencesStore } from '../../store';\n\nexport default function PreferenceToggleMenuItem( {\n\tscope,\n\tname,\n\tlabel,\n\tinfo,\n\tmessageActivated,\n\tmessageDeactivated,\n\tshortcut,\n\tonToggle = () => null,\n\tdisabled = false,\n} ) {\n\tconst isActive = useSelect(\n\t\t( select ) => !! select( preferencesStore ).get( scope, name ),\n\t\t[ scope, name ]\n\t);\n\tconst { toggle } = useDispatch( preferencesStore );\n\tconst speakMessage = () => {\n\t\tif ( isActive ) {\n\t\t\tconst message =\n\t\t\t\tmessageDeactivated ||\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: %s: preference name, e.g. 'Fullscreen mode' */\n\t\t\t\t\t__( 'Preference deactivated - %s' ),\n\t\t\t\t\tlabel\n\t\t\t\t);\n\t\t\tspeak( message );\n\t\t} else {\n\t\t\tconst message =\n\t\t\t\tmessageActivated ||\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: %s: preference name, e.g. 'Fullscreen mode' */\n\t\t\t\t\t__( 'Preference activated - %s' ),\n\t\t\t\t\tlabel\n\t\t\t\t);\n\t\t\tspeak( message );\n\t\t}\n\t};\n\n\treturn (\n\t\t<MenuItem\n\t\t\ticon={ isActive && check }\n\t\t\tisSelected={ isActive }\n\t\t\tonClick={ () => {\n\t\t\t\tonToggle();\n\t\t\t\ttoggle( scope, name );\n\t\t\t\tspeakMessage();\n\t\t\t} }\n\t\t\trole=\"menuitemcheckbox\"\n\t\t\tinfo={ info }\n\t\t\tshortcut={ shortcut }\n\t\t\tdisabled={ disabled }\n\t\t>\n\t\t\t{ label }\n\t\t</MenuItem>\n\t);\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","createElement","SVG","xmlns","viewBox","Path","d","preferences","reducer","persistenceLayer","state","action","type","persistence","persistedData","nextState","scope","name","set","withPersistenceLayer","combineReducers","defaults","values","toggle","select","dispatch","currentValue","setDefaults","async","setPersistenceLayer","undefined","store","createReduxStore","actions","selectors","PreferenceToggleMenuItem","label","info","messageActivated","messageDeactivated","shortcut","onToggle","disabled","isActive","useSelect","preferencesStore","useDispatch","MenuItem","icon","check","isSelected","onClick","speakMessage","message","sprintf","__","speak","role","register"],"sourceRoot":""}