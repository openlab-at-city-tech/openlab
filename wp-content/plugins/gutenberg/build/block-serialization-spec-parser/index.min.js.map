{"version":3,"file":"./build/block-serialization-spec-parser/index.min.js","mappings":"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","sources":["webpack://wp/./packages/block-serialization-spec-parser/parser.js","webpack://wp/webpack/bootstrap","webpack://wp/webpack/startup"],"sourcesContent":["/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { Block_List: peg$parseBlock_List },\n      peg$startRuleFunction  = peg$parseBlock_List,\n\n      peg$c0 = peg$anyExpectation(),\n      peg$c1 = function(pre, b, html) { /** <?php return array( $b, $html ); ?> **/ return [ b, html ] },\n      peg$c2 = function(pre, bs, post) { /** <?php return peg_join_blocks( $pre, $bs, $post ); ?> **/\n          return joinBlocks( pre, bs, post );\n        },\n      peg$c3 = \"<!--\",\n      peg$c4 = peg$literalExpectation(\"<!--\", false),\n      peg$c5 = \"wp:\",\n      peg$c6 = peg$literalExpectation(\"wp:\", false),\n      peg$c7 = function(blockName, a) {\n          /** <?php return $a; ?> **/\n          return a;\n        },\n      peg$c8 = \"/-->\",\n      peg$c9 = peg$literalExpectation(\"/-->\", false),\n      peg$c10 = function(blockName, attrs) {\n          /** <?php\n          return array(\n            'blockName'    => $blockName,\n            'attrs'        => empty( $attrs ) ? peg_empty_attrs() : $attrs,\n            'innerBlocks'  => array(),\n            'innerHTML'    => '',\n            'innerContent' => array(),\n          );\n          ?> **/\n\n          return {\n            blockName: blockName,\n            attrs: attrs || {},\n            innerBlocks: [],\n            innerHTML: '',\n            innerContent: []\n          };\n        },\n      peg$c11 = function(s, children, e) {\n          /** <?php\n          list( $innerHTML, $innerBlocks, $innerContent ) = peg_process_inner_content( $children );\n\n          return array(\n            'blockName'    => $s['blockName'],\n            'attrs'        => empty( $s['attrs'] ) ? peg_empty_attrs() : $s['attrs'],\n            'innerBlocks'  => $innerBlocks,\n            'innerHTML'    => $innerHTML,\n            'innerContent' => $innerContent,\n          );\n          ?> **/\n\n          var innerParts = processInnerContent( children );\n          var innerHTML = innerParts[ 0 ];\n          var innerBlocks = innerParts[ 1 ];\n          var innerContent = innerParts[ 2 ];\n\n          return {\n            blockName: s.blockName,\n            attrs: s.attrs,\n            innerBlocks: innerBlocks,\n            innerHTML: innerHTML,\n            innerContent: innerContent,\n          };\n        },\n      peg$c12 = \"-->\",\n      peg$c13 = peg$literalExpectation(\"-->\", false),\n      peg$c14 = function(blockName, attrs) {\n          /** <?php\n          return array(\n            'blockName' => $blockName,\n            'attrs'     => isset( $attrs ) ? $attrs : array(),\n          );\n          ?> **/\n\n          return {\n            blockName: blockName,\n            attrs: attrs || {}\n          };\n        },\n      peg$c15 = \"/wp:\",\n      peg$c16 = peg$literalExpectation(\"/wp:\", false),\n      peg$c17 = function(blockName) {\n          /** <?php\n          return array(\n            'blockName' => $blockName,\n          );\n          ?> **/\n\n          return {\n            blockName: blockName\n          };\n        },\n      peg$c18 = \"/\",\n      peg$c19 = peg$literalExpectation(\"/\", false),\n      peg$c20 = function(type) {\n          /** <?php return \"core/$type\"; ?> **/\n          return 'core/' + type;\n        },\n      peg$c21 = /^[a-z]/,\n      peg$c22 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n      peg$c23 = /^[a-z0-9_\\-]/,\n      peg$c24 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c25 = peg$otherExpectation(\"JSON-encoded attributes embedded in a block's opening comment\"),\n      peg$c26 = \"{\",\n      peg$c27 = peg$literalExpectation(\"{\", false),\n      peg$c28 = \"}\",\n      peg$c29 = peg$literalExpectation(\"}\", false),\n      peg$c30 = \"\",\n      peg$c31 = function(attrs) {\n          /** <?php return json_decode( $attrs, true ); ?> **/\n          return maybeJSON( attrs );\n        },\n      peg$c32 = /^[ \\t\\r\\n]/,\n      peg$c33 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseBlock_List() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = [];\n    s3 = peg$currPos;\n    s4 = peg$currPos;\n    peg$silentFails++;\n    s5 = peg$parseBlock();\n    peg$silentFails--;\n    if (s5 === peg$FAILED) {\n      s4 = void 0;\n    } else {\n      peg$currPos = s4;\n      s4 = peg$FAILED;\n    }\n    if (s4 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s5 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n      if (s5 !== peg$FAILED) {\n        s4 = [s4, s5];\n        s3 = s4;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n    while (s3 !== peg$FAILED) {\n      s2.push(s3);\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseBlock();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c0); }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseBlock();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$currPos;\n        s6 = [];\n        s7 = peg$currPos;\n        s8 = peg$currPos;\n        peg$silentFails++;\n        s9 = peg$parseBlock();\n        peg$silentFails--;\n        if (s9 === peg$FAILED) {\n          s8 = void 0;\n        } else {\n          peg$currPos = s8;\n          s8 = peg$FAILED;\n        }\n        if (s8 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s9 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s9 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c0); }\n          }\n          if (s9 !== peg$FAILED) {\n            s8 = [s8, s9];\n            s7 = s8;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s7;\n          s7 = peg$FAILED;\n        }\n        while (s7 !== peg$FAILED) {\n          s6.push(s7);\n          s7 = peg$currPos;\n          s8 = peg$currPos;\n          peg$silentFails++;\n          s9 = peg$parseBlock();\n          peg$silentFails--;\n          if (s9 === peg$FAILED) {\n            s8 = void 0;\n          } else {\n            peg$currPos = s8;\n            s8 = peg$FAILED;\n          }\n          if (s8 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s9 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c0); }\n            }\n            if (s9 !== peg$FAILED) {\n              s8 = [s8, s9];\n              s7 = s8;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n        }\n        if (s6 !== peg$FAILED) {\n          s5 = input.substring(s5, peg$currPos);\n        } else {\n          s5 = s6;\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c1(s1, s4, s5);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseBlock();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          s6 = [];\n          s7 = peg$currPos;\n          s8 = peg$currPos;\n          peg$silentFails++;\n          s9 = peg$parseBlock();\n          peg$silentFails--;\n          if (s9 === peg$FAILED) {\n            s8 = void 0;\n          } else {\n            peg$currPos = s8;\n            s8 = peg$FAILED;\n          }\n          if (s8 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s9 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c0); }\n            }\n            if (s9 !== peg$FAILED) {\n              s8 = [s8, s9];\n              s7 = s8;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$currPos;\n            s8 = peg$currPos;\n            peg$silentFails++;\n            s9 = peg$parseBlock();\n            peg$silentFails--;\n            if (s9 === peg$FAILED) {\n              s8 = void 0;\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            if (s8 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s9 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c0); }\n              }\n              if (s9 !== peg$FAILED) {\n                s8 = [s8, s9];\n                s7 = s8;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          }\n          if (s6 !== peg$FAILED) {\n            s5 = input.substring(s5, peg$currPos);\n          } else {\n            s5 = s6;\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c1(s1, s4, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = [];\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c0); }\n        }\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c0); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock() {\n    var s0;\n\n    s0 = peg$parseBlock_Void();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseBlock_Balanced();\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Void() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c5) {\n          s3 = peg$c5;\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseBlock_Name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = peg$parseBlock_Attributes();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c7(s4, s7);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c8) {\n                  s7 = peg$c8;\n                  peg$currPos += 4;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c9); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c10(s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Balanced() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseBlock_Start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseBlock();\n      if (s3 === peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = peg$currPos;\n        peg$silentFails++;\n        s7 = peg$parseBlock();\n        peg$silentFails--;\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = peg$currPos;\n          peg$silentFails++;\n          s8 = peg$parseBlock_End();\n          peg$silentFails--;\n          if (s8 === peg$FAILED) {\n            s7 = void 0;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n          if (s7 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c0); }\n            }\n            if (s8 !== peg$FAILED) {\n              s6 = [s6, s7, s8];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parseBlock();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$parseBlock_End();\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = void 0;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c0); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseBlock();\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$parseBlock();\n          peg$silentFails--;\n          if (s7 === peg$FAILED) {\n            s6 = void 0;\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$currPos;\n            peg$silentFails++;\n            s8 = peg$parseBlock_End();\n            peg$silentFails--;\n            if (s8 === peg$FAILED) {\n              s7 = void 0;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c0); }\n              }\n              if (s8 !== peg$FAILED) {\n                s6 = [s6, s7, s8];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$parseBlock();\n              peg$silentFails--;\n              if (s7 === peg$FAILED) {\n                s6 = void 0;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                peg$silentFails++;\n                s8 = peg$parseBlock_End();\n                peg$silentFails--;\n                if (s8 === peg$FAILED) {\n                  s7 = void 0;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.length > peg$currPos) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c0); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = input.substring(s3, peg$currPos);\n          } else {\n            s3 = s4;\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseBlock_End();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c11(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Start() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c5) {\n          s3 = peg$c5;\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseBlock_Name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = peg$parseBlock_Attributes();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c7(s4, s7);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c12) {\n                  s7 = peg$c12;\n                  peg$currPos += 3;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c13); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c14(s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_End() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c15) {\n          s3 = peg$c15;\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c16); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseBlock_Name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c12) {\n                s6 = peg$c12;\n                peg$currPos += 3;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c13); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c17(s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Name() {\n    var s0;\n\n    s0 = peg$parseNamespaced_Block_Name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseCore_Block_Name();\n    }\n\n    return s0;\n  }\n\n  function peg$parseNamespaced_Block_Name() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseBlock_Name_Part();\n    if (s2 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s3 = peg$c18;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseBlock_Name_Part();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCore_Block_Name() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseBlock_Name_Part();\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c20(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseBlock_Name_Part() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (peg$c21.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c23.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c24); }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        if (peg$c23.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Attributes() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s3 = peg$c26;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c27); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = [];\n      s5 = peg$currPos;\n      s6 = peg$currPos;\n      peg$silentFails++;\n      s7 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 125) {\n        s8 = peg$c28;\n        peg$currPos++;\n      } else {\n        s8 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s8 !== peg$FAILED) {\n        s9 = peg$parse__();\n        if (s9 !== peg$FAILED) {\n          s10 = peg$c30;\n          if (s10 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s11 = peg$c18;\n              peg$currPos++;\n            } else {\n              s11 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s11 === peg$FAILED) {\n              s11 = null;\n            }\n            if (s11 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c12) {\n                s12 = peg$c12;\n                peg$currPos += 3;\n              } else {\n                s12 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c13); }\n              }\n              if (s12 !== peg$FAILED) {\n                s8 = [s8, s9, s10, s11, s12];\n                s7 = s8;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s7;\n          s7 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s7;\n        s7 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s7 === peg$FAILED) {\n        s6 = void 0;\n      } else {\n        peg$currPos = s6;\n        s6 = peg$FAILED;\n      }\n      if (s6 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s7 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c0); }\n        }\n        if (s7 !== peg$FAILED) {\n          s6 = [s6, s7];\n          s5 = s6;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      while (s5 !== peg$FAILED) {\n        s4.push(s5);\n        s5 = peg$currPos;\n        s6 = peg$currPos;\n        peg$silentFails++;\n        s7 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s8 = peg$c28;\n          peg$currPos++;\n        } else {\n          s8 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\n        }\n        if (s8 !== peg$FAILED) {\n          s9 = peg$parse__();\n          if (s9 !== peg$FAILED) {\n            s10 = peg$c30;\n            if (s10 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s11 = peg$c18;\n                peg$currPos++;\n              } else {\n                s11 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s11 === peg$FAILED) {\n                s11 = null;\n              }\n              if (s11 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c12) {\n                  s12 = peg$c12;\n                  peg$currPos += 3;\n                } else {\n                  s12 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c13); }\n                }\n                if (s12 !== peg$FAILED) {\n                  s8 = [s8, s9, s10, s11, s12];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s7;\n          s7 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        if (s6 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s7 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c0); }\n          }\n          if (s7 !== peg$FAILED) {\n            s6 = [s6, s7];\n            s5 = s6;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s5 = peg$c28;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\n        }\n        if (s5 !== peg$FAILED) {\n          s3 = [s3, s4, s5];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c31(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c32.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c32.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n\n  /*\n   *\n   *    _____       _             _\n   *   / ____|     | |           | |\n   *  | |  __ _   _| |_ ___ _ __ | |__   ___ _ __ __ _\n   *  | | |_ | | | | __/ _ \\ '_ \\| '_ \\ / _ \\ '__/ _` |\n   *  | |__| | |_| | ||  __/ | | | |_) |  __/ | | (_| |\n   *   \\_____|\\__,_|\\__\\___|_| |_|_.__/ \\___|_|  \\__, |\n   *                                              __/ |\n   *                  GRAMMAR                    |___/\n   *\n   *\n   * Welcome to the grammar file for Gutenberg posts!\n   *\n   * Please don't be distracted by the functions at the top\n   * here - they're just helpers for the grammar below. We\n   * try to keep them as minimal and simple as possible,\n   * but the parser generator forces us to declare them at\n   * the beginning of the file.\n   *\n   * What follows is the official specification grammar for\n   * documents created or edited in Gutenberg. It starts at\n   * the top-level rule `Block_List`\n   *\n   * The grammar is defined by a series of _rules_ and ways\n   * to return matches on those rules. It's a _PEG_, a\n   * parsing expression grammar, which simply means that for\n   * each of our rules we have a set of sub-rules to match\n   * on and the generated parser will try them in order\n   * until it finds the first match.\n   *\n   * This grammar is a _specification_ (with as little actual\n   * code as we can get away with) which is used by the\n   * parser generator to generate the actual _parser_ which\n   * is used by Gutenberg. We generate two parsers: one in\n   * JavaScript for use the browser and one in PHP for\n   * WordPress itself. PEG parser generators are available\n   * in many languages, though different libraries may require\n   * some translation of this grammar into their syntax.\n   *\n   * For more information:\n   * @see https://pegjs.org\n   * @see https://en.wikipedia.org/wiki/Parsing_expression_grammar\n   *\n   */\n\n  /** <?php\n  // The `maybeJSON` function is not needed in PHP because its return semantics\n  // are the same as `json_decode`\n\n  if ( ! function_exists( 'peg_empty_attrs' ) ) {\n       function peg_empty_attrs() {\n           static $empty_attrs = null;\n\n           if ( null === $empty_attrs ) {\n               $empty_attrs = json_decode( '{}', true );\n           }\n\n           return $empty_attrs;\n       }\n  }\n\n  // array arguments are backwards because of PHP\n  if ( ! function_exists( 'peg_process_inner_content' ) ) {\n      function peg_process_inner_content( $array ) {\n          $html = '';\n          $blocks = array();\n          $content = array();\n\n          foreach ( $array as $item ) {\n              if ( is_string( $item ) ) {\n                  $html .= $item;\n                  $content[] = $item;\n              } else {\n                  $blocks[] = $item;\n                  $content[] = null;\n              }\n          }\n\n          return array( $html, $blocks, $content );\n      }\n  }\n\n  if ( ! function_exists( 'peg_join_blocks' ) ) {\n      function peg_join_blocks( $pre, $tokens, $post ) {\n          $blocks = array();\n\n          if ( ! empty( $pre ) ) {\n              $blocks[] = array(\n                  'blockName' => null,\n                  'attrs' => peg_empty_attrs(),\n                  'innerBlocks' => array(),\n                  'innerHTML' => $pre,\n                  'innerContent' => array( $pre ),\n              );\n          }\n\n          foreach ( $tokens as $token ) {\n              list( $token, $html ) = $token;\n\n              $blocks[] = $token;\n\n              if ( ! empty( $html ) ) {\n                  $blocks[] = array(\n                      'blockName' => null,\n                      'attrs' => peg_empty_attrs(),\n                      'innerBlocks' => array(),\n                      'innerHTML' => $html,\n                      'innerContent' => array( $html ),\n                  );\n              }\n          }\n\n          if ( ! empty( $post ) ) {\n              $blocks[] = array(\n                  'blockName' => null,\n                  'attrs' => peg_empty_attrs(),\n                  'innerBlocks' => array(),\n                  'innerHTML' => $post,\n                  'innerContent' => array( $post ),\n              );\n          }\n\n          return $blocks;\n      }\n  }\n\n  ?> **/\n\n  function freeform( s ) {\n      return s.length && {\n          blockName: null,\n          attrs: {},\n          innerBlocks: [],\n          innerHTML: s,\n          innerContent: [ s ],\n      };\n  }\n\n  function joinBlocks( pre, tokens, post ) {\n      var blocks = [], i, l, html, item, token;\n\n      if ( pre.length ) {\n          blocks.push( freeform( pre ) );\n      }\n\n      for ( i = 0, l = tokens.length; i < l; i++ ) {\n          item = tokens[ i ];\n          token = item[ 0 ];\n          html = item[ 1 ];\n\n          blocks.push( token );\n          if ( html.length ) {\n              blocks.push( freeform( html ) );\n          }\n      }\n\n      if ( post.length ) {\n          blocks.push( freeform( post ) );\n      }\n\n      return blocks;\n  }\n\n  function maybeJSON( s ) {\n      try {\n          return JSON.parse( s );\n      } catch (e) {\n          return null;\n      }\n  }\n\n  function processInnerContent( list ) {\n      var i, l, item;\n      var html = '';\n      var blocks = [];\n      var content = [];\n\n      // nod to performance over a simpler reduce\n      // and clone model we could have taken here\n      for ( i = 0, l = list.length; i < l; i++ ) {\n          item = list[ i ];\n\n          if ( 'string' === typeof item ) {\n              html += item;\n              content.push( item );\n          } else {\n              blocks.push( item );\n              content.push( null );\n          }\n      };\n\n      return [ html, blocks, content ];\n  }\n\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6803);\n"],"names":["peg$SyntaxError","message","expected","found","location","this","name","Error","captureStackTrace","child","parent","ctor","constructor","prototype","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","i","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","module","exports","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","Block_List","peg$parseBlock_List","peg$startRuleFunction","peg$c0","peg$c1","pre","b","html","peg$c3","peg$c4","peg$literalExpectation","peg$c5","peg$c6","peg$c7","blockName","a","peg$c8","peg$c9","peg$c12","peg$c13","peg$c15","peg$c16","peg$c19","peg$c21","peg$c22","peg$classExpectation","peg$c23","peg$c24","peg$c25","peg$c27","peg$c29","peg$c32","peg$c33","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","p","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","push","s0","s1","s2","s3","s4","s5","s6","s7","s8","s9","peg$parseBlock","charAt","substring","tokens","post","l","item","token","blocks","freeform","joinBlocks","substr","peg$parse__","peg$parseBlock_Name","peg$parseBlock_Attributes","attrs","innerBlocks","innerHTML","innerContent","peg$parseBlock_Void","innerParts","peg$parseBlock_Start","peg$parseBlock_End","list","content","processInnerContent","peg$parseBlock_Balanced","peg$parseBlock_Name_Part","peg$parseNamespaced_Block_Name","test","s10","s11","s12","JSON","e","maybeJSON","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}