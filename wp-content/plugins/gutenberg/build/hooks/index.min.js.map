{"version":3,"file":"./build/hooks/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","../../packages/hooks/src/validateNamespace.js","../../packages/hooks/src/validateHookName.js","../../packages/hooks/src/createAddHook.js","../../packages/hooks/src/createRemoveHook.js","../../packages/hooks/src/createHasHook.js","../../packages/hooks/src/createRunHook.js","../../packages/hooks/src/createCurrentHook.js","../../packages/hooks/src/createDoingHook.js","../../packages/hooks/src/createDidHook.js","../../packages/hooks/src/createHooks.js","../../packages/hooks/src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Validate a namespace string.\n *\n * @param {string} namespace The namespace to validate - should take the form\n *                           `vendor/plugin/function`.\n *\n * @return {boolean} Whether the namespace is valid.\n */\nfunction validateNamespace( namespace ) {\n\tif ( 'string' !== typeof namespace || '' === namespace ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The namespace must be a non-empty string.' );\n\t\treturn false;\n\t}\n\n\tif ( ! /^[a-zA-Z][a-zA-Z0-9_.\\-\\/]*$/.test( namespace ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\n\t\t\t'The namespace can only contain numbers, letters, dashes, periods, underscores and slashes.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport default validateNamespace;\n","/**\n * Validate a hookName string.\n *\n * @param {string} hookName The hook name to validate. Should be a non empty string containing\n *                          only numbers, letters, dashes, periods and underscores. Also,\n *                          the hook name cannot begin with `__`.\n *\n * @return {boolean} Whether the hook name is valid.\n */\nfunction validateHookName( hookName ) {\n\tif ( 'string' !== typeof hookName || '' === hookName ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The hook name must be a non-empty string.' );\n\t\treturn false;\n\t}\n\n\tif ( /^__/.test( hookName ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The hook name cannot begin with `__`.' );\n\t\treturn false;\n\t}\n\n\tif ( ! /^[a-zA-Z][a-zA-Z0-9_.-]*$/.test( hookName ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\n\t\t\t'The hook name can only contain numbers, letters, dashes, periods and underscores.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport default validateHookName;\n","/**\n * Internal dependencies\n */\nimport validateNamespace from './validateNamespace.js';\nimport validateHookName from './validateHookName.js';\n\n/**\n * @callback AddHook\n *\n * Adds the hook to the appropriate hooks container.\n *\n * @param {string}               hookName      Name of hook to add\n * @param {string}               namespace     The unique namespace identifying the callback in the form `vendor/plugin/function`.\n * @param {import('.').Callback} callback      Function to call when the hook is run\n * @param {number}               [priority=10] Priority of this hook\n */\n\n/**\n * Returns a function which, when invoked, will add a hook.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {AddHook} Function that adds a new hook.\n */\nfunction createAddHook( hooks, storeKey ) {\n\treturn function addHook( hookName, namespace, callback, priority = 10 ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! validateNamespace( namespace ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'function' !== typeof callback ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( 'The hook callback must be a function.' );\n\t\t\treturn;\n\t\t}\n\n\t\t// Validate numeric priority\n\t\tif ( 'number' !== typeof priority ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(\n\t\t\t\t'If specified, the hook priority must be a number.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst handler = { callback, priority, namespace };\n\n\t\tif ( hooksStore[ hookName ] ) {\n\t\t\t// Find the correct insert index of the new hook.\n\t\t\tconst handlers = hooksStore[ hookName ].handlers;\n\n\t\t\t/** @type {number} */\n\t\t\tlet i;\n\t\t\tfor ( i = handlers.length; i > 0; i-- ) {\n\t\t\t\tif ( priority >= handlers[ i - 1 ].priority ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( i === handlers.length ) {\n\t\t\t\t// If append, operate via direct assignment.\n\t\t\t\thandlers[ i ] = handler;\n\t\t\t} else {\n\t\t\t\t// Otherwise, insert before index via splice.\n\t\t\t\thandlers.splice( i, 0, handler );\n\t\t\t}\n\n\t\t\t// We may also be currently executing this hook.  If the callback\n\t\t\t// we're adding would come after the current callback, there's no\n\t\t\t// problem; otherwise we need to increase the execution index of\n\t\t\t// any other runs by 1 to account for the added element.\n\t\t\thooksStore.__current.forEach( ( hookInfo ) => {\n\t\t\t\tif (\n\t\t\t\t\thookInfo.name === hookName &&\n\t\t\t\t\thookInfo.currentIndex >= i\n\t\t\t\t) {\n\t\t\t\t\thookInfo.currentIndex++;\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// This is the first hook of its type.\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\thandlers: [ handler ],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\tif ( hookName !== 'hookAdded' ) {\n\t\t\thooks.doAction(\n\t\t\t\t'hookAdded',\n\t\t\t\thookName,\n\t\t\t\tnamespace,\n\t\t\t\tcallback,\n\t\t\t\tpriority\n\t\t\t);\n\t\t}\n\t};\n}\n\nexport default createAddHook;\n","/**\n * Internal dependencies\n */\nimport validateNamespace from './validateNamespace.js';\nimport validateHookName from './validateHookName.js';\n\n/**\n * @callback RemoveHook\n * Removes the specified callback (or all callbacks) from the hook with a given hookName\n * and namespace.\n *\n * @param {string} hookName  The name of the hook to modify.\n * @param {string} namespace The unique namespace identifying the callback in the\n *                           form `vendor/plugin/function`.\n *\n * @return {number | undefined} The number of callbacks removed.\n */\n\n/**\n * Returns a function which, when invoked, will remove a specified hook or all\n * hooks by the given name.\n *\n * @param {import('.').Hooks}    hooks             Hooks instance.\n * @param {import('.').StoreKey} storeKey\n * @param {boolean}              [removeAll=false] Whether to remove all callbacks for a hookName,\n *                                                 without regard to namespace. Used to create\n *                                                 `removeAll*` functions.\n *\n * @return {RemoveHook} Function that removes hooks.\n */\nfunction createRemoveHook( hooks, storeKey, removeAll = false ) {\n\treturn function removeHook( hookName, namespace ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! removeAll && ! validateNamespace( namespace ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Bail if no hooks exist by this name.\n\t\tif ( ! hooksStore[ hookName ] ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet handlersRemoved = 0;\n\n\t\tif ( removeAll ) {\n\t\t\thandlersRemoved = hooksStore[ hookName ].handlers.length;\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\truns: hooksStore[ hookName ].runs,\n\t\t\t\thandlers: [],\n\t\t\t};\n\t\t} else {\n\t\t\t// Try to find the specified callback to remove.\n\t\t\tconst handlers = hooksStore[ hookName ].handlers;\n\t\t\tfor ( let i = handlers.length - 1; i >= 0; i-- ) {\n\t\t\t\tif ( handlers[ i ].namespace === namespace ) {\n\t\t\t\t\thandlers.splice( i, 1 );\n\t\t\t\t\thandlersRemoved++;\n\t\t\t\t\t// This callback may also be part of a hook that is\n\t\t\t\t\t// currently executing.  If the callback we're removing\n\t\t\t\t\t// comes after the current callback, there's no problem;\n\t\t\t\t\t// otherwise we need to decrease the execution index of any\n\t\t\t\t\t// other runs by 1 to account for the removed element.\n\t\t\t\t\thooksStore.__current.forEach( ( hookInfo ) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\thookInfo.name === hookName &&\n\t\t\t\t\t\t\thookInfo.currentIndex >= i\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\thookInfo.currentIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( hookName !== 'hookRemoved' ) {\n\t\t\thooks.doAction( 'hookRemoved', hookName, namespace );\n\t\t}\n\n\t\treturn handlersRemoved;\n\t};\n}\n\nexport default createRemoveHook;\n","/**\n * @callback HasHook\n *\n * Returns whether any handlers are attached for the given hookName and optional namespace.\n *\n * @param {string} hookName    The name of the hook to check for.\n * @param {string} [namespace] Optional. The unique namespace identifying the callback\n *                             in the form `vendor/plugin/function`.\n *\n * @return {boolean} Whether there are handlers that are attached to the given hook.\n */\n/**\n * Returns a function which, when invoked, will return whether any handlers are\n * attached to a particular hook.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {HasHook} Function that returns whether any handlers are\n *                   attached to a particular hook and optional namespace.\n */\nfunction createHasHook( hooks, storeKey ) {\n\treturn function hasHook( hookName, namespace ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\t// Use the namespace if provided.\n\t\tif ( 'undefined' !== typeof namespace ) {\n\t\t\treturn (\n\t\t\t\thookName in hooksStore &&\n\t\t\t\thooksStore[ hookName ].handlers.some(\n\t\t\t\t\t( hook ) => hook.namespace === namespace\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\treturn hookName in hooksStore;\n\t};\n}\n\nexport default createHasHook;\n","/**\n * Returns a function which, when invoked, will execute all callbacks\n * registered to a hook of the specified type, optionally returning the final\n * value of the call chain.\n *\n * @param {import('.').Hooks}    hooks          Hooks instance.\n * @param {import('.').StoreKey} storeKey\n * @param {boolean}              returnFirstArg Whether each hook callback is expected to return its first argument.\n * @param {boolean}              async          Whether the hook callback should be run asynchronously\n *\n * @return {(hookName:string, ...args: unknown[]) => undefined|unknown} Function that runs hook callbacks.\n */\nfunction createRunHook( hooks, storeKey, returnFirstArg, async ) {\n\treturn function runHook( hookName, ...args ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! hooksStore[ hookName ] ) {\n\t\t\thooksStore[ hookName ] = {\n\t\t\t\thandlers: [],\n\t\t\t\truns: 0,\n\t\t\t};\n\t\t}\n\n\t\thooksStore[ hookName ].runs++;\n\n\t\tconst handlers = hooksStore[ hookName ].handlers;\n\n\t\t// The following code is stripped from production builds.\n\t\tif ( 'production' !== process.env.NODE_ENV ) {\n\t\t\t// Handle any 'all' hooks registered.\n\t\t\tif ( 'hookAdded' !== hookName && hooksStore.all ) {\n\t\t\t\thandlers.push( ...hooksStore.all.handlers );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! handlers || ! handlers.length ) {\n\t\t\treturn returnFirstArg ? args[ 0 ] : undefined;\n\t\t}\n\n\t\tconst hookInfo = {\n\t\t\tname: hookName,\n\t\t\tcurrentIndex: 0,\n\t\t};\n\n\t\tasync function asyncRunner() {\n\t\t\ttry {\n\t\t\t\thooksStore.__current.add( hookInfo );\n\t\t\t\tlet result = returnFirstArg ? args[ 0 ] : undefined;\n\t\t\t\twhile ( hookInfo.currentIndex < handlers.length ) {\n\t\t\t\t\tconst handler = handlers[ hookInfo.currentIndex ];\n\t\t\t\t\tresult = await handler.callback.apply( null, args );\n\t\t\t\t\tif ( returnFirstArg ) {\n\t\t\t\t\t\targs[ 0 ] = result;\n\t\t\t\t\t}\n\t\t\t\t\thookInfo.currentIndex++;\n\t\t\t\t}\n\t\t\t\treturn returnFirstArg ? result : undefined;\n\t\t\t} finally {\n\t\t\t\thooksStore.__current.delete( hookInfo );\n\t\t\t}\n\t\t}\n\n\t\tfunction syncRunner() {\n\t\t\ttry {\n\t\t\t\thooksStore.__current.add( hookInfo );\n\t\t\t\tlet result = returnFirstArg ? args[ 0 ] : undefined;\n\t\t\t\twhile ( hookInfo.currentIndex < handlers.length ) {\n\t\t\t\t\tconst handler = handlers[ hookInfo.currentIndex ];\n\t\t\t\t\tresult = handler.callback.apply( null, args );\n\t\t\t\t\tif ( returnFirstArg ) {\n\t\t\t\t\t\targs[ 0 ] = result;\n\t\t\t\t\t}\n\t\t\t\t\thookInfo.currentIndex++;\n\t\t\t\t}\n\t\t\t\treturn returnFirstArg ? result : undefined;\n\t\t\t} finally {\n\t\t\t\thooksStore.__current.delete( hookInfo );\n\t\t\t}\n\t\t}\n\n\t\treturn ( async ? asyncRunner : syncRunner )();\n\t};\n}\n\nexport default createRunHook;\n","/**\n * Returns a function which, when invoked, will return the name of the\n * currently running hook, or `null` if no hook of the given type is currently\n * running.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {() => string | null} Function that returns the current hook name or null.\n */\nfunction createCurrentHook( hooks, storeKey ) {\n\treturn function currentHook() {\n\t\tconst hooksStore = hooks[ storeKey ];\n\t\tconst currentArray = Array.from( hooksStore.__current );\n\t\treturn currentArray.at( -1 )?.name ?? null;\n\t};\n}\n\nexport default createCurrentHook;\n","/**\n * @callback DoingHook\n * Returns whether a hook is currently being executed.\n *\n * @param {string} [hookName] The name of the hook to check for.  If\n *                            omitted, will check for any hook being executed.\n *\n * @return {boolean} Whether the hook is being executed.\n */\n\n/**\n * Returns a function which, when invoked, will return whether a hook is\n * currently being executed.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {DoingHook} Function that returns whether a hook is currently\n *                     being executed.\n */\nfunction createDoingHook( hooks, storeKey ) {\n\treturn function doingHook( hookName ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\t// If the hookName was not passed, check for any current hook.\n\t\tif ( 'undefined' === typeof hookName ) {\n\t\t\treturn hooksStore.__current.size > 0;\n\t\t}\n\n\t\t// Find if the `hookName` hook is in `__current`.\n\t\treturn Array.from( hooksStore.__current ).some(\n\t\t\t( hook ) => hook.name === hookName\n\t\t);\n\t};\n}\n\nexport default createDoingHook;\n","/**\n * Internal dependencies\n */\nimport validateHookName from './validateHookName.js';\n\n/**\n * @callback DidHook\n *\n * Returns the number of times an action has been fired.\n *\n * @param {string} hookName The hook name to check.\n *\n * @return {number | undefined} The number of times the hook has run.\n */\n\n/**\n * Returns a function which, when invoked, will return the number of times a\n * hook has been called.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {DidHook} Function that returns a hook's call count.\n */\nfunction createDidHook( hooks, storeKey ) {\n\treturn function didHook( hookName ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\tif ( ! validateHookName( hookName ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn hooksStore[ hookName ] && hooksStore[ hookName ].runs\n\t\t\t? hooksStore[ hookName ].runs\n\t\t\t: 0;\n\t};\n}\n\nexport default createDidHook;\n","/**\n * Internal dependencies\n */\nimport createAddHook from './createAddHook';\nimport createRemoveHook from './createRemoveHook';\nimport createHasHook from './createHasHook';\nimport createRunHook from './createRunHook';\nimport createCurrentHook from './createCurrentHook';\nimport createDoingHook from './createDoingHook';\nimport createDidHook from './createDidHook';\n\n/**\n * Internal class for constructing hooks. Use `createHooks()` function\n *\n * Note, it is necessary to expose this class to make its type public.\n *\n * @private\n */\nexport class _Hooks {\n\tconstructor() {\n\t\t/** @type {import('.').Store} actions */\n\t\tthis.actions = Object.create( null );\n\t\tthis.actions.__current = new Set();\n\n\t\t/** @type {import('.').Store} filters */\n\t\tthis.filters = Object.create( null );\n\t\tthis.filters.__current = new Set();\n\n\t\tthis.addAction = createAddHook( this, 'actions' );\n\t\tthis.addFilter = createAddHook( this, 'filters' );\n\t\tthis.removeAction = createRemoveHook( this, 'actions' );\n\t\tthis.removeFilter = createRemoveHook( this, 'filters' );\n\t\tthis.hasAction = createHasHook( this, 'actions' );\n\t\tthis.hasFilter = createHasHook( this, 'filters' );\n\t\tthis.removeAllActions = createRemoveHook( this, 'actions', true );\n\t\tthis.removeAllFilters = createRemoveHook( this, 'filters', true );\n\t\tthis.doAction = createRunHook( this, 'actions', false, false );\n\t\tthis.doActionAsync = createRunHook( this, 'actions', false, true );\n\t\tthis.applyFilters = createRunHook( this, 'filters', true, false );\n\t\tthis.applyFiltersAsync = createRunHook( this, 'filters', true, true );\n\t\tthis.currentAction = createCurrentHook( this, 'actions' );\n\t\tthis.currentFilter = createCurrentHook( this, 'filters' );\n\t\tthis.doingAction = createDoingHook( this, 'actions' );\n\t\tthis.doingFilter = createDoingHook( this, 'filters' );\n\t\tthis.didAction = createDidHook( this, 'actions' );\n\t\tthis.didFilter = createDidHook( this, 'filters' );\n\t}\n}\n\n/** @typedef {_Hooks} Hooks */\n\n/**\n * Returns an instance of the hooks object.\n *\n * @return {Hooks} A Hooks instance.\n */\nfunction createHooks() {\n\treturn new _Hooks();\n}\n\nexport default createHooks;\n","/**\n * Internal dependencies\n */\nimport createHooks from './createHooks';\n\n/** @typedef {(...args: any[])=>any} Callback */\n\n/**\n * @typedef Handler\n * @property {Callback} callback  The callback\n * @property {string}   namespace The namespace\n * @property {number}   priority  The namespace\n */\n\n/**\n * @typedef Hook\n * @property {Handler[]} handlers Array of handlers\n * @property {number}    runs     Run counter\n */\n\n/**\n * @typedef Current\n * @property {string} name         Hook name\n * @property {number} currentIndex The index\n */\n\n/**\n * @typedef {Record<string, Hook> & {__current: Set<Current>}} Store\n */\n\n/**\n * @typedef {'actions' | 'filters'} StoreKey\n */\n\n/**\n * @typedef {import('./createHooks').Hooks} Hooks\n */\n\nexport const defaultHooks = createHooks();\n\nconst {\n\taddAction,\n\taddFilter,\n\tremoveAction,\n\tremoveFilter,\n\thasAction,\n\thasFilter,\n\tremoveAllActions,\n\tremoveAllFilters,\n\tdoAction,\n\tdoActionAsync,\n\tapplyFilters,\n\tapplyFiltersAsync,\n\tcurrentAction,\n\tcurrentFilter,\n\tdoingAction,\n\tdoingFilter,\n\tdidAction,\n\tdidFilter,\n\tactions,\n\tfilters,\n} = defaultHooks;\n\nexport {\n\tcreateHooks,\n\taddAction,\n\taddFilter,\n\tremoveAction,\n\tremoveFilter,\n\thasAction,\n\thasFilter,\n\tremoveAllActions,\n\tremoveAllFilters,\n\tdoAction,\n\tdoActionAsync,\n\tapplyFilters,\n\tapplyFiltersAsync,\n\tcurrentAction,\n\tcurrentFilter,\n\tdoingAction,\n\tdoingFilter,\n\tdidAction,\n\tdidFilter,\n\tactions,\n\tfilters,\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","namespace","console","error","test","hookName","hooks","storeKey","callback","priority","hooksStore","validateHookName","validateNamespace","handler","handlers","i","length","splice","__current","forEach","hookInfo","name","currentIndex","runs","doAction","removeAll","handlersRemoved","some","hook","returnFirstArg","async","args","undefined","add","result","apply","delete","_currentArray$at$name","currentArray","Array","from","at","size","_Hooks","constructor","this","actions","create","Set","filters","addAction","createAddHook","addFilter","removeAction","createRemoveHook","removeFilter","hasAction","createHasHook","hasFilter","removeAllActions","removeAllFilters","createRunHook","doActionAsync","applyFilters","applyFiltersAsync","currentAction","createCurrentHook","currentFilter","doingAction","createDoingHook","doingFilter","didAction","createDidHook","didFilter","defaultHooks","createHooks"],"sourceRoot":""}