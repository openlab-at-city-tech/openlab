{"version":3,"file":"./build/core-data/index.min.js","mappings":"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","sources":["webpack://wp/./node_modules/equivalent-key-map/equivalent-key-map.js","webpack://wp/./node_modules/memize/index.js","webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/compat get default export","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window \"lodash\"","webpack://wp/external window [\"wp\",\"isShallowEqual\"]","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/if-matching-action.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/replace-action.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/conservative-map-item.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/on-sub-key.js","webpack://wp/external window [\"wp\",\"apiFetch\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/./node_modules/uuid/dist/esm-browser/rng.js","webpack://wp/./node_modules/uuid/dist/esm-browser/regex.js","webpack://wp/./node_modules/uuid/dist/esm-browser/validate.js","webpack://wp/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://wp/./node_modules/uuid/dist/esm-browser/v4.js","webpack://wp/external window [\"wp\",\"url\"]","webpack://wp/external window [\"wp\",\"deprecated\"]","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/actions.js","webpack://wp/./packages/core-data/build-module/batch/@wordpress/core-data/src/batch/default-processor.js","webpack://wp/./packages/core-data/build-module/batch/@wordpress/core-data/src/batch/create-batch.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/name.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/actions.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/entities.ts","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/get-normalized-comma-separable.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/get-query-parts.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/with-weak-map-cache.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/reducer.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/reducer.js","webpack://wp/./node_modules/rememo/es/rememo.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/selectors.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/selectors.ts","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/is-raw-attribute.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/forward-resolver.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/resolvers.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/utils.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/reducer.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/selectors.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/engine.js","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/external window [\"wp\",\"blocks\"]","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/entity-provider.js","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/memoize.js","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/constants.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-query-select.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-entity-record.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-entity-records.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-resource-permissions.ts","webpack://wp/external window [\"wp\",\"htmlEntities\"]","webpack://wp/./packages/core-data/build-module/fetch/@wordpress/core-data/src/fetch/__experimental-fetch-link-suggestions.js","webpack://wp/./packages/core-data/build-module/fetch/@wordpress/core-data/src/fetch/__experimental-fetch-url-data.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/index.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/actions.js"],"sourcesContent":["'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * Given an instance of EquivalentKeyMap, returns its internal value pair tuple\n * for a key, if one exists. The tuple members consist of the last reference\n * value for the key (used in efficient subsequent lookups) and the value\n * assigned for the key at the leaf node.\n *\n * @param {EquivalentKeyMap} instance EquivalentKeyMap instance.\n * @param {*} key                     The key for which to return value pair.\n *\n * @return {?Array} Value pair, if exists.\n */\nfunction getValuePair(instance, key) {\n  var _map = instance._map,\n      _arrayTreeMap = instance._arrayTreeMap,\n      _objectTreeMap = instance._objectTreeMap; // Map keeps a reference to the last object-like key used to set the\n  // value, which can be used to shortcut immediately to the value.\n\n  if (_map.has(key)) {\n    return _map.get(key);\n  } // Sort keys to ensure stable retrieval from tree.\n\n\n  var properties = Object.keys(key).sort(); // Tree by type to avoid conflicts on numeric object keys, empty value.\n\n  var map = Array.isArray(key) ? _arrayTreeMap : _objectTreeMap;\n\n  for (var i = 0; i < properties.length; i++) {\n    var property = properties[i];\n    map = map.get(property);\n\n    if (map === undefined) {\n      return;\n    }\n\n    var propertyValue = key[property];\n    map = map.get(propertyValue);\n\n    if (map === undefined) {\n      return;\n    }\n  }\n\n  var valuePair = map.get('_ekm_value');\n\n  if (!valuePair) {\n    return;\n  } // If reached, it implies that an object-like key was set with another\n  // reference, so delete the reference and replace with the current.\n\n\n  _map.delete(valuePair[0]);\n\n  valuePair[0] = key;\n  map.set('_ekm_value', valuePair);\n\n  _map.set(key, valuePair);\n\n  return valuePair;\n}\n/**\n * Variant of a Map object which enables lookup by equivalent (deeply equal)\n * object and array keys.\n */\n\n\nvar EquivalentKeyMap =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructs a new instance of EquivalentKeyMap.\n   *\n   * @param {Iterable.<*>} iterable Initial pair of key, value for map.\n   */\n  function EquivalentKeyMap(iterable) {\n    _classCallCheck(this, EquivalentKeyMap);\n\n    this.clear();\n\n    if (iterable instanceof EquivalentKeyMap) {\n      // Map#forEach is only means of iterating with support for IE11.\n      var iterablePairs = [];\n      iterable.forEach(function (value, key) {\n        iterablePairs.push([key, value]);\n      });\n      iterable = iterablePairs;\n    }\n\n    if (iterable != null) {\n      for (var i = 0; i < iterable.length; i++) {\n        this.set(iterable[i][0], iterable[i][1]);\n      }\n    }\n  }\n  /**\n   * Accessor property returning the number of elements.\n   *\n   * @return {number} Number of elements.\n   */\n\n\n  _createClass(EquivalentKeyMap, [{\n    key: \"set\",\n\n    /**\n     * Add or update an element with a specified key and value.\n     *\n     * @param {*} key   The key of the element to add.\n     * @param {*} value The value of the element to add.\n     *\n     * @return {EquivalentKeyMap} Map instance.\n     */\n    value: function set(key, value) {\n      // Shortcut non-object-like to set on internal Map.\n      if (key === null || _typeof(key) !== 'object') {\n        this._map.set(key, value);\n\n        return this;\n      } // Sort keys to ensure stable assignment into tree.\n\n\n      var properties = Object.keys(key).sort();\n      var valuePair = [key, value]; // Tree by type to avoid conflicts on numeric object keys, empty value.\n\n      var map = Array.isArray(key) ? this._arrayTreeMap : this._objectTreeMap;\n\n      for (var i = 0; i < properties.length; i++) {\n        var property = properties[i];\n\n        if (!map.has(property)) {\n          map.set(property, new EquivalentKeyMap());\n        }\n\n        map = map.get(property);\n        var propertyValue = key[property];\n\n        if (!map.has(propertyValue)) {\n          map.set(propertyValue, new EquivalentKeyMap());\n        }\n\n        map = map.get(propertyValue);\n      } // If an _ekm_value exists, there was already an equivalent key. Before\n      // overriding, ensure that the old key reference is removed from map to\n      // avoid memory leak of accumulating equivalent keys. This is, in a\n      // sense, a poor man's WeakMap, while still enabling iterability.\n\n\n      var previousValuePair = map.get('_ekm_value');\n\n      if (previousValuePair) {\n        this._map.delete(previousValuePair[0]);\n      }\n\n      map.set('_ekm_value', valuePair);\n\n      this._map.set(key, valuePair);\n\n      return this;\n    }\n    /**\n     * Returns a specified element.\n     *\n     * @param {*} key The key of the element to return.\n     *\n     * @return {?*} The element associated with the specified key or undefined\n     *              if the key can't be found.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      // Shortcut non-object-like to get from internal Map.\n      if (key === null || _typeof(key) !== 'object') {\n        return this._map.get(key);\n      }\n\n      var valuePair = getValuePair(this, key);\n\n      if (valuePair) {\n        return valuePair[1];\n      }\n    }\n    /**\n     * Returns a boolean indicating whether an element with the specified key\n     * exists or not.\n     *\n     * @param {*} key The key of the element to test for presence.\n     *\n     * @return {boolean} Whether an element with the specified key exists.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      if (key === null || _typeof(key) !== 'object') {\n        return this._map.has(key);\n      } // Test on the _presence_ of the pair, not its value, as even undefined\n      // can be a valid member value for a key.\n\n\n      return getValuePair(this, key) !== undefined;\n    }\n    /**\n     * Removes the specified element.\n     *\n     * @param {*} key The key of the element to remove.\n     *\n     * @return {boolean} Returns true if an element existed and has been\n     *                   removed, or false if the element does not exist.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      if (!this.has(key)) {\n        return false;\n      } // This naive implementation will leave orphaned child trees. A better\n      // implementation should traverse and remove orphans.\n\n\n      this.set(key, undefined);\n      return true;\n    }\n    /**\n     * Executes a provided function once per each key/value pair, in insertion\n     * order.\n     *\n     * @param {Function} callback Function to execute for each element.\n     * @param {*}        thisArg  Value to use as `this` when executing\n     *                            `callback`.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var _this = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n      this._map.forEach(function (value, key) {\n        // Unwrap value from object-like value pair.\n        if (key !== null && _typeof(key) === 'object') {\n          value = value[1];\n        }\n\n        callback.call(thisArg, value, key, _this);\n      });\n    }\n    /**\n     * Removes all elements.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._map = new Map();\n      this._arrayTreeMap = new Map();\n      this._objectTreeMap = new Map();\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._map.size;\n    }\n  }]);\n\n  return EquivalentKeyMap;\n}();\n\nmodule.exports = EquivalentKeyMap;\n","/**\n * Memize options object.\n *\n * @typedef MemizeOptions\n *\n * @property {number} [maxSize] Maximum size of the cache.\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef MemizeCacheNode\n *\n * @property {?MemizeCacheNode|undefined} [prev] Previous node.\n * @property {?MemizeCacheNode|undefined} [next] Next node.\n * @property {Array<*>}                   args   Function arguments for cache\n *                                               entry.\n * @property {*}                          val    Function result.\n */\n\n/**\n * Properties of the enhanced function for controlling cache.\n *\n * @typedef MemizeMemoizedFunction\n *\n * @property {()=>void} clear Clear the cache.\n */\n\n/**\n * Accepts a function to be memoized, and returns a new memoized function, with\n * optional options.\n *\n * @template {Function} F\n *\n * @param {F}             fn        Function to memoize.\n * @param {MemizeOptions} [options] Options object.\n *\n * @return {F & MemizeMemoizedFunction} Memoized function.\n */\nfunction memize( fn, options ) {\n\tvar size = 0;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar head;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar tail;\n\n\toptions = options || {};\n\n\tfunction memoized( /* ...args */ ) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs, i;\n\n\t\tsearchCache: while ( node ) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif ( node.args.length !== arguments.length ) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( node.args[ i ] !== arguments[ i ] ) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif ( node !== head ) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif ( node === tail ) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\t/** @type {MemizeCacheNode} */ ( node.prev ).next = node.next;\n\t\t\t\tif ( node.next ) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {MemizeCacheNode} */ ( head ).prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply( null, args ),\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif ( head ) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif ( size === /** @type {MemizeOptions} */ ( options ).maxSize ) {\n\t\t\ttail = /** @type {MemizeCacheNode} */ ( tail ).prev;\n\t\t\t/** @type {MemizeCacheNode} */ ( tail ).next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function() {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\tif ( process.env.NODE_ENV === 'test' ) {\n\t\t// Cache is not exposed in the public API, but used in tests to ensure\n\t\t// expected list progression\n\t\tmemoized.getCache = function() {\n\t\t\treturn [ head, tail, size ];\n\t\t};\n\t}\n\n\t// Ignore reason: There's not a clear solution to create an intersection of\n\t// the function with additional properties, where the goal is to retain the\n\t// function signature of the incoming argument and add control properties\n\t// on the return value.\n\n\t// @ts-ignore\n\treturn memoized;\n}\n\nmodule.exports = memize;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"lodash\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"isShallowEqual\"];","/** @typedef {import('../types').AnyFunction} AnyFunction */\n\n/**\n * A higher-order reducer creator which invokes the original reducer only if\n * the dispatching action matches the given predicate, **OR** if state is\n * initializing (undefined).\n *\n * @param {AnyFunction} isMatch Function predicate for allowing reducer call.\n *\n * @return {AnyFunction} Higher-order reducer.\n */\nconst ifMatchingAction = ( isMatch ) => ( reducer ) => ( state, action ) => {\n\tif ( state === undefined || isMatch( action ) ) {\n\t\treturn reducer( state, action );\n\t}\n\n\treturn state;\n};\n\nexport default ifMatchingAction;\n","/** @typedef {import('../types').AnyFunction} AnyFunction */\n\n/**\n * Higher-order reducer creator which substitutes the action object before\n * passing to the original reducer.\n *\n * @param {AnyFunction} replacer Function mapping original action to replacement.\n *\n * @return {AnyFunction} Higher-order reducer.\n */\nconst replaceAction = ( replacer ) => ( reducer ) => ( state, action ) => {\n\treturn reducer( state, replacer( action ) );\n};\n\nexport default replaceAction;\n","/**\n * External dependencies\n */\nimport { isEqual } from 'lodash';\n\n/**\n * Given the current and next item entity record, returns the minimally \"modified\"\n * result of the next item, preferring value references from the original item\n * if equal. If all values match, the original item is returned.\n *\n * @param {Object} item     Original item.\n * @param {Object} nextItem Next item.\n *\n * @return {Object} Minimally modified merged item.\n */\nexport default function conservativeMapItem( item, nextItem ) {\n\t// Return next item in its entirety if there is no original item.\n\tif ( ! item ) {\n\t\treturn nextItem;\n\t}\n\n\tlet hasChanges = false;\n\tconst result = {};\n\tfor ( const key in nextItem ) {\n\t\tif ( isEqual( item[ key ], nextItem[ key ] ) ) {\n\t\t\tresult[ key ] = item[ key ];\n\t\t} else {\n\t\t\thasChanges = true;\n\t\t\tresult[ key ] = nextItem[ key ];\n\t\t}\n\t}\n\n\tif ( ! hasChanges ) {\n\t\treturn item;\n\t}\n\n\t// Only at this point, backfill properties from the original item which\n\t// weren't explicitly set into the result above. This is an optimization\n\t// to allow `hasChanges` to return early.\n\tfor ( const key in item ) {\n\t\tif ( ! result.hasOwnProperty( key ) ) {\n\t\t\tresult[ key ] = item[ key ];\n\t\t}\n\t}\n\n\treturn result;\n}\n","/** @typedef {import('../types').AnyFunction} AnyFunction */\n\n/**\n * Higher-order reducer creator which creates a combined reducer object, keyed\n * by a property on the action object.\n *\n * @param {string} actionProperty Action property by which to key object.\n *\n * @return {AnyFunction} Higher-order reducer.\n */\nexport const onSubKey =\n\t( actionProperty ) =>\n\t( reducer ) =>\n\t( state = {}, action ) => {\n\t\t// Retrieve subkey from action. Do not track if undefined; useful for cases\n\t\t// where reducer is scoped by action shape.\n\t\tconst key = action[ actionProperty ];\n\t\tif ( key === undefined ) {\n\t\t\treturn state;\n\t\t}\n\n\t\t// Avoid updating state if unchanged. Note that this also accounts for a\n\t\t// reducer which returns undefined on a key which is not yet tracked.\n\t\tconst nextKeyState = reducer( state[ key ], action );\n\t\tif ( nextKeyState === state[ key ] ) {\n\t\t\treturn state;\n\t\t}\n\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ key ]: nextKeyState,\n\t\t};\n\t};\n\nexport default onSubKey;\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"apiFetch\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"url\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"deprecated\"];","/**\n * External dependencies\n */\nimport { castArray } from 'lodash';\n\n/**\n * Returns an action object used in signalling that items have been received.\n *\n * @param {Array}   items Items received.\n * @param {?Object} edits Optional edits to reset.\n *\n * @return {Object} Action object.\n */\nexport function receiveItems( items, edits ) {\n\treturn {\n\t\ttype: 'RECEIVE_ITEMS',\n\t\titems: castArray( items ),\n\t\tpersistedEdits: edits,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been\n * deleted and they need to be removed from entities state.\n *\n * @param {string}              kind            Kind of the removed entities.\n * @param {string}              name            Name of the removed entities.\n * @param {Array|number|string} records         Record IDs of the removed entities.\n * @param {boolean}             invalidateCache Controls whether we want to invalidate the cache.\n * @return {Object} Action object.\n */\nexport function removeItems( kind, name, records, invalidateCache = false ) {\n\treturn {\n\t\ttype: 'REMOVE_ITEMS',\n\t\titemIds: castArray( records ),\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that queried data has been\n * received.\n *\n * @param {Array}   items Queried items received.\n * @param {?Object} query Optional query object.\n * @param {?Object} edits Optional edits to reset.\n *\n * @return {Object} Action object.\n */\nexport function receiveQueriedItems( items, query = {}, edits ) {\n\treturn {\n\t\t...receiveItems( items, edits ),\n\t\tquery,\n\t};\n}\n","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Maximum number of requests to place in a single batch request. Obtained by\n * sending a preflight OPTIONS request to /batch/v1/.\n *\n * @type {number?}\n */\nlet maxItems = null;\n\nfunction chunk( arr, chunkSize ) {\n\tconst tmp = [ ...arr ];\n\tconst cache = [];\n\twhile ( tmp.length ) {\n\t\tcache.push( tmp.splice( 0, chunkSize ) );\n\t}\n\n\treturn cache;\n}\n\n/**\n * Default batch processor. Sends its input requests to /batch/v1.\n *\n * @param {Array} requests List of API requests to perform at once.\n *\n * @return {Promise} Promise that resolves to a list of objects containing\n *                   either `output` (if that request was succesful) or `error`\n *                   (if not ).\n */\nexport default async function defaultProcessor( requests ) {\n\tif ( maxItems === null ) {\n\t\tconst preflightResponse = await apiFetch( {\n\t\t\tpath: '/batch/v1',\n\t\t\tmethod: 'OPTIONS',\n\t\t} );\n\t\tmaxItems = preflightResponse.endpoints[ 0 ].args.requests.maxItems;\n\t}\n\n\tconst results = [];\n\n\t// @ts-ignore We would have crashed or never gotten to this point if we hadn't received the maxItems count.\n\tfor ( const batchRequests of chunk( requests, maxItems ) ) {\n\t\tconst batchResponse = await apiFetch( {\n\t\t\tpath: '/batch/v1',\n\t\t\tmethod: 'POST',\n\t\t\tdata: {\n\t\t\t\tvalidation: 'require-all-validate',\n\t\t\t\trequests: batchRequests.map( ( request ) => ( {\n\t\t\t\t\tpath: request.path,\n\t\t\t\t\tbody: request.data, // Rename 'data' to 'body'.\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\theaders: request.headers,\n\t\t\t\t} ) ),\n\t\t\t},\n\t\t} );\n\n\t\tlet batchResults;\n\n\t\tif ( batchResponse.failed ) {\n\t\t\tbatchResults = batchResponse.responses.map( ( response ) => ( {\n\t\t\t\terror: response?.body,\n\t\t\t} ) );\n\t\t} else {\n\t\t\tbatchResults = batchResponse.responses.map( ( response ) => {\n\t\t\t\tconst result = {};\n\t\t\t\tif ( response.status >= 200 && response.status < 300 ) {\n\t\t\t\t\tresult.output = response.body;\n\t\t\t\t} else {\n\t\t\t\t\tresult.error = response.body;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} );\n\t\t}\n\n\t\tresults.push( ...batchResults );\n\t}\n\n\treturn results;\n}\n","/**\n * External dependencies\n */\nimport { zip } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport defaultProcessor from './default-processor';\n\n/**\n * Creates a batch, which can be used to combine multiple API requests into one\n * API request using the WordPress batch processing API (/v1/batch).\n *\n * ```\n * const batch = createBatch();\n * const dunePromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Dune' }\n * } );\n * const lotrPromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Lord of the Rings' }\n * } );\n * const isSuccess = await batch.run(); // Sends one POST to /v1/batch.\n * if ( isSuccess ) {\n *   console.log(\n *     'Saved two books:',\n *     await dunePromise,\n *     await lotrPromise\n *   );\n * }\n * ```\n *\n * @param {Function} [processor] Processor function. Can be used to replace the\n *                               default functionality which is to send an API\n *                               request to /v1/batch. Is given an array of\n *                               inputs and must return a promise that\n *                               resolves to an array of objects containing\n *                               either `output` or `error`.\n */\nexport default function createBatch( processor = defaultProcessor ) {\n\tlet lastId = 0;\n\t/** @type {Array<{ input: any; resolve: ( value: any ) => void; reject: ( error: any ) => void }>} */\n\tlet queue = [];\n\tconst pending = new ObservableSet();\n\n\treturn {\n\t\t/**\n\t\t * Adds an input to the batch and returns a promise that is resolved or\n\t\t * rejected when the input is processed by `batch.run()`.\n\t\t *\n\t\t * You may also pass a thunk which allows inputs to be added\n\t\t * asychronously.\n\t\t *\n\t\t * ```\n\t\t * // Both are allowed:\n\t\t * batch.add( { path: '/v1/books', ... } );\n\t\t * batch.add( ( add ) => add( { path: '/v1/books', ... } ) );\n\t\t * ```\n\t\t *\n\t\t * If a thunk is passed, `batch.run()` will pause until either:\n\t\t *\n\t\t * - The thunk calls its `add` argument, or;\n\t\t * - The thunk returns a promise and that promise resolves, or;\n\t\t * - The thunk returns a non-promise.\n\t\t *\n\t\t * @param {any|Function} inputOrThunk Input to add or thunk to execute.\n\t\t *\n\t\t * @return {Promise|any} If given an input, returns a promise that\n\t\t *                       is resolved or rejected when the batch is\n\t\t *                       processed. If given a thunk, returns the return\n\t\t *                       value of that thunk.\n\t\t */\n\t\tadd( inputOrThunk ) {\n\t\t\tconst id = ++lastId;\n\t\t\tpending.add( id );\n\n\t\t\tconst add = ( input ) =>\n\t\t\t\tnew Promise( ( resolve, reject ) => {\n\t\t\t\t\tqueue.push( {\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tresolve,\n\t\t\t\t\t\treject,\n\t\t\t\t\t} );\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\n\t\t\tif ( typeof inputOrThunk === 'function' ) {\n\t\t\t\treturn Promise.resolve( inputOrThunk( add ) ).finally( () => {\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn add( inputOrThunk );\n\t\t},\n\n\t\t/**\n\t\t * Runs the batch. This calls `batchProcessor` and resolves or rejects\n\t\t * all promises returned by `add()`.\n\t\t *\n\t\t * @return {Promise<boolean>} A promise that resolves to a boolean that is true\n\t\t *                   if the processor returned no errors.\n\t\t */\n\t\tasync run() {\n\t\t\tif ( pending.size ) {\n\t\t\t\tawait new Promise( ( resolve ) => {\n\t\t\t\t\tconst unsubscribe = pending.subscribe( () => {\n\t\t\t\t\t\tif ( ! pending.size ) {\n\t\t\t\t\t\t\tunsubscribe();\n\t\t\t\t\t\t\tresolve( undefined );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tlet results;\n\n\t\t\ttry {\n\t\t\t\tresults = await processor(\n\t\t\t\t\tqueue.map( ( { input } ) => input )\n\t\t\t\t);\n\n\t\t\t\tif ( results.length !== queue.length ) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'run: Array returned by processor must be same size as input array.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch ( error ) {\n\t\t\t\tfor ( const { reject } of queue ) {\n\t\t\t\t\treject( error );\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tlet isSuccess = true;\n\n\t\t\tfor ( const pair of zip( results, queue ) ) {\n\t\t\t\t/** @type {{error?: unknown, output?: unknown}} */\n\t\t\t\tconst result = pair[ 0 ];\n\n\t\t\t\t/** @type {{resolve: (value: any) => void; reject: (error: any) => void} | undefined} */\n\t\t\t\tconst queueItem = pair[ 1 ];\n\n\t\t\t\tif ( result?.error ) {\n\t\t\t\t\tqueueItem?.reject( result.error );\n\t\t\t\t\tisSuccess = false;\n\t\t\t\t} else {\n\t\t\t\t\tqueueItem?.resolve( result?.output ?? result );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tqueue = [];\n\n\t\t\treturn isSuccess;\n\t\t},\n\t};\n}\n\nclass ObservableSet {\n\tconstructor( ...args ) {\n\t\tthis.set = new Set( ...args );\n\t\tthis.subscribers = new Set();\n\t}\n\n\tget size() {\n\t\treturn this.set.size;\n\t}\n\n\tadd( value ) {\n\t\tthis.set.add( value );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn this;\n\t}\n\n\tdelete( value ) {\n\t\tconst isSuccess = this.set.delete( value );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn isSuccess;\n\t}\n\n\tsubscribe( subscriber ) {\n\t\tthis.subscribers.add( subscriber );\n\t\treturn () => {\n\t\t\tthis.subscribers.delete( subscriber );\n\t\t};\n\t}\n}\n","/**\n * The reducer key used by core data in store registration.\n * This is defined in a separate file to avoid cycle-dependency\n *\n * @type {string}\n */\nexport const STORE_NAME = 'core';\n","/**\n * External dependencies\n */\nimport { castArray, isEqual, find } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { receiveItems, removeItems, receiveQueriedItems } from './queried-data';\nimport { getOrLoadEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\nimport { createBatch } from './batch';\nimport { STORE_NAME } from './name';\n\n/**\n * Returns an action object used in signalling that authors have been received.\n *\n * @param {string}       queryID Query ID.\n * @param {Array|Object} users   Users received.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserQuery( queryID, users ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_QUERY',\n\t\tusers: castArray( users ),\n\t\tqueryID,\n\t};\n}\n\n/**\n * Returns an action used in signalling that the current user has been received.\n *\n * @param {Object} currentUser Current user object.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentUser( currentUser ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_USER',\n\t\tcurrentUser,\n\t};\n}\n\n/**\n * Returns an action object used in adding new entities.\n *\n * @param {Array} entities Entities received.\n *\n * @return {Object} Action object.\n */\nexport function addEntities( entities ) {\n\treturn {\n\t\ttype: 'ADD_ENTITIES',\n\t\tentities,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been received.\n *\n * @param {string}       kind            Kind of the received entity record.\n * @param {string}       name            Name of the received entity record.\n * @param {Array|Object} records         Records received.\n * @param {?Object}      query           Query Object.\n * @param {?boolean}     invalidateCache Should invalidate query caches.\n * @param {?Object}      edits           Edits to reset.\n * @return {Object} Action object.\n */\nexport function receiveEntityRecords(\n\tkind,\n\tname,\n\trecords,\n\tquery,\n\tinvalidateCache = false,\n\tedits\n) {\n\t// Auto drafts should not have titles, but some plugins rely on them so we can't filter this\n\t// on the server.\n\tif ( kind === 'postType' ) {\n\t\trecords = castArray( records ).map( ( record ) =>\n\t\t\trecord.status === 'auto-draft' ? { ...record, title: '' } : record\n\t\t);\n\t}\n\tlet action;\n\tif ( query ) {\n\t\taction = receiveQueriedItems( records, query, edits );\n\t} else {\n\t\taction = receiveItems( records, edits );\n\t}\n\n\treturn {\n\t\t...action,\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current theme has been received.\n *\n * @param {Object} currentTheme The current theme.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentTheme( currentTheme ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_THEME',\n\t\tcurrentTheme,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current global styles id has been received.\n *\n * @param {string} currentGlobalStylesId The current global styles id.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveCurrentGlobalStylesId(\n\tcurrentGlobalStylesId\n) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_GLOBAL_STYLES_ID',\n\t\tid: currentGlobalStylesId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the theme base global styles have been received\n *\n * @param {string} stylesheet   The theme's identifier\n * @param {Object} globalStyles The global styles object.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveThemeBaseGlobalStyles(\n\tstylesheet,\n\tglobalStyles\n) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_GLOBAL_STYLES',\n\t\tstylesheet,\n\t\tglobalStyles,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the theme global styles variations have been received.\n *\n * @param {string} stylesheet The theme's identifier\n * @param {Array}  variations The global styles variations.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveThemeGlobalStyleVariations(\n\tstylesheet,\n\tvariations\n) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_GLOBAL_STYLE_VARIATIONS',\n\t\tstylesheet,\n\t\tvariations,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the index has been received.\n *\n * @deprecated since WP 5.9, this is not useful anymore, use the selector direclty.\n *\n * @return {Object} Action object.\n */\nexport function receiveThemeSupports() {\n\tdeprecated( \"wp.data.dispatch( 'core' ).receiveThemeSupports\", {\n\t\tsince: '5.9',\n\t} );\n\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the preview data for\n * a given URl has been received.\n *\n * @param {string} url     URL to preview the embed for.\n * @param {*}      preview Preview data.\n *\n * @return {Object} Action object.\n */\nexport function receiveEmbedPreview( url, preview ) {\n\treturn {\n\t\ttype: 'RECEIVE_EMBED_PREVIEW',\n\t\turl,\n\t\tpreview,\n\t};\n}\n\n/**\n * Action triggered to delete an entity record.\n *\n * @param {string}   kind                         Kind of the deleted entity.\n * @param {string}   name                         Name of the deleted entity.\n * @param {string}   recordId                     Record ID of the deleted entity.\n * @param {?Object}  query                        Special query parameters for the\n *                                                DELETE API call.\n * @param {Object}   [options]                    Delete options.\n * @param {Function} [options.__unstableFetch]    Internal use only. Function to\n *                                                call instead of `apiFetch()`.\n *                                                Must return a promise.\n * @param {boolean}  [options.throwOnError=false] If false, this action suppresses all\n *                                                the exceptions. Defaults to false.\n */\nexport const deleteEntityRecord =\n\t(\n\t\tkind,\n\t\tname,\n\t\trecordId,\n\t\tquery,\n\t\t{ __unstableFetch = apiFetch, throwOnError = false } = {}\n\t) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tlet error;\n\t\tlet deletedRecord = false;\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name, recordId ],\n\t\t\t{ exclusive: true }\n\t\t);\n\n\t\ttry {\n\t\t\tdispatch( {\n\t\t\t\ttype: 'DELETE_ENTITY_RECORD_START',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t} );\n\n\t\t\tlet hasError = false;\n\t\t\ttry {\n\t\t\t\tlet path = `${ entityConfig.baseURL }/${ recordId }`;\n\n\t\t\t\tif ( query ) {\n\t\t\t\t\tpath = addQueryArgs( path, query );\n\t\t\t\t}\n\n\t\t\t\tdeletedRecord = await __unstableFetch( {\n\t\t\t\t\tpath,\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t} );\n\n\t\t\t\tawait dispatch( removeItems( kind, name, recordId, true ) );\n\t\t\t} catch ( _error ) {\n\t\t\t\thasError = true;\n\t\t\t\terror = _error;\n\t\t\t}\n\n\t\t\tdispatch( {\n\t\t\t\ttype: 'DELETE_ENTITY_RECORD_FINISH',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t\terror,\n\t\t\t} );\n\n\t\t\tif ( hasError && throwOnError ) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn deletedRecord;\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\n/**\n * Returns an action object that triggers an\n * edit to an entity record.\n *\n * @param {string}  kind                 Kind of the edited entity record.\n * @param {string}  name                 Name of the edited entity record.\n * @param {number}  recordId             Record ID of the edited entity record.\n * @param {Object}  edits                The edits.\n * @param {Object}  options              Options for the edit.\n * @param {boolean} [options.undoIgnore] Whether to ignore the edit in undo history or not.\n *\n * @return {Object} Action object.\n */\nexport const editEntityRecord =\n\t( kind, name, recordId, edits, options = {} ) =>\n\t( { select, dispatch } ) => {\n\t\tconst entityConfig = select.getEntityConfig( kind, name );\n\t\tif ( ! entityConfig ) {\n\t\t\tthrow new Error(\n\t\t\t\t`The entity being edited (${ kind }, ${ name }) does not have a loaded config.`\n\t\t\t);\n\t\t}\n\t\tconst { transientEdits = {}, mergedEdits = {} } = entityConfig;\n\t\tconst record = select.getRawEntityRecord( kind, name, recordId );\n\t\tconst editedRecord = select.getEditedEntityRecord(\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId\n\t\t);\n\n\t\tconst edit = {\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t\t// Clear edits when they are equal to their persisted counterparts\n\t\t\t// so that the property is not considered dirty.\n\t\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\t\tconst recordValue = record[ key ];\n\t\t\t\tconst editedRecordValue = editedRecord[ key ];\n\t\t\t\tconst value = mergedEdits[ key ]\n\t\t\t\t\t? { ...editedRecordValue, ...edits[ key ] }\n\t\t\t\t\t: edits[ key ];\n\t\t\t\tacc[ key ] = isEqual( recordValue, value ) ? undefined : value;\n\t\t\t\treturn acc;\n\t\t\t}, {} ),\n\t\t\ttransientEdits,\n\t\t};\n\t\tdispatch( {\n\t\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t\t...edit,\n\t\t\tmeta: {\n\t\t\t\tundo: ! options.undoIgnore && {\n\t\t\t\t\t...edit,\n\t\t\t\t\t// Send the current values for things like the first undo stack entry.\n\t\t\t\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\t\t\t\tacc[ key ] = editedRecord[ key ];\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t},\n\t\t} );\n\t};\n\n/**\n * Action triggered to undo the last edit to\n * an entity record, if any.\n */\nexport const undo =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\tconst undoEdit = select.getUndoEdit();\n\t\tif ( ! undoEdit ) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch( {\n\t\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t\t...undoEdit,\n\t\t\tmeta: { isUndo: true },\n\t\t} );\n\t};\n\n/**\n * Action triggered to redo the last undoed\n * edit to an entity record, if any.\n */\nexport const redo =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\tconst redoEdit = select.getRedoEdit();\n\t\tif ( ! redoEdit ) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch( {\n\t\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t\t...redoEdit,\n\t\t\tmeta: { isRedo: true },\n\t\t} );\n\t};\n\n/**\n * Forces the creation of a new undo level.\n *\n * @return {Object} Action object.\n */\nexport function __unstableCreateUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Action triggered to save an entity record.\n *\n * @param {string}   kind                         Kind of the received entity.\n * @param {string}   name                         Name of the received entity.\n * @param {Object}   record                       Record to be saved.\n * @param {Object}   options                      Saving options.\n * @param {boolean}  [options.isAutosave=false]   Whether this is an autosave.\n * @param {Function} [options.__unstableFetch]    Internal use only. Function to\n *                                                call instead of `apiFetch()`.\n *                                                Must return a promise.\n * @param {boolean}  [options.throwOnError=false] If false, this action suppresses all\n *                                                the exceptions. Defaults to false.\n */\nexport const saveEntityRecord =\n\t(\n\t\tkind,\n\t\tname,\n\t\trecord,\n\t\t{\n\t\t\tisAutosave = false,\n\t\t\t__unstableFetch = apiFetch,\n\t\t\tthrowOnError = false,\n\t\t} = {}\n\t) =>\n\tasync ( { select, resolveSelect, dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\t\tconst entityIdKey = entityConfig.key || DEFAULT_ENTITY_KEY;\n\t\tconst recordId = record[ entityIdKey ];\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name, recordId || uuid() ],\n\t\t\t{ exclusive: true }\n\t\t);\n\n\t\ttry {\n\t\t\t// Evaluate optimized edits.\n\t\t\t// (Function edits that should be evaluated on save to avoid expensive computations on every edit.)\n\t\t\tfor ( const [ key, value ] of Object.entries( record ) ) {\n\t\t\t\tif ( typeof value === 'function' ) {\n\t\t\t\t\tconst evaluatedValue = value(\n\t\t\t\t\t\tselect.getEditedEntityRecord( kind, name, recordId )\n\t\t\t\t\t);\n\t\t\t\t\tdispatch.editEntityRecord(\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\trecordId,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[ key ]: evaluatedValue,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ undoIgnore: true }\n\t\t\t\t\t);\n\t\t\t\t\trecord[ key ] = evaluatedValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdispatch( {\n\t\t\t\ttype: 'SAVE_ENTITY_RECORD_START',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t\tisAutosave,\n\t\t\t} );\n\t\t\tlet updatedRecord;\n\t\t\tlet error;\n\t\t\tlet hasError = false;\n\t\t\ttry {\n\t\t\t\tconst path = `${ entityConfig.baseURL }${\n\t\t\t\t\trecordId ? '/' + recordId : ''\n\t\t\t\t}`;\n\t\t\t\tconst persistedRecord = select.getRawEntityRecord(\n\t\t\t\t\tkind,\n\t\t\t\t\tname,\n\t\t\t\t\trecordId\n\t\t\t\t);\n\n\t\t\t\tif ( isAutosave ) {\n\t\t\t\t\t// Most of this autosave logic is very specific to posts.\n\t\t\t\t\t// This is fine for now as it is the only supported autosave,\n\t\t\t\t\t// but ideally this should all be handled in the back end,\n\t\t\t\t\t// so the client just sends and receives objects.\n\t\t\t\t\tconst currentUser = select.getCurrentUser();\n\t\t\t\t\tconst currentUserId = currentUser\n\t\t\t\t\t\t? currentUser.id\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\tconst autosavePost = await resolveSelect.getAutosave(\n\t\t\t\t\t\tpersistedRecord.type,\n\t\t\t\t\t\tpersistedRecord.id,\n\t\t\t\t\t\tcurrentUserId\n\t\t\t\t\t);\n\t\t\t\t\t// Autosaves need all expected fields to be present.\n\t\t\t\t\t// So we fallback to the previous autosave and then\n\t\t\t\t\t// to the actual persisted entity if the edits don't\n\t\t\t\t\t// have a value.\n\t\t\t\t\tlet data = {\n\t\t\t\t\t\t...persistedRecord,\n\t\t\t\t\t\t...autosavePost,\n\t\t\t\t\t\t...record,\n\t\t\t\t\t};\n\t\t\t\t\tdata = Object.keys( data ).reduce(\n\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t[ 'title', 'excerpt', 'content' ].includes(\n\t\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tacc[ key ] = data[ key ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus:\n\t\t\t\t\t\t\t\tdata.status === 'auto-draft'\n\t\t\t\t\t\t\t\t\t? 'draft'\n\t\t\t\t\t\t\t\t\t: data.status,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tupdatedRecord = await __unstableFetch( {\n\t\t\t\t\t\tpath: `${ path }/autosaves`,\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tdata,\n\t\t\t\t\t} );\n\n\t\t\t\t\t// An autosave may be processed by the server as a regular save\n\t\t\t\t\t// when its update is requested by the author and the post had\n\t\t\t\t\t// draft or auto-draft status.\n\t\t\t\t\tif ( persistedRecord.id === updatedRecord.id ) {\n\t\t\t\t\t\tlet newRecord = {\n\t\t\t\t\t\t\t...persistedRecord,\n\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t...updatedRecord,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tnewRecord = Object.keys( newRecord ).reduce(\n\t\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\t\t// These properties are persisted in autosaves.\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t[ 'title', 'excerpt', 'content' ].includes(\n\t\t\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tacc[ key ] = newRecord[ key ];\n\t\t\t\t\t\t\t\t} else if ( key === 'status' ) {\n\t\t\t\t\t\t\t\t\t// Status is only persisted in autosaves when going from\n\t\t\t\t\t\t\t\t\t// \"auto-draft\" to \"draft\".\n\t\t\t\t\t\t\t\t\tacc[ key ] =\n\t\t\t\t\t\t\t\t\t\tpersistedRecord.status ===\n\t\t\t\t\t\t\t\t\t\t\t'auto-draft' &&\n\t\t\t\t\t\t\t\t\t\tnewRecord.status === 'draft'\n\t\t\t\t\t\t\t\t\t\t\t? newRecord.status\n\t\t\t\t\t\t\t\t\t\t\t: persistedRecord.status;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// These properties are not persisted in autosaves.\n\t\t\t\t\t\t\t\t\tacc[ key ] = persistedRecord[ key ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch.receiveAutosaves(\n\t\t\t\t\t\t\tpersistedRecord.id,\n\t\t\t\t\t\t\tupdatedRecord\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet edits = record;\n\t\t\t\t\tif ( entityConfig.__unstablePrePersist ) {\n\t\t\t\t\t\tedits = {\n\t\t\t\t\t\t\t...edits,\n\t\t\t\t\t\t\t...entityConfig.__unstablePrePersist(\n\t\t\t\t\t\t\t\tpersistedRecord,\n\t\t\t\t\t\t\t\tedits\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tupdatedRecord = await __unstableFetch( {\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tmethod: recordId ? 'PUT' : 'POST',\n\t\t\t\t\t\tdata: edits,\n\t\t\t\t\t} );\n\t\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tupdatedRecord,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tedits\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch ( _error ) {\n\t\t\t\thasError = true;\n\t\t\t\terror = _error;\n\t\t\t}\n\t\t\tdispatch( {\n\t\t\t\ttype: 'SAVE_ENTITY_RECORD_FINISH',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t\terror,\n\t\t\t\tisAutosave,\n\t\t\t} );\n\n\t\t\tif ( hasError && throwOnError ) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn updatedRecord;\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\n/**\n * Runs multiple core-data actions at the same time using one API request.\n *\n * Example:\n *\n * ```\n * const [ savedRecord, updatedRecord, deletedRecord ] =\n *   await dispatch( 'core' ).__experimentalBatch( [\n *     ( { saveEntityRecord } ) => saveEntityRecord( 'root', 'widget', widget ),\n *     ( { saveEditedEntityRecord } ) => saveEntityRecord( 'root', 'widget', 123 ),\n *     ( { deleteEntityRecord } ) => deleteEntityRecord( 'root', 'widget', 123, null ),\n *   ] );\n * ```\n *\n * @param {Array} requests Array of functions which are invoked simultaneously.\n *                         Each function is passed an object containing\n *                         `saveEntityRecord`, `saveEditedEntityRecord`, and\n *                         `deleteEntityRecord`.\n *\n * @return {(thunkArgs: Object) => Promise} A promise that resolves to an array containing the return\n *                                          values of each function given in `requests`.\n */\nexport const __experimentalBatch =\n\t( requests ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst batch = createBatch();\n\t\tconst api = {\n\t\t\tsaveEntityRecord( kind, name, record, options ) {\n\t\t\t\treturn batch.add( ( add ) =>\n\t\t\t\t\tdispatch.saveEntityRecord( kind, name, record, {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t},\n\t\t\tsaveEditedEntityRecord( kind, name, recordId, options ) {\n\t\t\t\treturn batch.add( ( add ) =>\n\t\t\t\t\tdispatch.saveEditedEntityRecord( kind, name, recordId, {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t},\n\t\t\tdeleteEntityRecord( kind, name, recordId, query, options ) {\n\t\t\t\treturn batch.add( ( add ) =>\n\t\t\t\t\tdispatch.deleteEntityRecord( kind, name, recordId, query, {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tconst resultPromises = requests.map( ( request ) => request( api ) );\n\t\tconst [ , ...results ] = await Promise.all( [\n\t\t\tbatch.run(),\n\t\t\t...resultPromises,\n\t\t] );\n\t\treturn results;\n\t};\n\n/**\n * Action triggered to save an entity record's edits.\n *\n * @param {string} kind     Kind of the entity.\n * @param {string} name     Name of the entity.\n * @param {Object} recordId ID of the record.\n * @param {Object} options  Saving options.\n */\nexport const saveEditedEntityRecord =\n\t( kind, name, recordId, options ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tif ( ! select.hasEditsForEntityRecord( kind, name, recordId ) ) {\n\t\t\treturn;\n\t\t}\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tif ( ! entityConfig ) {\n\t\t\treturn;\n\t\t}\n\t\tconst entityIdKey = entityConfig.key || DEFAULT_ENTITY_KEY;\n\n\t\tconst edits = select.getEntityRecordNonTransientEdits(\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId\n\t\t);\n\t\tconst record = { [ entityIdKey ]: recordId, ...edits };\n\t\treturn await dispatch.saveEntityRecord( kind, name, record, options );\n\t};\n\n/**\n * Action triggered to save only specified properties for the entity.\n *\n * @param {string} kind        Kind of the entity.\n * @param {string} name        Name of the entity.\n * @param {Object} recordId    ID of the record.\n * @param {Array}  itemsToSave List of entity properties to save.\n * @param {Object} options     Saving options.\n */\nexport const __experimentalSaveSpecifiedEntityEdits =\n\t( kind, name, recordId, itemsToSave, options ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tif ( ! select.hasEditsForEntityRecord( kind, name, recordId ) ) {\n\t\t\treturn;\n\t\t}\n\t\tconst edits = select.getEntityRecordNonTransientEdits(\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId\n\t\t);\n\t\tconst editsToSave = {};\n\t\tfor ( const edit in edits ) {\n\t\t\tif ( itemsToSave.some( ( item ) => item === edit ) ) {\n\t\t\t\teditsToSave[ edit ] = edits[ edit ];\n\t\t\t}\n\t\t}\n\t\treturn await dispatch.saveEntityRecord(\n\t\t\tkind,\n\t\t\tname,\n\t\t\teditsToSave,\n\t\t\toptions\n\t\t);\n\t};\n\n/**\n * Returns an action object used in signalling that Upload permissions have been received.\n *\n * @deprecated since WP 5.9, use receiveUserPermission instead.\n *\n * @param {boolean} hasUploadPermissions Does the user have permission to upload files?\n *\n * @return {Object} Action object.\n */\nexport function receiveUploadPermissions( hasUploadPermissions ) {\n\tdeprecated( \"wp.data.dispatch( 'core' ).receiveUploadPermissions\", {\n\t\tsince: '5.9',\n\t\talternative: 'receiveUserPermission',\n\t} );\n\n\treturn receiveUserPermission( 'create/media', hasUploadPermissions );\n}\n\n/**\n * Returns an action object used in signalling that the current user has\n * permission to perform an action on a REST resource.\n *\n * @param {string}  key       A key that represents the action and REST resource.\n * @param {boolean} isAllowed Whether or not the user can perform the action.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserPermission( key, isAllowed ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey,\n\t\tisAllowed,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the autosaves for a\n * post have been received.\n *\n * @param {number}       postId    The id of the post that is parent to the autosave.\n * @param {Array|Object} autosaves An array of autosaves or singular autosave object.\n *\n * @return {Object} Action object.\n */\nexport function receiveAutosaves( postId, autosaves ) {\n\treturn {\n\t\ttype: 'RECEIVE_AUTOSAVES',\n\t\tpostId,\n\t\tautosaves: castArray( autosaves ),\n\t};\n}\n","/**\n * External dependencies\n */\nimport { upperFirst, camelCase, map, find, get, startCase } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { addEntities } from './actions';\nimport type * as Records from './entity-types';\nimport type {\n\tEntityType,\n\tContext,\n\tPost,\n\tTaxonomy,\n\tType,\n\tUpdatable,\n} from './entity-types';\n\nexport const DEFAULT_ENTITY_KEY = 'id';\n\nconst POST_RAW_ATTRIBUTES = [ 'title', 'excerpt', 'content' ];\n\ntype AttachmentEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'media';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Attachment< C >,\n\tC\n>;\n\nconst attachmentConfig: AttachmentEntity[ 'config' ] = {\n\tname: 'media',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/media',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'mediaItems',\n\tlabel: __( 'Media' ),\n\trawAttributes: [ 'caption', 'title', 'description' ],\n};\n\ntype SiteEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'site';\n\t\tkind: 'root';\n\t},\n\tRecords.Settings< C >,\n\tC\n>;\n\nconst siteConfig: SiteEntity[ 'config' ] = {\n\tlabel: __( 'Site' ),\n\tname: 'site',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/settings',\n\tgetTitle: ( record: Records.Settings< 'edit' > ) => {\n\t\treturn get( record, [ 'title' ], __( 'Site Title' ) );\n\t},\n};\n\ntype PostTypeEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'postType';\n\t\tkind: 'root';\n\t\tkey: 'slug';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Type< C >,\n\tC\n>;\n\nconst postTypeConfig: PostTypeEntity[ 'config' ] = {\n\tlabel: __( 'Post Type' ),\n\tname: 'postType',\n\tkind: 'root',\n\tkey: 'slug',\n\tbaseURL: '/wp/v2/types',\n\tbaseURLParams: { context: 'edit' },\n};\n\ntype TaxonomyEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'taxonomy';\n\t\tkind: 'root';\n\t\tkey: 'slug';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Taxonomy< C >,\n\tC\n>;\n\nconst taxonomyConfig: TaxonomyEntity[ 'config' ] = {\n\tname: 'taxonomy',\n\tkind: 'root',\n\tkey: 'slug',\n\tbaseURL: '/wp/v2/taxonomies',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'taxonomies',\n\tlabel: __( 'Taxonomy' ),\n};\n\ntype SidebarEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'sidebar';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Sidebar< C >,\n\tC\n>;\n\nconst sidebarConfig: SidebarEntity[ 'config' ] = {\n\tname: 'sidebar',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/sidebars',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'sidebars',\n\ttransientEdits: { blocks: true },\n\tlabel: __( 'Widget areas' ),\n};\n\ntype WidgetEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'widget';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Widget< C >,\n\tC\n>;\nconst widgetConfig: WidgetEntity[ 'config' ] = {\n\tname: 'widget',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/widgets',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'widgets',\n\ttransientEdits: { blocks: true },\n\tlabel: __( 'Widgets' ),\n};\n\ntype WidgetTypeEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'widgetType';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.WidgetType< C >,\n\tC\n>;\nconst widgetTypeConfig: WidgetTypeEntity[ 'config' ] = {\n\tname: 'widgetType',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/widget-types',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'widgetTypes',\n\tlabel: __( 'Widget types' ),\n};\n\ntype UserEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'user';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.User< C >,\n\tC\n>;\nconst userConfig: UserEntity[ 'config' ] = {\n\tlabel: __( 'User' ),\n\tname: 'user',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/users',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'users',\n};\n\ntype CommentEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'comment';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Comment< C >,\n\tC\n>;\nconst commentConfig: CommentEntity[ 'config' ] = {\n\tname: 'comment',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/comments',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'comments',\n\tlabel: __( 'Comment' ),\n};\n\ntype NavMenuEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'menu';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.NavMenu< C >,\n\tC\n>;\n\nconst menuConfig: NavMenuEntity[ 'config' ] = {\n\tname: 'menu',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/menus',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'menus',\n\tlabel: __( 'Menu' ),\n};\n\ntype NavMenuItemEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'menuItem';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.NavMenuItem< C >,\n\tC\n>;\n\nconst menuItemConfig: NavMenuItemEntity[ 'config' ] = {\n\tname: 'menuItem',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/menu-items',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'menuItems',\n\tlabel: __( 'Menu Item' ),\n\trawAttributes: [ 'title' ],\n};\n\ntype MenuLocationEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'menuLocation';\n\t\tkind: 'root';\n\t\tkey: 'name';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.MenuLocation< C >,\n\tC\n>;\n\nconst menuLocationConfig: MenuLocationEntity[ 'config' ] = {\n\tname: 'menuLocation',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/menu-locations',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'menuLocations',\n\tlabel: __( 'Menu Location' ),\n\tkey: 'name',\n};\n\nconst globalStyleConfig = {\n\tlabel: __( 'Global Styles' ),\n\tname: 'globalStyles',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/global-styles',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'globalStylesVariations', // Should be different than name.\n\tgetTitle: ( record ) => record?.title?.rendered || record?.title,\n};\n\ntype ThemeEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'theme';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t\tkey: 'stylesheet';\n\t},\n\tRecords.Theme< C >,\n\tC\n>;\n\nconst themeConfig: ThemeEntity[ 'config' ] = {\n\tlabel: __( 'Themes' ),\n\tname: 'theme',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/themes',\n\tbaseURLParams: { context: 'edit' },\n\tkey: 'stylesheet',\n};\n\ntype PluginEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'plugin';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t\tkey: 'plugin';\n\t},\n\tRecords.Plugin< C >,\n\tC\n>;\nconst pluginConfig: PluginEntity[ 'config' ] = {\n\tlabel: __( 'Plugins' ),\n\tname: 'plugin',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/plugins',\n\tbaseURLParams: { context: 'edit' },\n\tkey: 'plugin',\n};\n\nexport const rootEntitiesConfig = [\n\t{\n\t\tlabel: __( 'Base' ),\n\t\tkind: 'root',\n\t\tname: '__unstableBase',\n\t\tbaseURL: '/',\n\t\tbaseURLParams: {\n\t\t\t_fields: [\n\t\t\t\t'description',\n\t\t\t\t'gmt_offset',\n\t\t\t\t'home',\n\t\t\t\t'name',\n\t\t\t\t'site_icon',\n\t\t\t\t'site_icon_url',\n\t\t\t\t'site_logo',\n\t\t\t\t'timezone_string',\n\t\t\t\t'url',\n\t\t\t].join( ',' ),\n\t\t},\n\t},\n\tsiteConfig,\n\tpostTypeConfig,\n\tattachmentConfig,\n\ttaxonomyConfig,\n\tsidebarConfig,\n\twidgetConfig,\n\twidgetTypeConfig,\n\tuserConfig,\n\tcommentConfig,\n\tmenuConfig,\n\tmenuItemConfig,\n\tmenuLocationConfig,\n\tglobalStyleConfig,\n\tthemeConfig,\n\tpluginConfig,\n];\n\ntype PostTypeConfig = {\n\tkind: 'postType';\n\tkey: 'id';\n\tdefaultContext: 'edit';\n};\n\ntype PostEntity< C extends Context = Context > = EntityType<\n\tPostTypeConfig & { name: 'post' },\n\tRecords.Post< C >,\n\tC\n>;\ntype PageEntity< C extends Context > = EntityType<\n\tPostTypeConfig & { name: 'page' },\n\tRecords.Page< C >,\n\tC\n>;\ntype WpTemplateEntity< C extends Context > = EntityType<\n\tPostTypeConfig & { name: 'wp_template' },\n\tRecords.WpTemplate< C >,\n\tC\n>;\ntype WpTemplatePartEntity< C extends Context > = EntityType<\n\tPostTypeConfig & { name: 'wp_template_part' },\n\tRecords.WpTemplatePart< C >,\n\tC\n>;\n\nexport type CoreEntities< C extends Context > =\n\t| SiteEntity< C >\n\t| PostTypeEntity< C >\n\t| AttachmentEntity< C >\n\t| TaxonomyEntity< C >\n\t| SidebarEntity< C >\n\t| WidgetEntity< C >\n\t| WidgetTypeEntity< C >\n\t| UserEntity< C >\n\t| CommentEntity< C >\n\t| NavMenuEntity< C >\n\t| NavMenuItemEntity< C >\n\t| MenuLocationEntity< C >\n\t| ThemeEntity< C >\n\t| PluginEntity< C >\n\t| PostEntity< C >\n\t| PageEntity< C >\n\t| WpTemplateEntity< C >\n\t| WpTemplatePartEntity< C >;\n\nexport const additionalEntityConfigLoaders = [\n\t{ kind: 'postType', loadEntities: loadPostTypeEntities },\n\t{ kind: 'taxonomy', loadEntities: loadTaxonomyEntities },\n];\n\n/**\n * Returns a function to be used to retrieve extra edits to apply before persisting a post type.\n *\n * @param {Object} persistedRecord Already persisted Post\n * @param {Object} edits           Edits.\n * @return {Object} Updated edits.\n */\nexport const prePersistPostType = ( persistedRecord, edits ) => {\n\tconst newEdits = {} as Partial< Updatable< Post< 'edit' > > >;\n\n\tif ( persistedRecord?.status === 'auto-draft' ) {\n\t\t// Saving an auto-draft should create a draft by default.\n\t\tif ( ! edits.status && ! newEdits.status ) {\n\t\t\tnewEdits.status = 'draft';\n\t\t}\n\n\t\t// Fix the auto-draft default title.\n\t\tif (\n\t\t\t( ! edits.title || edits.title === 'Auto Draft' ) &&\n\t\t\t! newEdits.title &&\n\t\t\t( ! persistedRecord?.title ||\n\t\t\t\tpersistedRecord?.title === 'Auto Draft' )\n\t\t) {\n\t\t\tnewEdits.title = '';\n\t\t}\n\t}\n\n\treturn newEdits;\n};\n\n/**\n * Returns the list of post type entities.\n *\n * @return {Promise} Entities promise\n */\nasync function loadPostTypeEntities() {\n\tconst postTypes = ( await apiFetch( {\n\t\tpath: '/wp/v2/types?context=view',\n\t} ) ) as Record< string, Type< 'view' > >;\n\treturn map( postTypes, ( postType, name ) => {\n\t\tconst isTemplate = [ 'wp_template', 'wp_template_part' ].includes(\n\t\t\tname\n\t\t);\n\t\tconst namespace = postType?.rest_namespace ?? 'wp/v2';\n\t\treturn {\n\t\t\tkind: 'postType',\n\t\t\tbaseURL: `/${ namespace }/${ postType.rest_base }`,\n\t\t\tbaseURLParams: { context: 'edit' },\n\t\t\tname,\n\t\t\tlabel: postType.name,\n\t\t\ttransientEdits: {\n\t\t\t\tblocks: true,\n\t\t\t\tselection: true,\n\t\t\t},\n\t\t\tmergedEdits: { meta: true },\n\t\t\trawAttributes: POST_RAW_ATTRIBUTES,\n\t\t\tgetTitle: ( record ) =>\n\t\t\t\trecord?.title?.rendered ||\n\t\t\t\trecord?.title ||\n\t\t\t\t( isTemplate ? startCase( record.slug ) : String( record.id ) ),\n\t\t\t__unstablePrePersist: isTemplate ? undefined : prePersistPostType,\n\t\t\t__unstable_rest_base: postType.rest_base,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the list of the taxonomies entities.\n *\n * @return {Promise} Entities promise\n */\nasync function loadTaxonomyEntities() {\n\tconst taxonomies = ( await apiFetch( {\n\t\tpath: '/wp/v2/taxonomies?context=view',\n\t} ) ) as Record< string, Taxonomy< 'view' > >;\n\treturn map( taxonomies, ( taxonomy, name ) => {\n\t\tconst namespace = taxonomy?.rest_namespace ?? 'wp/v2';\n\t\treturn {\n\t\t\tkind: 'taxonomy',\n\t\t\tbaseURL: `/${ namespace }/${ taxonomy.rest_base }`,\n\t\t\tbaseURLParams: { context: 'edit' },\n\t\t\tname,\n\t\t\tlabel: taxonomy.name,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the entity's getter method name given its kind and name.\n *\n * @example\n * ```js\n * const nameSingular = getMethodName( 'root', 'theme', 'get' );\n * // nameSingular is getRootTheme\n *\n * const namePlural = getMethodName( 'root', 'theme', 'set' );\n * // namePlural is setRootThemes\n * ```\n *\n * @param {string}  kind      Entity kind.\n * @param {string}  name      Entity name.\n * @param {string}  prefix    Function prefix.\n * @param {boolean} usePlural Whether to use the plural form or not.\n *\n * @return {string} Method name\n */\nexport const getMethodName = (\n\tkind,\n\tname,\n\tprefix = 'get',\n\tusePlural = false\n) => {\n\tconst entityConfig = find( rootEntitiesConfig, { kind, name } );\n\tconst kindPrefix = kind === 'root' ? '' : upperFirst( camelCase( kind ) );\n\tconst nameSuffix =\n\t\tupperFirst( camelCase( name ) ) + ( usePlural ? 's' : '' );\n\tconst suffix =\n\t\tusePlural && 'plural' in entityConfig! && entityConfig?.plural\n\t\t\t? upperFirst( camelCase( entityConfig.plural ) )\n\t\t\t: nameSuffix;\n\treturn `${ prefix }${ kindPrefix }${ suffix }`;\n};\n\n/**\n * Loads the kind entities into the store.\n *\n * @param {string} kind Kind\n *\n * @return {(thunkArgs: object) => Promise<Array>} Entities\n */\nexport const getOrLoadEntitiesConfig =\n\t( kind ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tlet configs = select.getEntitiesConfig( kind );\n\t\tif ( configs && configs.length !== 0 ) {\n\t\t\treturn configs;\n\t\t}\n\n\t\tconst loader = find( additionalEntityConfigLoaders, { kind } );\n\t\tif ( ! loader ) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconfigs = await loader.loadEntities();\n\t\tdispatch( addEntities( configs ) );\n\n\t\treturn configs;\n\t};\n","/**\n * Given a value which can be specified as one or the other of a comma-separated\n * string or an array, returns a value normalized to an array of strings, or\n * null if the value cannot be interpreted as either.\n *\n * @param {string|string[]|*} value\n *\n * @return {?(string[])} Normalized field value.\n */\nfunction getNormalizedCommaSeparable( value ) {\n\tif ( typeof value === 'string' ) {\n\t\treturn value.split( ',' );\n\t} else if ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\n\treturn null;\n}\n\nexport default getNormalizedCommaSeparable;\n","/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport { withWeakMapCache, getNormalizedCommaSeparable } from '../utils';\n\n/**\n * An object of properties describing a specific query.\n *\n * @typedef {Object} WPQueriedDataQueryParts\n *\n * @property {number}      page      The query page (1-based index, default 1).\n * @property {number}      perPage   Items per page for query (default 10).\n * @property {string}      stableKey An encoded stable string of all non-\n *                                   pagination, non-fields query parameters.\n * @property {?(string[])} fields    Target subset of fields to derive from\n *                                   item objects.\n * @property {?(number[])} include   Specific item IDs to include.\n * @property {string}      context   Scope under which the request is made;\n *                                   determines returned fields in response.\n */\n\n/**\n * Given a query object, returns an object of parts, including pagination\n * details (`page` and `perPage`, or default values). All other properties are\n * encoded into a stable (idempotent) `stableKey` value.\n *\n * @param {Object} query Optional query object.\n *\n * @return {WPQueriedDataQueryParts} Query parts.\n */\nexport function getQueryParts( query ) {\n\t/**\n\t * @type {WPQueriedDataQueryParts}\n\t */\n\tconst parts = {\n\t\tstableKey: '',\n\t\tpage: 1,\n\t\tperPage: 10,\n\t\tfields: null,\n\t\tinclude: null,\n\t\tcontext: 'default',\n\t};\n\n\t// Ensure stable key by sorting keys. Also more efficient for iterating.\n\tconst keys = Object.keys( query ).sort();\n\n\tfor ( let i = 0; i < keys.length; i++ ) {\n\t\tconst key = keys[ i ];\n\t\tlet value = query[ key ];\n\n\t\tswitch ( key ) {\n\t\t\tcase 'page':\n\t\t\t\tparts[ key ] = Number( value );\n\t\t\t\tbreak;\n\n\t\t\tcase 'per_page':\n\t\t\t\tparts.perPage = Number( value );\n\t\t\t\tbreak;\n\n\t\t\tcase 'context':\n\t\t\t\tparts.context = value;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// While in theory, we could exclude \"_fields\" from the stableKey\n\t\t\t\t// because two request with different fields have the same results\n\t\t\t\t// We're not able to ensure that because the server can decide to omit\n\t\t\t\t// fields from the response even if we explicitly asked for it.\n\t\t\t\t// Example: Asking for titles in posts without title support.\n\t\t\t\tif ( key === '_fields' ) {\n\t\t\t\t\tparts.fields = getNormalizedCommaSeparable( value ) ?? [];\n\t\t\t\t\t// Make sure to normalize value for `stableKey`\n\t\t\t\t\tvalue = parts.fields.join();\n\t\t\t\t}\n\n\t\t\t\t// Two requests with different include values cannot have same results.\n\t\t\t\tif ( key === 'include' ) {\n\t\t\t\t\tif ( typeof value === 'number' ) {\n\t\t\t\t\t\tvalue = value.toString();\n\t\t\t\t\t}\n\t\t\t\t\tparts.include = (\n\t\t\t\t\t\tgetNormalizedCommaSeparable( value ) ?? []\n\t\t\t\t\t).map( Number );\n\t\t\t\t\t// Normalize value for `stableKey`.\n\t\t\t\t\tvalue = parts.include.join();\n\t\t\t\t}\n\n\t\t\t\t// While it could be any deterministic string, for simplicity's\n\t\t\t\t// sake mimic querystring encoding for stable key.\n\t\t\t\t//\n\t\t\t\t// TODO: For consistency with PHP implementation, addQueryArgs\n\t\t\t\t// should accept a key value pair, which may optimize its\n\t\t\t\t// implementation for our use here, vs. iterating an object\n\t\t\t\t// with only a single key.\n\t\t\t\tparts.stableKey +=\n\t\t\t\t\t( parts.stableKey ? '&' : '' ) +\n\t\t\t\t\taddQueryArgs( '', { [ key ]: value } ).slice( 1 );\n\t\t}\n\t}\n\n\treturn parts;\n}\n\nexport default withWeakMapCache( getQueryParts );\n","/**\n * Given a function, returns an enhanced function which caches the result and\n * tracks in WeakMap. The result is only cached if the original function is\n * passed a valid object-like argument (requirement for WeakMap key).\n *\n * @param {Function} fn Original function.\n *\n * @return {Function} Enhanced caching function.\n */\nfunction withWeakMapCache( fn ) {\n\tconst cache = new WeakMap();\n\n\treturn ( key ) => {\n\t\tlet value;\n\t\tif ( cache.has( key ) ) {\n\t\t\tvalue = cache.get( key );\n\t\t} else {\n\t\t\tvalue = fn( key );\n\n\t\t\t// Can reach here if key is not valid for WeakMap, since `has`\n\t\t\t// will return false for invalid key. Since `set` will throw,\n\t\t\t// ensure that key is valid before setting into cache.\n\t\t\tif ( key !== null && typeof key === 'object' ) {\n\t\t\t\tcache.set( key, value );\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t};\n}\n\nexport default withWeakMapCache;\n","/**\n * External dependencies\n */\nimport { map, flowRight, omit, filter, mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tconservativeMapItem,\n\tifMatchingAction,\n\treplaceAction,\n\tonSubKey,\n} from '../utils';\nimport { DEFAULT_ENTITY_KEY } from '../entities';\nimport getQueryParts from './get-query-parts';\n\nfunction getContextFromAction( action ) {\n\tconst { query } = action;\n\tif ( ! query ) {\n\t\treturn 'default';\n\t}\n\n\tconst queryParts = getQueryParts( query );\n\treturn queryParts.context;\n}\n\n/**\n * Returns a merged array of item IDs, given details of the received paginated\n * items. The array is sparse-like with `undefined` entries where holes exist.\n *\n * @param {?Array<number>} itemIds     Original item IDs (default empty array).\n * @param {number[]}       nextItemIds Item IDs to merge.\n * @param {number}         page        Page of items merged.\n * @param {number}         perPage     Number of items per page.\n *\n * @return {number[]} Merged array of item IDs.\n */\nexport function getMergedItemIds( itemIds, nextItemIds, page, perPage ) {\n\tconst receivedAllIds = page === 1 && perPage === -1;\n\tif ( receivedAllIds ) {\n\t\treturn nextItemIds;\n\t}\n\tconst nextItemIdsStartIndex = ( page - 1 ) * perPage;\n\n\t// If later page has already been received, default to the larger known\n\t// size of the existing array, else calculate as extending the existing.\n\tconst size = Math.max(\n\t\titemIds?.length ?? 0,\n\t\tnextItemIdsStartIndex + nextItemIds.length\n\t);\n\n\t// Preallocate array since size is known.\n\tconst mergedItemIds = new Array( size );\n\n\tfor ( let i = 0; i < size; i++ ) {\n\t\t// Preserve existing item ID except for subset of range of next items.\n\t\tconst isInNextItemsRange =\n\t\t\ti >= nextItemIdsStartIndex &&\n\t\t\ti < nextItemIdsStartIndex + nextItemIds.length;\n\n\t\tmergedItemIds[ i ] = isInNextItemsRange\n\t\t\t? nextItemIds[ i - nextItemIdsStartIndex ]\n\t\t\t: itemIds?.[ i ];\n\t}\n\n\treturn mergedItemIds;\n}\n\n/**\n * Reducer tracking items state, keyed by ID. Items are assumed to be normal,\n * where identifiers are common across all queries.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nexport function items( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS': {\n\t\t\tconst context = getContextFromAction( action );\n\t\t\tconst key = action.key || DEFAULT_ENTITY_KEY;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ context ]: {\n\t\t\t\t\t...state[ context ],\n\t\t\t\t\t...action.items.reduce( ( accumulator, value ) => {\n\t\t\t\t\t\tconst itemId = value[ key ];\n\t\t\t\t\t\taccumulator[ itemId ] = conservativeMapItem(\n\t\t\t\t\t\t\tstate?.[ context ]?.[ itemId ],\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'REMOVE_ITEMS':\n\t\t\treturn mapValues( state, ( contextState ) =>\n\t\t\t\tomit( contextState, action.itemIds )\n\t\t\t);\n\t}\n\treturn state;\n}\n\n/**\n * Reducer tracking item completeness, keyed by ID. A complete item is one for\n * which all fields are known. This is used in supporting `_fields` queries,\n * where not all properties associated with an entity are necessarily returned.\n * In such cases, completeness is used as an indication of whether it would be\n * safe to use queried data for a non-`_fields`-limited request.\n *\n * @param {Object<string,Object<string,boolean>>} state  Current state.\n * @param {Object}                                action Dispatched action.\n *\n * @return {Object<string,Object<string,boolean>>} Next state.\n */\nexport function itemIsComplete( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS': {\n\t\t\tconst context = getContextFromAction( action );\n\t\t\tconst { query, key = DEFAULT_ENTITY_KEY } = action;\n\n\t\t\t// An item is considered complete if it is received without an associated\n\t\t\t// fields query. Ideally, this would be implemented in such a way where the\n\t\t\t// complete aggregate of all fields would satisfy completeness. Since the\n\t\t\t// fields are not consistent across all entities, this would require\n\t\t\t// introspection on the REST schema for each entity to know which fields\n\t\t\t// compose a complete item for that entity.\n\t\t\tconst queryParts = query ? getQueryParts( query ) : {};\n\t\t\tconst isCompleteQuery =\n\t\t\t\t! query || ! Array.isArray( queryParts.fields );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ context ]: {\n\t\t\t\t\t...state[ context ],\n\t\t\t\t\t...action.items.reduce( ( result, item ) => {\n\t\t\t\t\t\tconst itemId = item[ key ];\n\n\t\t\t\t\t\t// Defer to completeness if already assigned. Technically the\n\t\t\t\t\t\t// data may be outdated if receiving items for a field subset.\n\t\t\t\t\t\tresult[ itemId ] =\n\t\t\t\t\t\t\tstate?.[ context ]?.[ itemId ] || isCompleteQuery;\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'REMOVE_ITEMS':\n\t\t\treturn mapValues( state, ( contextState ) =>\n\t\t\t\tomit( contextState, action.itemIds )\n\t\t\t);\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer tracking queries state, keyed by stable query key. Each reducer\n * query object includes `itemIds` and `requestingPageByPerPage`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst receiveQueries = flowRight( [\n\t// Limit to matching action type so we don't attempt to replace action on\n\t// an unhandled action.\n\tifMatchingAction( ( action ) => 'query' in action ),\n\n\t// Inject query parts into action for use both in `onSubKey` and reducer.\n\treplaceAction( ( action ) => {\n\t\t// `ifMatchingAction` still passes on initialization, where state is\n\t\t// undefined and a query is not assigned. Avoid attempting to parse\n\t\t// parts. `onSubKey` will omit by lack of `stableKey`.\n\t\tif ( action.query ) {\n\t\t\treturn {\n\t\t\t\t...action,\n\t\t\t\t...getQueryParts( action.query ),\n\t\t\t};\n\t\t}\n\n\t\treturn action;\n\t} ),\n\n\tonSubKey( 'context' ),\n\n\t// Queries shape is shared, but keyed by query `stableKey` part. Original\n\t// reducer tracks only a single query object.\n\tonSubKey( 'stableKey' ),\n] )( ( state = null, action ) => {\n\tconst { type, page, perPage, key = DEFAULT_ENTITY_KEY } = action;\n\n\tif ( type !== 'RECEIVE_ITEMS' ) {\n\t\treturn state;\n\t}\n\n\treturn getMergedItemIds(\n\t\tstate || [],\n\t\tmap( action.items, key ),\n\t\tpage,\n\t\tperPage\n\t);\n} );\n\n/**\n * Reducer tracking queries state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst queries = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS':\n\t\t\treturn receiveQueries( state, action );\n\t\tcase 'REMOVE_ITEMS':\n\t\t\tconst removedItems = action.itemIds.reduce( ( result, itemId ) => {\n\t\t\t\tresult[ itemId ] = true;\n\t\t\t\treturn result;\n\t\t\t}, {} );\n\n\t\t\treturn mapValues( state, ( contextQueries ) => {\n\t\t\t\treturn mapValues( contextQueries, ( queryItems ) => {\n\t\t\t\t\treturn filter( queryItems, ( queryId ) => {\n\t\t\t\t\t\treturn ! removedItems[ queryId ];\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} );\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default combineReducers( {\n\titems,\n\titemIsComplete,\n\tqueries,\n} );\n","/**\n * External dependencies\n */\nimport { keyBy, map, groupBy, flowRight, isEqual, get } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport { ifMatchingAction, replaceAction } from './utils';\nimport { reducer as queriedDataReducer } from './queried-data';\nimport { rootEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\n\n/** @typedef {import('./types').AnyFunction} AnyFunction */\n\n/**\n * Reducer managing terms state. Keyed by taxonomy slug, the value is either\n * undefined (if no request has been made for given taxonomy), null (if a\n * request is in-flight for given taxonomy), or the array of terms for the\n * taxonomy.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function terms( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_TERMS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.taxonomy ]: action.terms,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing authors state. Keyed by id.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function users( state = { byId: {}, queries: {} }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_USER_QUERY':\n\t\t\treturn {\n\t\t\t\tbyId: {\n\t\t\t\t\t...state.byId,\n\t\t\t\t\t...keyBy( action.users, 'id' ),\n\t\t\t\t},\n\t\t\t\tqueries: {\n\t\t\t\t\t...state.queries,\n\t\t\t\t\t[ action.queryID ]: map(\n\t\t\t\t\t\taction.users,\n\t\t\t\t\t\t( user ) => user.id\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing current user state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function currentUser( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_USER':\n\t\t\treturn action.currentUser;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing taxonomies.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function taxonomies( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_TAXONOMIES':\n\t\t\treturn action.taxonomies;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the current theme.\n *\n * @param {string|undefined} state  Current state.\n * @param {Object}           action Dispatched action.\n *\n * @return {string|undefined} Updated state.\n */\nexport function currentTheme( state = undefined, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_THEME':\n\t\t\treturn action.currentTheme.stylesheet;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the current global styles id.\n *\n * @param {string|undefined} state  Current state.\n * @param {Object}           action Dispatched action.\n *\n * @return {string|undefined} Updated state.\n */\nexport function currentGlobalStylesId( state = undefined, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_GLOBAL_STYLES_ID':\n\t\t\treturn action.id;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the theme base global styles.\n *\n * @param {Record<string, object>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Record<string, object>} Updated state.\n */\nexport function themeBaseGlobalStyles( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_THEME_GLOBAL_STYLES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.stylesheet ]: action.globalStyles,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the theme global styles variations.\n *\n * @param {Record<string, object>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Record<string, object>} Updated state.\n */\nexport function themeGlobalStyleVariations( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_THEME_GLOBAL_STYLE_VARIATIONS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.stylesheet ]: action.variations,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Higher Order Reducer for a given entity config. It supports:\n *\n *  - Fetching\n *  - Editing\n *  - Saving\n *\n * @param {Object} entityConfig Entity config.\n *\n * @return {AnyFunction} Reducer.\n */\nfunction entity( entityConfig ) {\n\treturn flowRight( [\n\t\t// Limit to matching action type so we don't attempt to replace action on\n\t\t// an unhandled action.\n\t\tifMatchingAction(\n\t\t\t( action ) =>\n\t\t\t\taction.name &&\n\t\t\t\taction.kind &&\n\t\t\t\taction.name === entityConfig.name &&\n\t\t\t\taction.kind === entityConfig.kind\n\t\t),\n\n\t\t// Inject the entity config into the action.\n\t\treplaceAction( ( action ) => {\n\t\t\treturn {\n\t\t\t\t...action,\n\t\t\t\tkey: entityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t};\n\t\t} ),\n\t] )(\n\t\tcombineReducers( {\n\t\t\tqueriedData: queriedDataReducer,\n\n\t\t\tedits: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'RECEIVE_ITEMS':\n\t\t\t\t\t\tconst context = action?.query?.context ?? 'default';\n\t\t\t\t\t\tif ( context !== 'default' ) {\n\t\t\t\t\t\t\treturn state;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst nextState = { ...state };\n\n\t\t\t\t\t\tfor ( const record of action.items ) {\n\t\t\t\t\t\t\tconst recordId = record[ action.key ];\n\t\t\t\t\t\t\tconst edits = nextState[ recordId ];\n\t\t\t\t\t\t\tif ( ! edits ) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst nextEdits = Object.keys( edits ).reduce(\n\t\t\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\t\t\t// If the edited value is still different to the persisted value,\n\t\t\t\t\t\t\t\t\t// keep the edited value in edits.\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t// Edits are the \"raw\" attribute values, but records may have\n\t\t\t\t\t\t\t\t\t\t// objects with more properties, so we use `get` here for the\n\t\t\t\t\t\t\t\t\t\t// comparison.\n\t\t\t\t\t\t\t\t\t\t! isEqual(\n\t\t\t\t\t\t\t\t\t\t\tedits[ key ],\n\t\t\t\t\t\t\t\t\t\t\tget(\n\t\t\t\t\t\t\t\t\t\t\t\trecord[ key ],\n\t\t\t\t\t\t\t\t\t\t\t\t'raw',\n\t\t\t\t\t\t\t\t\t\t\t\trecord[ key ]\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\t\t\t// Sometimes the server alters the sent value which means\n\t\t\t\t\t\t\t\t\t\t// we need to also remove the edits before the api request.\n\t\t\t\t\t\t\t\t\t\t( ! action.persistedEdits ||\n\t\t\t\t\t\t\t\t\t\t\t! isEqual(\n\t\t\t\t\t\t\t\t\t\t\t\tedits[ key ],\n\t\t\t\t\t\t\t\t\t\t\t\taction.persistedEdits[ key ]\n\t\t\t\t\t\t\t\t\t\t\t) )\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif ( Object.keys( nextEdits ).length ) {\n\t\t\t\t\t\t\t\tnextState[ recordId ] = nextEdits;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdelete nextState[ recordId ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn nextState;\n\n\t\t\t\t\tcase 'EDIT_ENTITY_RECORD':\n\t\t\t\t\t\tconst nextEdits = {\n\t\t\t\t\t\t\t...state[ action.recordId ],\n\t\t\t\t\t\t\t...action.edits,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tObject.keys( nextEdits ).forEach( ( key ) => {\n\t\t\t\t\t\t\t// Delete cleared edits so that the properties\n\t\t\t\t\t\t\t// are not considered dirty.\n\t\t\t\t\t\t\tif ( nextEdits[ key ] === undefined ) {\n\t\t\t\t\t\t\t\tdelete nextEdits[ key ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: nextEdits,\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\n\t\t\tsaving: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'SAVE_ENTITY_RECORD_START':\n\t\t\t\t\tcase 'SAVE_ENTITY_RECORD_FINISH':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: {\n\t\t\t\t\t\t\t\tpending:\n\t\t\t\t\t\t\t\t\taction.type === 'SAVE_ENTITY_RECORD_START',\n\t\t\t\t\t\t\t\terror: action.error,\n\t\t\t\t\t\t\t\tisAutosave: action.isAutosave,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\n\t\t\tdeleting: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'DELETE_ENTITY_RECORD_START':\n\t\t\t\t\tcase 'DELETE_ENTITY_RECORD_FINISH':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: {\n\t\t\t\t\t\t\t\tpending:\n\t\t\t\t\t\t\t\t\taction.type ===\n\t\t\t\t\t\t\t\t\t'DELETE_ENTITY_RECORD_START',\n\t\t\t\t\t\t\t\terror: action.error,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\t\t} )\n\t);\n}\n\n/**\n * Reducer keeping track of the registered entities.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function entitiesConfig( state = rootEntitiesConfig, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ADD_ENTITIES':\n\t\t\treturn [ ...state, ...action.entities ];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer keeping track of the registered entities config and data.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const entities = ( state = {}, action ) => {\n\tconst newConfig = entitiesConfig( state.config, action );\n\n\t// Generates a dynamic reducer for the entities.\n\tlet entitiesDataReducer = state.reducer;\n\tif ( ! entitiesDataReducer || newConfig !== state.config ) {\n\t\tconst entitiesByKind = groupBy( newConfig, 'kind' );\n\t\tentitiesDataReducer = combineReducers(\n\t\t\tObject.entries( entitiesByKind ).reduce(\n\t\t\t\t( memo, [ kind, subEntities ] ) => {\n\t\t\t\t\tconst kindReducer = combineReducers(\n\t\t\t\t\t\tsubEntities.reduce(\n\t\t\t\t\t\t\t( kindMemo, entityConfig ) => ( {\n\t\t\t\t\t\t\t\t...kindMemo,\n\t\t\t\t\t\t\t\t[ entityConfig.name ]: entity( entityConfig ),\n\t\t\t\t\t\t\t} ),\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tmemo[ kind ] = kindReducer;\n\t\t\t\t\treturn memo;\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t)\n\t\t);\n\t}\n\n\tconst newData = entitiesDataReducer( state.records, action );\n\n\tif (\n\t\tnewData === state.records &&\n\t\tnewConfig === state.config &&\n\t\tentitiesDataReducer === state.reducer\n\t) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\treducer: entitiesDataReducer,\n\t\trecords: newData,\n\t\tconfig: newConfig,\n\t};\n};\n\n/**\n * @typedef {Object} UndoStateMeta\n *\n * @property {number} offset          Where in the undo stack we are.\n * @property {Object} [flattenedUndo] Flattened form of undo stack.\n */\n\n/** @typedef {Array<Object> & UndoStateMeta} UndoState */\n\n/**\n * @type {UndoState}\n *\n * @todo Given how we use this we might want to make a custom class for it.\n */\nconst UNDO_INITIAL_STATE = Object.assign( [], { offset: 0 } );\n\n/** @type {Object} */\nlet lastEditAction;\n\n/**\n * Reducer keeping track of entity edit undo history.\n *\n * @param {UndoState} state  Current state.\n * @param {Object}    action Dispatched action.\n *\n * @return {UndoState} Updated state.\n */\nexport function undo( state = UNDO_INITIAL_STATE, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'EDIT_ENTITY_RECORD':\n\t\tcase 'CREATE_UNDO_LEVEL':\n\t\t\tlet isCreateUndoLevel = action.type === 'CREATE_UNDO_LEVEL';\n\t\t\tconst isUndoOrRedo =\n\t\t\t\t! isCreateUndoLevel &&\n\t\t\t\t( action.meta.isUndo || action.meta.isRedo );\n\t\t\tif ( isCreateUndoLevel ) {\n\t\t\t\taction = lastEditAction;\n\t\t\t} else if ( ! isUndoOrRedo ) {\n\t\t\t\t// Don't lose the last edit cache if the new one only has transient edits.\n\t\t\t\t// Transient edits don't create new levels so updating the cache would make\n\t\t\t\t// us skip an edit later when creating levels explicitly.\n\t\t\t\tif (\n\t\t\t\t\tObject.keys( action.edits ).some(\n\t\t\t\t\t\t( key ) => ! action.transientEdits[ key ]\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tlastEditAction = action;\n\t\t\t\t} else {\n\t\t\t\t\tlastEditAction = {\n\t\t\t\t\t\t...action,\n\t\t\t\t\t\tedits: {\n\t\t\t\t\t\t\t...( lastEditAction && lastEditAction.edits ),\n\t\t\t\t\t\t\t...action.edits,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/** @type {UndoState} */\n\t\t\tlet nextState;\n\n\t\t\tif ( isUndoOrRedo ) {\n\t\t\t\t// @ts-ignore we might consider using Object.assign({}, state)\n\t\t\t\tnextState = [ ...state ];\n\t\t\t\tnextState.offset =\n\t\t\t\t\tstate.offset + ( action.meta.isUndo ? -1 : 1 );\n\n\t\t\t\tif ( state.flattenedUndo ) {\n\t\t\t\t\t// The first undo in a sequence of undos might happen while we have\n\t\t\t\t\t// flattened undos in state. If this is the case, we want execution\n\t\t\t\t\t// to continue as if we were creating an explicit undo level. This\n\t\t\t\t\t// will result in an extra undo level being appended with the flattened\n\t\t\t\t\t// undo values.\n\t\t\t\t\t// We also have to take into account if the `lastEditAction` had opted out\n\t\t\t\t\t// of being tracked in undo history, like the action that persists the latest\n\t\t\t\t\t// content right before saving. In that case we have to update the `lastEditAction`\n\t\t\t\t\t// to avoid returning early before applying the existing flattened undos.\n\t\t\t\t\tisCreateUndoLevel = true;\n\t\t\t\t\tif ( ! lastEditAction.meta.undo ) {\n\t\t\t\t\t\tlastEditAction.meta.undo = {\n\t\t\t\t\t\t\tedits: {},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\taction = lastEditAction;\n\t\t\t\t} else {\n\t\t\t\t\treturn nextState;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! action.meta.undo ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// Transient edits don't create an undo level, but are\n\t\t\t// reachable in the next meaningful edit to which they\n\t\t\t// are merged. They are defined in the entity's config.\n\t\t\tif (\n\t\t\t\t! isCreateUndoLevel &&\n\t\t\t\t! Object.keys( action.edits ).some(\n\t\t\t\t\t( key ) => ! action.transientEdits[ key ]\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// @ts-ignore we might consider using Object.assign({}, state)\n\t\t\t\tnextState = [ ...state ];\n\t\t\t\tnextState.flattenedUndo = {\n\t\t\t\t\t...state.flattenedUndo,\n\t\t\t\t\t...action.edits,\n\t\t\t\t};\n\t\t\t\tnextState.offset = state.offset;\n\t\t\t\treturn nextState;\n\t\t\t}\n\n\t\t\t// Clear potential redos, because this only supports linear history.\n\t\t\tnextState =\n\t\t\t\t// @ts-ignore this needs additional cleanup, probably involving code-level changes\n\t\t\t\tnextState || state.slice( 0, state.offset || undefined );\n\t\t\tnextState.offset = nextState.offset || 0;\n\t\t\tnextState.pop();\n\t\t\tif ( ! isCreateUndoLevel ) {\n\t\t\t\tnextState.push( {\n\t\t\t\t\tkind: action.meta.undo.kind,\n\t\t\t\t\tname: action.meta.undo.name,\n\t\t\t\t\trecordId: action.meta.undo.recordId,\n\t\t\t\t\tedits: {\n\t\t\t\t\t\t...state.flattenedUndo,\n\t\t\t\t\t\t...action.meta.undo.edits,\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\t\t\t// When an edit is a function it's an optimization to avoid running some expensive operation.\n\t\t\t// We can't rely on the function references being the same so we opt out of comparing them here.\n\t\t\tconst comparisonUndoEdits = Object.values(\n\t\t\t\taction.meta.undo.edits\n\t\t\t).filter( ( edit ) => typeof edit !== 'function' );\n\t\t\tconst comparisonEdits = Object.values( action.edits ).filter(\n\t\t\t\t( edit ) => typeof edit !== 'function'\n\t\t\t);\n\t\t\tif ( ! isShallowEqual( comparisonUndoEdits, comparisonEdits ) ) {\n\t\t\t\tnextState.push( {\n\t\t\t\t\tkind: action.kind,\n\t\t\t\t\tname: action.name,\n\t\t\t\t\trecordId: action.recordId,\n\t\t\t\t\tedits: isCreateUndoLevel\n\t\t\t\t\t\t? { ...state.flattenedUndo, ...action.edits }\n\t\t\t\t\t\t: action.edits,\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn nextState;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing embed preview data.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function embedPreviews( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_EMBED_PREVIEW':\n\t\t\tconst { url, preview } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ url ]: preview,\n\t\t\t};\n\t}\n\treturn state;\n}\n\n/**\n * State which tracks whether the user can perform an action on a REST\n * resource.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function userPermissions( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_USER_PERMISSION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.key ]: action.isAllowed,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning autosaves keyed by their parent's post id.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function autosaves( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_AUTOSAVES':\n\t\t\tconst { postId, autosaves: autosavesData } = action;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ postId ]: autosavesData,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport function blockPatterns( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_BLOCK_PATTERNS':\n\t\t\treturn action.patterns;\n\t}\n\n\treturn state;\n}\n\nexport function blockPatternCategories( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_BLOCK_PATTERN_CATEGORIES':\n\t\t\treturn action.categories;\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tterms,\n\tusers,\n\tcurrentTheme,\n\tcurrentGlobalStylesId,\n\tcurrentUser,\n\tthemeGlobalStyleVariations,\n\tthemeBaseGlobalStyles,\n\ttaxonomies,\n\tentities,\n\tundo,\n\tembedPreviews,\n\tuserPermissions,\n\tautosaves,\n\tblockPatterns,\n\tblockPatternCategories,\n} );\n","'use strict';\n\n/** @typedef {(...args: any[]) => *[]} GetDependants */\n\n/** @typedef {() => void} Clear */\n\n/**\n * @typedef {{\n *   getDependants: GetDependants,\n *   clear: Clear\n * }} EnhancedSelector\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef CacheNode\n *\n * @property {?CacheNode|undefined} [prev] Previous node.\n * @property {?CacheNode|undefined} [next] Next node.\n * @property {*[]} args Function arguments for cache entry.\n * @property {*} val Function result.\n */\n\n/**\n * @typedef Cache\n *\n * @property {Clear} clear Function to clear cache.\n * @property {boolean} [isUniqueByDependants] Whether dependants are valid in\n * considering cache uniqueness. A cache is unique if dependents are all arrays\n * or objects.\n * @property {CacheNode?} [head] Cache head.\n * @property {*[]} [lastDependants] Dependants from previous invocation.\n */\n\n/**\n * Arbitrary value used as key for referencing cache object in WeakMap tree.\n *\n * @type {{}}\n */\nvar LEAF_KEY = {};\n\n/**\n * Returns the first argument as the sole entry in an array.\n *\n * @template T\n *\n * @param {T} value Value to return.\n *\n * @return {[T]} Value returned as entry in array.\n */\nfunction arrayOf(value) {\n\treturn [value];\n}\n\n/**\n * Returns true if the value passed is object-like, or false otherwise. A value\n * is object-like if it can support property assignment, e.g. object or array.\n *\n * @param {*} value Value to test.\n *\n * @return {boolean} Whether value is object-like.\n */\nfunction isObjectLike(value) {\n\treturn !!value && 'object' === typeof value;\n}\n\n/**\n * Creates and returns a new cache object.\n *\n * @return {Cache} Cache object.\n */\nfunction createCache() {\n\t/** @type {Cache} */\n\tvar cache = {\n\t\tclear: function () {\n\t\t\tcache.head = null;\n\t\t},\n\t};\n\n\treturn cache;\n}\n\n/**\n * Returns true if entries within the two arrays are strictly equal by\n * reference from a starting index.\n *\n * @param {*[]} a First array.\n * @param {*[]} b Second array.\n * @param {number} fromIndex Index from which to start comparison.\n *\n * @return {boolean} Whether arrays are shallowly equal.\n */\nfunction isShallowEqual(a, b, fromIndex) {\n\tvar i;\n\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (i = fromIndex; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns a memoized selector function. The getDependants function argument is\n * called before the memoized selector and is expected to return an immutable\n * reference or array of references on which the selector depends for computing\n * its own return value. The memoize cache is preserved only as long as those\n * dependant references remain the same. If getDependants returns a different\n * reference(s), the cache is cleared and the selector value regenerated.\n *\n * @template {(...args: *[]) => *} S\n *\n * @param {S} selector Selector function.\n * @param {GetDependants=} getDependants Dependant getter returning an array of\n * references used in cache bust consideration.\n */\nexport default function (selector, getDependants) {\n\t/** @type {WeakMap<*,*>} */\n\tvar rootCache;\n\n\t/** @type {GetDependants} */\n\tvar normalizedGetDependants = getDependants ? getDependants : arrayOf;\n\n\t/**\n\t * Returns the cache for a given dependants array. When possible, a WeakMap\n\t * will be used to create a unique cache for each set of dependants. This\n\t * is feasible due to the nature of WeakMap in allowing garbage collection\n\t * to occur on entries where the key object is no longer referenced. Since\n\t * WeakMap requires the key to be an object, this is only possible when the\n\t * dependant is object-like. The root cache is created as a hierarchy where\n\t * each top-level key is the first entry in a dependants set, the value a\n\t * WeakMap where each key is the next dependant, and so on. This continues\n\t * so long as the dependants are object-like. If no dependants are object-\n\t * like, then the cache is shared across all invocations.\n\t *\n\t * @see isObjectLike\n\t *\n\t * @param {*[]} dependants Selector dependants.\n\t *\n\t * @return {Cache} Cache object.\n\t */\n\tfunction getCache(dependants) {\n\t\tvar caches = rootCache,\n\t\t\tisUniqueByDependants = true,\n\t\t\ti,\n\t\t\tdependant,\n\t\t\tmap,\n\t\t\tcache;\n\n\t\tfor (i = 0; i < dependants.length; i++) {\n\t\t\tdependant = dependants[i];\n\n\t\t\t// Can only compose WeakMap from object-like key.\n\t\t\tif (!isObjectLike(dependant)) {\n\t\t\t\tisUniqueByDependants = false;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Does current segment of cache already have a WeakMap?\n\t\t\tif (caches.has(dependant)) {\n\t\t\t\t// Traverse into nested WeakMap.\n\t\t\t\tcaches = caches.get(dependant);\n\t\t\t} else {\n\t\t\t\t// Create, set, and traverse into a new one.\n\t\t\t\tmap = new WeakMap();\n\t\t\t\tcaches.set(dependant, map);\n\t\t\t\tcaches = map;\n\t\t\t}\n\t\t}\n\n\t\t// We use an arbitrary (but consistent) object as key for the last item\n\t\t// in the WeakMap to serve as our running cache.\n\t\tif (!caches.has(LEAF_KEY)) {\n\t\t\tcache = createCache();\n\t\t\tcache.isUniqueByDependants = isUniqueByDependants;\n\t\t\tcaches.set(LEAF_KEY, cache);\n\t\t}\n\n\t\treturn caches.get(LEAF_KEY);\n\t}\n\n\t/**\n\t * Resets root memoization cache.\n\t */\n\tfunction clear() {\n\t\trootCache = new WeakMap();\n\t}\n\n\t/* eslint-disable jsdoc/check-param-names */\n\t/**\n\t * The augmented selector call, considering first whether dependants have\n\t * changed before passing it to underlying memoize function.\n\t *\n\t * @param {*}    source    Source object for derivation.\n\t * @param {...*} extraArgs Additional arguments to pass to selector.\n\t *\n\t * @return {*} Selector result.\n\t */\n\t/* eslint-enable jsdoc/check-param-names */\n\tfunction callSelector(/* source, ...extraArgs */) {\n\t\tvar len = arguments.length,\n\t\t\tcache,\n\t\t\tnode,\n\t\t\ti,\n\t\t\targs,\n\t\t\tdependants;\n\n\t\t// Create copy of arguments (avoid leaking deoptimization).\n\t\targs = new Array(len);\n\t\tfor (i = 0; i < len; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\n\t\tdependants = normalizedGetDependants.apply(null, args);\n\t\tcache = getCache(dependants);\n\n\t\t// If not guaranteed uniqueness by dependants (primitive type), shallow\n\t\t// compare against last dependants and, if references have changed,\n\t\t// destroy cache to recalculate result.\n\t\tif (!cache.isUniqueByDependants) {\n\t\t\tif (\n\t\t\t\tcache.lastDependants &&\n\t\t\t\t!isShallowEqual(dependants, cache.lastDependants, 0)\n\t\t\t) {\n\t\t\t\tcache.clear();\n\t\t\t}\n\n\t\t\tcache.lastDependants = dependants;\n\t\t}\n\n\t\tnode = cache.head;\n\t\twhile (node) {\n\t\t\t// Check whether node arguments match arguments\n\t\t\tif (!isShallowEqual(node.args, args, 1)) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif (node !== cache.head) {\n\t\t\t\t// Adjust siblings to point to each other.\n\t\t\t\t/** @type {CacheNode} */ (node.prev).next = node.next;\n\t\t\t\tif (node.next) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = cache.head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {CacheNode} */ (cache.head).prev = node;\n\t\t\t\tcache.head = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\tnode = /** @type {CacheNode} */ ({\n\t\t\t// Generate the result from original function\n\t\t\tval: selector.apply(null, args),\n\t\t});\n\n\t\t// Avoid including the source object in the cache.\n\t\targs[0] = null;\n\t\tnode.args = args;\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif (cache.head) {\n\t\t\tcache.head.prev = node;\n\t\t\tnode.next = cache.head;\n\t\t}\n\n\t\tcache.head = node;\n\n\t\treturn node.val;\n\t}\n\n\tcallSelector.getDependants = normalizedGetDependants;\n\tcallSelector.clear = clear;\n\tclear();\n\n\treturn /** @type {S & EnhancedSelector} */ (callSelector);\n}\n","/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport EquivalentKeyMap from 'equivalent-key-map';\nimport { get, set } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport getQueryParts from './get-query-parts';\n\n/**\n * Cache of state keys to EquivalentKeyMap where the inner map tracks queries\n * to their resulting items set. WeakMap allows garbage collection on expired\n * state references.\n *\n * @type {WeakMap<Object,EquivalentKeyMap>}\n */\nconst queriedItemsCacheByState = new WeakMap();\n\n/**\n * Returns items for a given query, or null if the items are not known.\n *\n * @param {Object}  state State object.\n * @param {?Object} query Optional query.\n *\n * @return {?Array} Query items.\n */\nfunction getQueriedItemsUncached( state, query ) {\n\tconst { stableKey, page, perPage, include, fields, context } =\n\t\tgetQueryParts( query );\n\tlet itemIds;\n\n\tif ( state.queries?.[ context ]?.[ stableKey ] ) {\n\t\titemIds = state.queries[ context ][ stableKey ];\n\t}\n\n\tif ( ! itemIds ) {\n\t\treturn null;\n\t}\n\n\tconst startOffset = perPage === -1 ? 0 : ( page - 1 ) * perPage;\n\tconst endOffset =\n\t\tperPage === -1\n\t\t\t? itemIds.length\n\t\t\t: Math.min( startOffset + perPage, itemIds.length );\n\n\tconst items = [];\n\tfor ( let i = startOffset; i < endOffset; i++ ) {\n\t\tconst itemId = itemIds[ i ];\n\t\tif ( Array.isArray( include ) && ! include.includes( itemId ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Having a target item ID doesn't guarantee that this object has been queried.\n\t\tif ( ! state.items[ context ]?.hasOwnProperty( itemId ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst item = state.items[ context ][ itemId ];\n\n\t\tlet filteredItem;\n\t\tif ( Array.isArray( fields ) ) {\n\t\t\tfilteredItem = {};\n\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t} else {\n\t\t\t// If expecting a complete item, validate that completeness, or\n\t\t\t// otherwise abort.\n\t\t\tif ( ! state.itemIsComplete[ context ]?.[ itemId ] ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfilteredItem = item;\n\t\t}\n\n\t\titems.push( filteredItem );\n\t}\n\n\treturn items;\n}\n\n/**\n * Returns items for a given query, or null if the items are not known. Caches\n * result both per state (by reference) and per query (by deep equality).\n * The caching approach is intended to be durable to query objects which are\n * deeply but not referentially equal, since otherwise:\n *\n * `getQueriedItems( state, {} ) !== getQueriedItems( state, {} )`\n *\n * @param {Object}  state State object.\n * @param {?Object} query Optional query.\n *\n * @return {?Array} Query items.\n */\nexport const getQueriedItems = createSelector( ( state, query = {} ) => {\n\tlet queriedItemsCache = queriedItemsCacheByState.get( state );\n\tif ( queriedItemsCache ) {\n\t\tconst queriedItems = queriedItemsCache.get( query );\n\t\tif ( queriedItems !== undefined ) {\n\t\t\treturn queriedItems;\n\t\t}\n\t} else {\n\t\tqueriedItemsCache = new EquivalentKeyMap();\n\t\tqueriedItemsCacheByState.set( state, queriedItemsCache );\n\t}\n\n\tconst items = getQueriedItemsUncached( state, query );\n\tqueriedItemsCache.set( query, items );\n\treturn items;\n} );\n","/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set, map, find, get, filter, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable, isRawAttribute } from './utils';\nimport type {\n\tContext,\n\tDefaultContextOf,\n\tEntityRecordOf,\n\tKeyOf,\n\tKind,\n\tKindOf,\n\tName,\n\tNameOf,\n\tUser,\n\tWpTemplate,\n} from './entity-types';\n\n// This is an incomplete, high-level approximation of the State type.\n// It makes the selectors slightly more safe, but is intended to evolve\n// into a more detailed representation over time.\n// See https://github.com/WordPress/gutenberg/pull/40025#discussion_r865410589 for more context.\ninterface State {\n\tautosaves: Record< string | number, Array< unknown > >;\n\tblockPatterns: Array< unknown >;\n\tblockPatternCategories: Array< unknown >;\n\tcurrentGlobalStylesId: string;\n\tcurrentTheme: string;\n\tcurrentUser: User< 'edit' >;\n\tembedPreviews: Record< string, { html: string } >;\n\tentities: EntitiesState;\n\tthemeBaseGlobalStyles: Record< string, Object >;\n\tthemeGlobalStyleVariations: Record< string, string >;\n\tundo: UndoState;\n\tusers: UserState;\n}\n\ninterface EntitiesState {\n\tconfig: EntityConfig[];\n\trecords: Record< Kind, Record< Name, EntityState< Kind, Name > > >;\n}\n\ninterface EntityState< K extends Kind, N extends Name > {\n\tedits: Record< KeyOf< K, N >, Partial< EntityRecordOf< K, N > > >;\n\tsaving: Record< KeyOf< K, N >, { pending: boolean } >;\n}\n\ninterface EntityConfig {\n\tname: Name;\n\tkind: Kind;\n}\n\ninterface UndoState extends Array< Object > {\n\tflattenedUndo: unknown;\n\toffset: number;\n}\n\ninterface UserState {\n\tqueries: Record< string, GenericRecordKey[] >;\n\tbyId: Record< GenericRecordKey, User< 'edit' > >;\n}\n\ntype GenericRecordKey = number | string;\ntype EntityRecord = any;\ntype Optional< T > = T | undefined;\n\n/**\n * HTTP Query parameters sent with the API request to fetch the entity records.\n */\nexport type EntityQuery<\n\tC extends Context,\n\tWithFields extends boolean = true\n> = Omit< Record< string, any >, '_fields' > & {\n\tcontext?: C;\n} & ( WithFields extends true\n\t\t? {\n\t\t\t\t/**\n\t\t\t\t * The requested fields. If specified, the REST API will remove from the response\n\t\t\t\t * any fields not on that list.\n\t\t\t\t */\n\t\t\t\t_fields: string[];\n\t\t  }\n\t\t: {} );\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param  state Data state.\n * @param  url   URL the preview would be for.\n *\n * @return Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) =>\n\t\t( state: State, url: string ): boolean => {\n\t\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [\n\t\t\t\turl,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param  state Data state.\n * @param  query Optional object of query parameters to\n *               include with request.\n * @return Authors list.\n */\nexport function getAuthors(\n\tstate: State,\n\tquery?: EntityQuery< any >\n): User< 'edit' >[] {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param  state Data state.\n *\n * @return Current user object.\n */\nexport function getCurrentUser( state: State ): User< 'edit' > {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param  state   Data state.\n * @param  queryID Query ID.\n *\n * @return Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state: State, queryID: string ): User< 'edit' >[] => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state: State, queryID: string ) => [\n\t\tstate.users.queries[ queryID ],\n\t\tstate.users.byId,\n\t]\n);\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @deprecated since WordPress 6.0. Use getEntitiesConfig instead\n * @param  state Data state.\n * @param  kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state: State, kind: Kind ): Array< any > {\n\tdeprecated( \"wp.data.select( 'core' ).getEntitiesByKind()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntitiesConfig()\",\n\t} );\n\treturn getEntitiesConfig( state, kind );\n}\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @param  state Data state.\n * @param  kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesConfig( state: State, kind: Kind ): Array< any > {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @deprecated since WordPress 6.0. Use getEntityConfig instead\n * @param  state Data state.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntity( state: State, kind: Kind, name: Name ): any {\n\tdeprecated( \"wp.data.select( 'core' ).getEntity()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntityConfig()\",\n\t} );\n\treturn getEntityConfig( state, kind, name );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @param  state Data state.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntityConfig( state: State, kind: Kind, name: Name ): any {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * GetEntityRecord is declared as an *interface*, but it actually describes\n * the specifies the getEntityRecord *function* signature. It may seem unusual,\n * but it's just how TypeScript implements function overloading.\n *\n * More accurately, GetEntityRecord distinguishes between two different signatures\n * the getEntityRecord selector has:\n *\n * 1. When query._fields is not given, the returned type is EntityRecordOf< K, N, C >\n * 2. When query._fields is given, the returned type is Partial<EntityRecordOf< K, N, C >>\n *\n * Unfortunately, due to a TypeScript limitation (https://github.com/microsoft/TypeScript/issues/23132)\n * we can't use a single function signature with a return type such as:\n *\n *    Fields extends undefined\n * \t    ? EntityRecordOf< K, N, C >\n * \t\t  : Partial< EntityRecordOf< K, N, C > >\n */\ninterface GetEntityRecord {\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >,\n\t\tquery: EntityQuery< C, true >\n\t): Partial< EntityRecordOf< K, N, C > > | null | undefined;\n\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >,\n\t\tquery?: EntityQuery< C, false >\n\t): EntityRecordOf< K, N, C > | null | undefined;\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key\n * @param  query Optional query.\n *\n * @return Record.\n */\nexport const getEntityRecord: GetEntityRecord = createSelector(\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< R >,\n\t\tquery\n\t) => {\n\t\tconst queriedState = get( state.entities.records, [\n\t\t\tkind,\n\t\t\tname,\n\t\t\t'queriedData',\n\t\t] );\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem;\n\t\t}\n\n\t\treturn item;\n\t},\n\t( state: State, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity records from the API if the entity record isn't available in the local state.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key\n *\n * @return Record.\n */\nexport function __experimentalGetEntityRecordNoResolver<\n\tK extends Kind,\n\tN extends Name\n>( state: State, kind: K, name: N, key: KeyOf< K, N > ) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param  state State tree.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key.\n *\n * @return Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >\n\t): EntityRecord | undefined => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif (\n\t\t\t\t\tisRawAttribute( getEntityConfig( state, kind, name ), _key )\n\t\t\t\t) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t\t'raw',\n\t\t\t\t\t\trecord[ _key ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: Kind,\n\t\tname: Name,\n\t\trecordId: GenericRecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  query Optional terms query.\n *\n * @return  Whether entity records have been received.\n */\nexport function hasEntityRecords<\n\tR extends EntityRecordOf< K, N >,\n\tC extends Context = DefaultContextOf< R >,\n\tK extends Kind = KindOf< R >,\n\tN extends Name = NameOf< R >\n>( state: State, kind: K, name: N, query?: EntityQuery< C > ): boolean {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * GetEntityRecord is declared as an *interface*, but it actually describes\n * the specifies the getEntityRecord *function* signature. It may seem unusual,\n * but it's just how TypeScript implements function overloading.\n *\n * More accurately, GetEntityRecord distinguishes between two different signatures\n * the getEntityRecord selector has:\n *\n * 1. When query._fields is not given, the returned type is EntityRecordOf< K, N, C >[]\n * 2. When query._fields is given, the returned type is Partial<EntityRecordOf< K, N, C >>[]\n *\n * Unfortunately, due to a TypeScript limitation (https://github.com/microsoft/TypeScript/issues/23132)\n * we can't use a single function signature with a return type such as:\n *\n *    Fields extends undefined\n * \t    ? EntityRecordOf< K, N, C >[]\n * \t\t  : Partial< EntityRecordOf< K, N, C > >[]\n */\ninterface GetEntityRecords {\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tquery: EntityQuery< C, true >\n\t): Partial< EntityRecordOf< K, N, C > >[] | null | undefined;\n\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tquery?: EntityQuery< C, false >\n\t): EntityRecordOf< K, N, C >[] | null | undefined;\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  query Optional terms query.\n *\n * @return Records.\n */\nexport const getEntityRecords: GetEntityRecords = <\n\tR extends EntityRecordOf< K, N >,\n\tC extends Context = DefaultContextOf< R >,\n\tK extends Kind = KindOf< R >,\n\tN extends Name = NameOf< R >\n>(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\tquery\n) => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState = get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n};\n\ntype DirtyEntityRecord = {\n\ttitle: string;\n\tkey: GenericRecordKey;\n\tname: Name;\n\tkind: Kind;\n};\n/**\n * Returns the list of dirty entity records.\n *\n * @param  state State tree.\n *\n * @return The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst dirtyRecords: DirtyEntityRecord[] = [];\n\t\t( Object.keys( records ) as Kind[] ).forEach(\n\t\t\t< K extends Kind >( kind: K ) => {\n\t\t\t\t( Object.keys( records[ kind ] ) as Name[] ).forEach(\n\t\t\t\t\t< N extends Name >( name: N ) => {\n\t\t\t\t\t\tconst primaryKeys = (\n\t\t\t\t\t\t\tObject.keys(\n\t\t\t\t\t\t\t\trecords[ kind ][ name ].edits\n\t\t\t\t\t\t\t) as KeyOf< K, N >[]\n\t\t\t\t\t\t ).filter(\n\t\t\t\t\t\t\t( primaryKey ) =>\n\t\t\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\t\t\tgetEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\thasEditsForEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\t\t\tconst entityConfig = getEntityConfig(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\t\t\tkey: entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\t\t\tentityConfig?.getTitle?.(\n\t\t\t\t\t\t\t\t\t\t\tentityRecord\n\t\t\t\t\t\t\t\t\t\t) || '',\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param  state State tree.\n *\n * @return The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst recordsBeingSaved: DirtyEntityRecord[] = [];\n\t\t( Object.keys( records ) as Kind[] ).forEach(\n\t\t\t< K extends Kind >( kind: K ) => {\n\t\t\t\t( Object.keys( records[ kind ] ) as Name[] ).forEach(\n\t\t\t\t\t< N extends Name >( name: N ) => {\n\t\t\t\t\t\tconst primaryKeys = (\n\t\t\t\t\t\t\tObject.keys(\n\t\t\t\t\t\t\t\trecords[ kind ][ name ].saving\n\t\t\t\t\t\t\t) as KeyOf< K, N >[]\n\t\t\t\t\t\t ).filter( ( primaryKey ) =>\n\t\t\t\t\t\t\tisSavingEntityRecord(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\t\t\tconst entityConfig = getEntityConfig(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\t\t\tkey: entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\t\t\tentityConfig?.getTitle?.(\n\t\t\t\t\t\t\t\t\t\t\tentityRecord\n\t\t\t\t\t\t\t\t\t\t) || '',\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's edits.\n */\nexport function getEntityRecordEdits< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): Optional< any > {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'edits',\n\t\trecordId as string | number,\n\t] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\trecordId: KeyOf< K, N >\n\t): Optional< any > => {\n\t\tconst { transientEdits } = getEntityConfig( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state: State, kind: Kind, name: Name, recordId: GenericRecordKey ) => [\n\t\tstate.entities.config,\n\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): boolean {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\trecordId: KeyOf< K, N >\n\t): EntityRecord | undefined => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t(\n\t\tstate: State,\n\t\tkind: Kind,\n\t\tname: Name,\n\t\trecordId: GenericRecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): boolean {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId as GenericRecordKey, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'deleting', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntitySaveError(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): any {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntityDeleteError(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): any {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'deleting',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param  state State tree.\n *\n * @return The current undo offset.\n */\nfunction getCurrentUndoOffset( state: State ): number {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param  state State tree.\n *\n * @return The edit.\n */\nexport function getUndoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param  state State tree.\n *\n * @return The edit.\n */\nexport function getRedoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param  state State tree.\n *\n * @return Whether there is a previous edit or not.\n */\nexport function hasUndo( state: State ): boolean {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param  state State tree.\n *\n * @return Whether there is a next edit or not.\n */\nexport function hasRedo( state: State ): boolean {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param  state Data state.\n *\n * @return The current theme.\n */\nexport function getCurrentTheme( state: State ): any {\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param  state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state: State ): string {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param  state Data state.\n *\n * @return Index data.\n */\nexport function getThemeSupports( state: State ): any {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param  state Data state.\n * @param  url   Embedded URL.\n *\n * @return Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state: State, url: string ): any {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param  state Data state.\n * @param  url   Embedded URL.\n *\n * @return Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state: State, url: string ): boolean {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param  state    Data state.\n * @param  action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param  id       Optional ID of the rest resource to check.\n *\n * @return Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser(\n\tstate: State,\n\taction: string,\n\tresource: string,\n\tid?: GenericRecordKey\n): boolean | undefined {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param  state    Data state.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record's id.\n * @return Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean | undefined {\n\tconst entityConfig = getEntityConfig( state, kind, name );\n\tif ( ! entityConfig ) {\n\t\treturn false;\n\t}\n\tconst resource = entityConfig.__unstable_rest_base;\n\n\treturn canUser( state, 'update', resource, recordId );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n *\n * @return An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves(\n\tstate: State,\n\tpostType: string,\n\tpostId: GenericRecordKey\n): Array< any > | undefined {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n * @param  authorId The id of the author.\n *\n * @return The autosave for the post and author.\n */\nexport function getAutosave(\n\tstate: State,\n\tpostType: string,\n\tpostId: GenericRecordKey,\n\tauthorId: GenericRecordKey\n): EntityRecord | undefined {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n *\n * @return True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) =>\n\t\t(\n\t\t\tstate: State,\n\t\t\tpostType: string,\n\t\t\tpostId: GenericRecordKey\n\t\t): boolean => {\n\t\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\t\tpostType,\n\t\t\t\tpostId,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param  state Editor state.\n *\n * @return A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t// This unused state argument is listed here for the documentation generating tool (docgen).\n\t( state: State ) => [],\n\t( state: State ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param  state Editor state.\n * @param  link  Link.\n *\n * @return The template record.\n */\nexport function __experimentalGetTemplateForLink(\n\tstate: State,\n\tlink: string\n): WpTemplate< 'edit' > | null {\n\tconst records = getEntityRecords( state, 'postType', 'wp_template', {\n\t\t'find-template': link,\n\t} );\n\n\tconst template = records?.length ? records[ 0 ] : null;\n\tif ( template ) {\n\t\treturn getEditedEntityRecord(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\t}\n\treturn template;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param  state Editor state.\n *\n * @return The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles(\n\tstate: State\n): any {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param  state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations(\n\tstate: State\n): string | null {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n\n/**\n * Retrieve the list of registered block patterns.\n *\n * @param  state Data state.\n *\n * @return Block pattern list.\n */\nexport function getBlockPatterns( state: State ): Array< any > {\n\treturn state.blockPatterns;\n}\n\n/**\n * Retrieve the list of registered block pattern categories.\n *\n * @param  state Data state.\n *\n * @return Block pattern category list.\n */\nexport function getBlockPatternCategories( state: State ): Array< any > {\n\treturn state.blockPatternCategories;\n}\n","/**\n * Checks whether the attribute is a \"raw\" attribute or not.\n *\n * @param {Object} entity    Entity record.\n * @param {string} attribute Attribute name.\n *\n * @return {boolean} Is the attribute raw\n */\nexport default function isRawAttribute( entity, attribute ) {\n\treturn ( entity.rawAttributes || [] ).includes( attribute );\n}\n","/**\n * Higher-order function which forward the resolution to another resolver with the same arguments.\n *\n * @param {string} resolverName forwarded resolver.\n *\n * @return {Function} Enhanced resolver.\n */\nconst forwardResolver =\n\t( resolverName ) =>\n\t( ...args ) =>\n\tasync ( { resolveSelect } ) => {\n\t\tawait resolveSelect[ resolverName ]( ...args );\n\t};\n\nexport default forwardResolver;\n","/**\n * External dependencies\n */\nimport {\n\tcamelCase,\n\tcompact,\n\tfind,\n\tget,\n\tincludes,\n\tmap,\n\tmapKeys,\n\tuniq,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getOrLoadEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\nimport { forwardResolver, getNormalizedCommaSeparable } from './utils';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport const getAuthors =\n\t( query ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst path = addQueryArgs(\n\t\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\t\tquery\n\t\t);\n\t\tconst users = await apiFetch( { path } );\n\t\tdispatch.receiveUserQuery( path, users );\n\t};\n\n/**\n * Requests the current user from the REST API.\n */\nexport const getCurrentUser =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst currentUser = await apiFetch( { path: '/wp/v2/users/me' } );\n\t\tdispatch.receiveCurrentUser( currentUser );\n\t};\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport const getEntityRecord =\n\t( kind, name, key = '', query ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name, key ],\n\t\t\t{ exclusive: false }\n\t\t);\n\n\t\ttry {\n\t\t\tif ( query !== undefined && query._fields ) {\n\t\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t\t// the ID.\n\t\t\t\tquery = {\n\t\t\t\t\t...query,\n\t\t\t\t\t_fields: uniq( [\n\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\n\t\t\t\t\t\t\t[] ),\n\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t] ).join(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Disable reason: While true that an early return could leave `path`\n\t\t\t// unused, it's important that path is derived using the query prior to\n\t\t\t// additional query modifications in the condition below, since those\n\t\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t\t// for how the request is made to the REST API.\n\n\t\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\t\tconst path = addQueryArgs(\n\t\t\t\tentityConfig.baseURL + ( key ? '/' + key : '' ),\n\t\t\t\t{\n\t\t\t\t\t...entityConfig.baseURLParams,\n\t\t\t\t\t...query,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( query !== undefined ) {\n\t\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\t\tconst hasRecords = select.hasEntityRecords( kind, name, query );\n\t\t\t\tif ( hasRecords ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst record = await apiFetch( { path } );\n\t\t\tdispatch.receiveEntityRecords( kind, name, record, query );\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {Object?} query Query Object.\n */\nexport const getEntityRecords =\n\t( kind, name, query = {} ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name ],\n\t\t\t{ exclusive: false }\n\t\t);\n\n\t\ttry {\n\t\t\tif ( query._fields ) {\n\t\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t\t// the ID.\n\t\t\t\tquery = {\n\t\t\t\t\t...query,\n\t\t\t\t\t_fields: uniq( [\n\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\n\t\t\t\t\t\t\t[] ),\n\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t] ).join(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst path = addQueryArgs( entityConfig.baseURL, {\n\t\t\t\t...entityConfig.baseURLParams,\n\t\t\t\t...query,\n\t\t\t} );\n\n\t\t\tlet records = Object.values( await apiFetch( { path } ) );\n\t\t\t// If we request fields but the result doesn't contain the fields,\n\t\t\t// explicitely set these fields as \"undefined\"\n\t\t\t// that way we consider the query \"fullfilled\".\n\t\t\tif ( query._fields ) {\n\t\t\t\trecords = records.map( ( record ) => {\n\t\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn record;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tdispatch.receiveEntityRecords( kind, name, records, query );\n\n\t\t\t// When requesting all fields, the list of results can be used to\n\t\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\t\tif ( ! query?._fields && ! query.context ) {\n\t\t\t\tconst key = entityConfig.key || DEFAULT_ENTITY_KEY;\n\t\t\t\tconst resolutionsArgs = records\n\t\t\t\t\t.filter( ( record ) => record[ key ] )\n\t\t\t\t\t.map( ( record ) => [ kind, name, record[ key ] ] );\n\n\t\t\t\tdispatch( {\n\t\t\t\t\ttype: 'START_RESOLUTIONS',\n\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t} );\n\t\t\t\tdispatch( {\n\t\t\t\t\ttype: 'FINISH_RESOLUTIONS',\n\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t} );\n\t\t\t}\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport const getCurrentTheme =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t\t'root',\n\t\t\t'theme',\n\t\t\t{ status: 'active' }\n\t\t);\n\n\t\tdispatch.receiveCurrentTheme( activeThemes[ 0 ] );\n\t};\n\n/**\n * Requests theme supports data from the index.\n */\nexport const getThemeSupports = forwardResolver( 'getCurrentTheme' );\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url URL to get the preview for.\n */\nexport const getEmbedPreview =\n\t( url ) =>\n\tasync ( { dispatch } ) => {\n\t\ttry {\n\t\t\tconst embedProxyResponse = await apiFetch( {\n\t\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t\t} );\n\t\t\tdispatch.receiveEmbedPreview( url, embedProxyResponse );\n\t\t} catch ( error ) {\n\t\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\t\tdispatch.receiveEmbedPreview( url, false );\n\t\t}\n\t};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport const canUser =\n\t( action, resource, id ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst methods = {\n\t\t\tcreate: 'POST',\n\t\t\tread: 'GET',\n\t\t\tupdate: 'PUT',\n\t\t\tdelete: 'DELETE',\n\t\t};\n\n\t\tconst method = methods[ action ];\n\t\tif ( ! method ) {\n\t\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t\t}\n\n\t\tconst path = id\n\t\t\t? `/wp/v2/${ resource }/${ id }`\n\t\t\t: `/wp/v2/${ resource }`;\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await apiFetch( {\n\t\t\t\tpath,\n\t\t\t\tmethod: 'OPTIONS',\n\t\t\t\tparse: false,\n\t\t\t} );\n\t\t} catch ( error ) {\n\t\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\t\treturn;\n\t\t}\n\n\t\t// Optional chaining operator is used here because the API requests don't\n\t\t// return the expected result in the native version. Instead, API requests\n\t\t// only return the result, without including response properties like the headers.\n\t\tconst allowHeader = response.headers?.get( 'allow' );\n\t\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\t\tconst isAllowed = includes( allowHeader, method );\n\t\tdispatch.receiveUserPermission( key, isAllowed );\n\t};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n */\nexport const canUserEditEntityRecord =\n\t( kind, name, recordId ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tif ( ! entityConfig ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst resource = entityConfig.__unstable_rest_base;\n\t\tawait dispatch( canUser( 'update', resource, recordId ) );\n\t};\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosaves =\n\t( postType, postId ) =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst { rest_base: restBase, rest_namespace: restNamespace = 'wp/v2' } =\n\t\t\tawait resolveSelect.getPostType( postType );\n\t\tconst autosaves = await apiFetch( {\n\t\t\tpath: `/${ restNamespace }/${ restBase }/${ postId }/autosaves?context=edit`,\n\t\t} );\n\n\t\tif ( autosaves && autosaves.length ) {\n\t\t\tdispatch.receiveAutosaves( postId, autosaves );\n\t\t}\n\t};\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosave =\n\t( postType, postId ) =>\n\tasync ( { resolveSelect } ) => {\n\t\tawait resolveSelect.getAutosaves( postType, postId );\n\t};\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link Link.\n */\nexport const __experimentalGetTemplateForLink =\n\t( link ) =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\t// Ideally this should be using an apiFetch call\n\t\t// We could potentially do so by adding a \"filter\" to the `wp_template` end point.\n\t\t// Also it seems the returned object is not a regular REST API post type.\n\t\tlet template;\n\t\ttry {\n\t\t\ttemplate = await window\n\t\t\t\t.fetch( addQueryArgs( link, { '_wp-find-template': true } ) )\n\t\t\t\t.then( ( res ) => res.json() )\n\t\t\t\t.then( ( { data } ) => data );\n\t\t} catch ( e ) {\n\t\t\t// For non-FSE themes, it is possible that this request returns an error.\n\t\t}\n\n\t\tif ( ! template ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst record = await resolveSelect.getEntityRecord(\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\n\t\tif ( record ) {\n\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t'postType',\n\t\t\t\t'wp_template',\n\t\t\t\t[ record ],\n\t\t\t\t{\n\t\t\t\t\t'find-template': link,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t};\n\n__experimentalGetTemplateForLink.shouldInvalidate = ( action ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\taction.kind === 'postType' &&\n\t\taction.name === 'wp_template'\n\t);\n};\n\nexport const __experimentalGetCurrentGlobalStylesId =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t\t'root',\n\t\t\t'theme',\n\t\t\t{ status: 'active' }\n\t\t);\n\t\tconst globalStylesURL = get( activeThemes, [\n\t\t\t0,\n\t\t\t'_links',\n\t\t\t'wp:user-global-styles',\n\t\t\t0,\n\t\t\t'href',\n\t\t] );\n\t\tif ( globalStylesURL ) {\n\t\t\tconst globalStylesObject = await apiFetch( {\n\t\t\t\turl: globalStylesURL,\n\t\t\t} );\n\t\t\tdispatch.__experimentalReceiveCurrentGlobalStylesId(\n\t\t\t\tglobalStylesObject.id\n\t\t\t);\n\t\t}\n\t};\n\nexport const __experimentalGetCurrentThemeBaseGlobalStyles =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\t\tconst themeGlobalStyles = await apiFetch( {\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }`,\n\t\t} );\n\t\tdispatch.__experimentalReceiveThemeBaseGlobalStyles(\n\t\t\tcurrentTheme.stylesheet,\n\t\t\tthemeGlobalStyles\n\t\t);\n\t};\n\nexport const __experimentalGetCurrentThemeGlobalStylesVariations =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\t\tconst variations = await apiFetch( {\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }/variations`,\n\t\t} );\n\t\tdispatch.__experimentalReceiveThemeGlobalStyleVariations(\n\t\t\tcurrentTheme.stylesheet,\n\t\t\tvariations\n\t\t);\n\t};\n\nexport const getBlockPatterns =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst restPatterns = await apiFetch( {\n\t\t\tpath: '/wp/v2/block-patterns/patterns',\n\t\t} );\n\t\tconst patterns = map( restPatterns, ( pattern ) =>\n\t\t\tmapKeys( pattern, ( value, key ) => camelCase( key ) )\n\t\t);\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERNS', patterns } );\n\t};\n\nexport const getBlockPatternCategories =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst categories = await apiFetch( {\n\t\t\tpath: '/wp/v2/block-patterns/categories',\n\t\t} );\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERN_CATEGORIES', categories } );\n\t};\n","export function deepCopyLocksTreePath( tree, path ) {\n\tconst newTree = { ...tree };\n\tlet currentNode = newTree;\n\tfor ( const branchName of path ) {\n\t\tcurrentNode.children = {\n\t\t\t...currentNode.children,\n\t\t\t[ branchName ]: {\n\t\t\t\tlocks: [],\n\t\t\t\tchildren: {},\n\t\t\t\t...currentNode.children[ branchName ],\n\t\t\t},\n\t\t};\n\t\tcurrentNode = currentNode.children[ branchName ];\n\t}\n\treturn newTree;\n}\n\nexport function getNode( tree, path ) {\n\tlet currentNode = tree;\n\tfor ( const branchName of path ) {\n\t\tconst nextNode = currentNode.children[ branchName ];\n\t\tif ( ! nextNode ) {\n\t\t\treturn null;\n\t\t}\n\t\tcurrentNode = nextNode;\n\t}\n\treturn currentNode;\n}\n\nexport function* iteratePath( tree, path ) {\n\tlet currentNode = tree;\n\tyield currentNode;\n\tfor ( const branchName of path ) {\n\t\tconst nextNode = currentNode.children[ branchName ];\n\t\tif ( ! nextNode ) {\n\t\t\tbreak;\n\t\t}\n\t\tyield nextNode;\n\t\tcurrentNode = nextNode;\n\t}\n}\n\nexport function* iterateDescendants( node ) {\n\tconst stack = Object.values( node.children );\n\twhile ( stack.length ) {\n\t\tconst childNode = stack.pop();\n\t\tyield childNode;\n\t\tstack.push( ...Object.values( childNode.children ) );\n\t}\n}\n\nexport function hasConflictingLock( { exclusive }, locks ) {\n\tif ( exclusive && locks.length ) {\n\t\treturn true;\n\t}\n\n\tif ( ! exclusive && locks.filter( ( lock ) => lock.exclusive ).length ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * Internal dependencies\n */\nimport { getNode, deepCopyLocksTreePath } from './utils';\n\nconst DEFAULT_STATE = {\n\trequests: [],\n\ttree: {\n\t\tlocks: [],\n\t\tchildren: {},\n\t},\n};\n\n/**\n * Reducer returning locks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport default function locks( state = DEFAULT_STATE, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENQUEUE_LOCK_REQUEST': {\n\t\t\tconst { request } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: [ request, ...state.requests ],\n\t\t\t};\n\t\t}\n\t\tcase 'GRANT_LOCK_REQUEST': {\n\t\t\tconst { lock, request } = action;\n\t\t\tconst { store, path } = request;\n\t\t\tconst storePath = [ store, ...path ];\n\n\t\t\tconst newTree = deepCopyLocksTreePath( state.tree, storePath );\n\t\t\tconst node = getNode( newTree, storePath );\n\t\t\tnode.locks = [ ...node.locks, lock ];\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: state.requests.filter( ( r ) => r !== request ),\n\t\t\t\ttree: newTree,\n\t\t\t};\n\t\t}\n\t\tcase 'RELEASE_LOCK': {\n\t\t\tconst { lock } = action;\n\t\t\tconst storePath = [ lock.store, ...lock.path ];\n\n\t\t\tconst newTree = deepCopyLocksTreePath( state.tree, storePath );\n\t\t\tconst node = getNode( newTree, storePath );\n\t\t\tnode.locks = node.locks.filter( ( l ) => l !== lock );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttree: newTree,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn state;\n}\n","/**\n * Internal dependencies\n */\nimport {\n\titerateDescendants,\n\titeratePath,\n\thasConflictingLock,\n\tgetNode,\n} from './utils';\n\nexport function getPendingLockRequests( state ) {\n\treturn state.requests;\n}\n\nexport function isLockAvailable( state, store, path, { exclusive } ) {\n\tconst storePath = [ store, ...path ];\n\tconst locks = state.tree;\n\n\t// Validate all parents and the node itself\n\tfor ( const node of iteratePath( locks, storePath ) ) {\n\t\tif ( hasConflictingLock( { exclusive }, node.locks ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// iteratePath terminates early if path is unreachable, let's\n\t// re-fetch the node and check it exists in the tree.\n\tconst node = getNode( locks, storePath );\n\tif ( ! node ) {\n\t\treturn true;\n\t}\n\n\t// Validate all nested nodes\n\tfor ( const descendant of iterateDescendants( node ) ) {\n\t\tif ( hasConflictingLock( { exclusive }, descendant.locks ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n","/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport { isLockAvailable, getPendingLockRequests } from './selectors';\n\nexport default function createLocks() {\n\tlet state = reducer( undefined, { type: '@@INIT' } );\n\n\tfunction processPendingLockRequests() {\n\t\tfor ( const request of getPendingLockRequests( state ) ) {\n\t\t\tconst { store, path, exclusive, notifyAcquired } = request;\n\t\t\tif ( isLockAvailable( state, store, path, { exclusive } ) ) {\n\t\t\t\tconst lock = { store, path, exclusive };\n\t\t\t\tstate = reducer( state, {\n\t\t\t\t\ttype: 'GRANT_LOCK_REQUEST',\n\t\t\t\t\tlock,\n\t\t\t\t\trequest,\n\t\t\t\t} );\n\t\t\t\tnotifyAcquired( lock );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction acquire( store, path, exclusive ) {\n\t\treturn new Promise( ( resolve ) => {\n\t\t\tstate = reducer( state, {\n\t\t\t\ttype: 'ENQUEUE_LOCK_REQUEST',\n\t\t\t\trequest: { store, path, exclusive, notifyAcquired: resolve },\n\t\t\t} );\n\t\t\tprocessPendingLockRequests();\n\t\t} );\n\t}\n\tfunction release( lock ) {\n\t\tstate = reducer( state, {\n\t\t\ttype: 'RELEASE_LOCK',\n\t\t\tlock,\n\t\t} );\n\t\tprocessPendingLockRequests();\n\t}\n\n\treturn { acquire, release };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","/**\n * WordPress dependencies\n */\nimport {\n\tcreateContext,\n\tuseContext,\n\tuseCallback,\n\tuseEffect,\n} from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { parse, __unstableSerializeAndClean } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\n\n/** @typedef {import('@wordpress/blocks').WPBlock} WPBlock */\n\nconst EMPTY_ARRAY = [];\n\n/**\n * Internal dependencies\n */\nimport { rootEntitiesConfig, additionalEntityConfigLoaders } from './entities';\n\nconst entityContexts = {\n\t...rootEntitiesConfig.reduce( ( acc, loader ) => {\n\t\tif ( ! acc[ loader.kind ] ) {\n\t\t\tacc[ loader.kind ] = {};\n\t\t}\n\t\tacc[ loader.kind ][ loader.name ] = {\n\t\t\tcontext: createContext( undefined ),\n\t\t};\n\t\treturn acc;\n\t}, {} ),\n\t...additionalEntityConfigLoaders.reduce( ( acc, loader ) => {\n\t\tacc[ loader.kind ] = {};\n\t\treturn acc;\n\t}, {} ),\n};\nconst getEntityContext = ( kind, name ) => {\n\tif ( ! entityContexts[ kind ] ) {\n\t\tthrow new Error( `Missing entity config for kind: ${ kind }.` );\n\t}\n\n\tif ( ! entityContexts[ kind ][ name ] ) {\n\t\tentityContexts[ kind ][ name ] = {\n\t\t\tcontext: createContext( undefined ),\n\t\t};\n\t}\n\n\treturn entityContexts[ kind ][ name ].context;\n};\n\n/**\n * Context provider component for providing\n * an entity for a specific entity.\n *\n * @param {Object} props          The component's props.\n * @param {string} props.kind     The entity kind.\n * @param {string} props.type     The entity name.\n * @param {number} props.id       The entity ID.\n * @param {*}      props.children The children to wrap.\n *\n * @return {Object} The provided children, wrapped with\n *                   the entity's context provider.\n */\nexport default function EntityProvider( { kind, type: name, id, children } ) {\n\tconst Provider = getEntityContext( kind, name ).Provider;\n\treturn <Provider value={ id }>{ children }</Provider>;\n}\n\n/**\n * Hook that returns the ID for the nearest\n * provided entity of the specified type.\n *\n * @param {string} kind The entity kind.\n * @param {string} name The entity name.\n */\nexport function useEntityId( kind, name ) {\n\treturn useContext( getEntityContext( kind, name ) );\n}\n\n/**\n * Hook that returns the value and a setter for the\n * specified property of the nearest provided\n * entity of the specified type.\n *\n * @param {string} kind  The entity kind.\n * @param {string} name  The entity name.\n * @param {string} prop  The property name.\n * @param {string} [_id] An entity ID to use instead of the context-provided one.\n *\n * @return {[*, Function, *]} An array where the first item is the\n *                            property value, the second is the\n *                            setter and the third is the full value\n * \t\t\t\t\t\t\t  object from REST API containing more\n * \t\t\t\t\t\t\t  information like `raw`, `rendered` and\n * \t\t\t\t\t\t\t  `protected` props.\n */\nexport function useEntityProp( kind, name, prop, _id ) {\n\tconst providerId = useEntityId( kind, name );\n\tconst id = _id ?? providerId;\n\n\tconst { value, fullValue } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEntityRecord, getEditedEntityRecord } =\n\t\t\t\tselect( STORE_NAME );\n\t\t\tconst record = getEntityRecord( kind, name, id ); // Trigger resolver.\n\t\t\tconst editedRecord = getEditedEntityRecord( kind, name, id );\n\t\t\treturn record && editedRecord\n\t\t\t\t? {\n\t\t\t\t\t\tvalue: editedRecord[ prop ],\n\t\t\t\t\t\tfullValue: record[ prop ],\n\t\t\t\t  }\n\t\t\t\t: {};\n\t\t},\n\t\t[ kind, name, id, prop ]\n\t);\n\tconst { editEntityRecord } = useDispatch( STORE_NAME );\n\tconst setValue = useCallback(\n\t\t( newValue ) => {\n\t\t\teditEntityRecord( kind, name, id, {\n\t\t\t\t[ prop ]: newValue,\n\t\t\t} );\n\t\t},\n\t\t[ kind, name, id, prop ]\n\t);\n\n\treturn [ value, setValue, fullValue ];\n}\n\n/**\n * Hook that returns block content getters and setters for\n * the nearest provided entity of the specified type.\n *\n * The return value has the shape `[ blocks, onInput, onChange ]`.\n * `onInput` is for block changes that don't create undo levels\n * or dirty the post, non-persistent changes, and `onChange` is for\n * peristent changes. They map directly to the props of a\n * `BlockEditorProvider` and are intended to be used with it,\n * or similar components or hooks.\n *\n * @param {string} kind         The entity kind.\n * @param {string} name         The entity name.\n * @param {Object} options\n * @param {string} [options.id] An entity ID to use instead of the context-provided one.\n *\n * @return {[WPBlock[], Function, Function]} The block array and setters.\n */\nexport function useEntityBlockEditor( kind, name, { id: _id } = {} ) {\n\tconst providerId = useEntityId( kind, name );\n\tconst id = _id ?? providerId;\n\tconst { content, blocks } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEditedEntityRecord } = select( STORE_NAME );\n\t\t\tconst editedRecord = getEditedEntityRecord( kind, name, id );\n\t\t\treturn {\n\t\t\t\tblocks: editedRecord.blocks,\n\t\t\t\tcontent: editedRecord.content,\n\t\t\t};\n\t\t},\n\t\t[ kind, name, id ]\n\t);\n\tconst { __unstableCreateUndoLevel, editEntityRecord } =\n\t\tuseDispatch( STORE_NAME );\n\n\tuseEffect( () => {\n\t\t// Load the blocks from the content if not already in state\n\t\t// Guard against other instances that might have\n\t\t// set content to a function already or the blocks are already in state.\n\t\tif ( content && typeof content !== 'function' && ! blocks ) {\n\t\t\tconst parsedContent = parse( content );\n\t\t\teditEntityRecord(\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\tid,\n\t\t\t\t{\n\t\t\t\t\tblocks: parsedContent,\n\t\t\t\t},\n\t\t\t\t{ undoIgnore: true }\n\t\t\t);\n\t\t}\n\t}, [ content ] );\n\n\tconst onChange = useCallback(\n\t\t( newBlocks, options ) => {\n\t\t\tconst { selection } = options;\n\t\t\tconst edits = { blocks: newBlocks, selection };\n\n\t\t\tconst noChange = blocks === edits.blocks;\n\t\t\tif ( noChange ) {\n\t\t\t\treturn __unstableCreateUndoLevel( kind, name, id );\n\t\t\t}\n\n\t\t\t// We create a new function here on every persistent edit\n\t\t\t// to make sure the edit makes the post dirty and creates\n\t\t\t// a new undo level.\n\t\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\t\t__unstableSerializeAndClean( blocksForSerialization );\n\n\t\t\teditEntityRecord( kind, name, id, edits );\n\t\t},\n\t\t[ kind, name, id, blocks ]\n\t);\n\n\tconst onInput = useCallback(\n\t\t( newBlocks, options ) => {\n\t\t\tconst { selection } = options;\n\t\t\tconst edits = { blocks: newBlocks, selection };\n\t\t\teditEntityRecord( kind, name, id, edits );\n\t\t},\n\t\t[ kind, name, id ]\n\t);\n\n\treturn [ blocks ?? EMPTY_ARRAY, onInput, onChange ];\n}\n","/**\n * External dependencies\n */\nimport memoize from 'memize';\n\n// re-export due to restrictive esModuleInterop setting\nexport default memoize;\n","export const enum Status {\n\tIdle = 'IDLE',\n\tResolving = 'RESOLVING',\n\tError = 'ERROR',\n\tSuccess = 'SUCCESS',\n}\n","/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport memoize from './memoize';\nimport { Status } from './constants';\n\nexport const META_SELECTORS = [\n\t'getIsResolving',\n\t'hasStartedResolution',\n\t'hasFinishedResolution',\n\t'isResolving',\n\t'getCachedResolvers',\n];\n\ninterface QuerySelectResponse< Data > {\n\t/** the requested selector return value */\n\tdata: Data;\n\n\t/** is the record still being resolved? Via the `getIsResolving` meta-selector */\n\tisResolving: boolean;\n\n\t/** was the resolution started? Via the `hasStartedResolution` meta-selector */\n\thasStarted: boolean;\n\n\t/** has the resolution finished? Via the `hasFinishedResolution` meta-selector. */\n\thasResolved: boolean;\n}\n\n/**\n * Like useSelect, but the selectors return objects containing\n * both the original data AND the resolution info.\n *\n * @param {Function} mapQuerySelect see useSelect\n * @param {Array}    deps           see useSelect\n *\n * @example\n * ```js\n * import { useQuerySelect } from '@wordpress/data';\n * import { store as coreDataStore } from '@wordpress/core-data';\n *\n * function PageTitleDisplay( { id } ) {\n *   const { data: page, isResolving } = useQuerySelect( ( query ) => {\n *     return query( coreDataStore ).getEntityRecord( 'postType', 'page', id )\n *   }, [ id ] );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return page.title;\n * }\n *\n * // Rendered in the application:\n * // <PageTitleDisplay id={ 10 } />\n * ```\n *\n * In the above example, when `PageTitleDisplay` is rendered into an\n * application, the page and the resolution details will be retrieved from\n * the store state using the `mapSelect` callback on `useQuerySelect`.\n *\n * If the id prop changes then any page in the state for that id is\n * retrieved. If the id prop doesn't change and other props are passed in\n * that do change, the title will not change because the dependency is just\n * the id.\n * @see useSelect\n *\n * @return {QuerySelectResponse} Queried data.\n */\nexport default function __experimentalUseQuerySelect( mapQuerySelect, deps ) {\n\treturn useSelect( ( select, registry ) => {\n\t\tconst resolve = ( store ) => enrichSelectors( select( store ) );\n\t\treturn mapQuerySelect( resolve, registry );\n\t}, deps );\n}\n\ninterface EnrichedSelectors {\n\t< Selectors extends Record< string, ( ...args: any[] ) => any > >(\n\t\tselectors: Selectors\n\t): {\n\t\t[ Selector in keyof Selectors ]: (\n\t\t\t...args: Parameters< Selectors[ Selector ] >\n\t\t) => QuerySelectResponse< ReturnType< Selectors[ Selector ] > >;\n\t};\n}\n\n/**\n * Transform simple selectors into ones that return an object with the\n * original return value AND the resolution info.\n *\n * @param {Object} selectors Selectors to enrich\n * @return {EnrichedSelectors} Enriched selectors\n */\nconst enrichSelectors = memoize( ( ( selectors ) => {\n\tconst resolvers = {};\n\tfor ( const selectorName in selectors ) {\n\t\tif ( META_SELECTORS.includes( selectorName ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tObject.defineProperty( resolvers, selectorName, {\n\t\t\tget:\n\t\t\t\t() =>\n\t\t\t\t( ...args: unknown[] ) => {\n\t\t\t\t\tconst { getIsResolving, hasFinishedResolution } = selectors;\n\t\t\t\t\tconst isResolving = !! getIsResolving( selectorName, args );\n\t\t\t\t\tconst hasResolved =\n\t\t\t\t\t\t! isResolving &&\n\t\t\t\t\t\thasFinishedResolution( selectorName, args );\n\t\t\t\t\tconst data = selectors[ selectorName ]( ...args );\n\n\t\t\t\t\tlet status;\n\t\t\t\t\tif ( isResolving ) {\n\t\t\t\t\t\tstatus = Status.Resolving;\n\t\t\t\t\t} else if ( hasResolved ) {\n\t\t\t\t\t\tif ( data ) {\n\t\t\t\t\t\t\tstatus = Status.Success;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstatus = Status.Error;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatus = Status.Idle;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tisResolving,\n\t\t\t\t\t\thasResolved,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t} );\n\t}\n\treturn resolvers;\n} ) as EnrichedSelectors );\n","/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport useQuerySelect from './use-query-select';\nimport { store as coreStore } from '../';\nimport type { Status } from './constants';\n\nexport interface EntityRecordResolution< RecordType > {\n\t/** The requested entity record */\n\trecord: RecordType | null;\n\n\t/**\n\t * Is the record still being resolved?\n\t */\n\tisResolving: boolean;\n\n\t/**\n\t * Is the record resolved by now?\n\t */\n\thasResolved: boolean;\n\n\t/** Resolution status */\n\tstatus: Status;\n}\n\nexport interface Options {\n\t/**\n\t * Whether to run the query or short-circuit and return null.\n\t *\n\t * @default true\n\t */\n\tenabled: boolean;\n}\n\n/**\n * Resolves the specified entity record.\n *\n * @param  kind     Kind of the entity, e.g. `root` or a `postType`. See rootEntitiesConfig in ../entities.ts for a list of available kinds.\n * @param  name     Name of the entity, e.g. `plugin` or a `post`. See rootEntitiesConfig in ../entities.ts for a list of available names.\n * @param  recordId ID of the requested entity record.\n * @param  options  Optional hook options.\n * @example\n * ```js\n * import { useEntityRecord } from '@wordpress/core-data';\n *\n * function PageTitleDisplay( { id } ) {\n *   const { record, isResolving } = useEntityRecord( 'postType', 'page', id );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return record.title;\n * }\n *\n * // Rendered in the application:\n * // <PageTitleDisplay id={ 1 } />\n * ```\n *\n * In the above example, when `PageTitleDisplay` is rendered into an\n * application, the page and the resolution details will be retrieved from\n * the store state using `getEntityRecord()`, or resolved if missing.\n *\n * @return Entity record data.\n * @template RecordType\n */\nexport default function useEntityRecord< RecordType >(\n\tkind: string,\n\tname: string,\n\trecordId: string | number,\n\toptions: Options = { enabled: true }\n): EntityRecordResolution< RecordType > {\n\tconst { data: record, ...rest } = useQuerySelect(\n\t\t( query ) => {\n\t\t\tif ( ! options.enabled ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn query( coreStore ).getEntityRecord( kind, name, recordId );\n\t\t},\n\t\t[ kind, name, recordId, options.enabled ]\n\t);\n\n\treturn {\n\t\trecord,\n\t\t...rest,\n\t};\n}\n\nexport function __experimentalUseEntityRecord(\n\tkind: string,\n\tname: string,\n\trecordId: any,\n\toptions: any\n) {\n\tdeprecated( `wp.data.__experimentalUseEntityRecord`, {\n\t\talternative: 'wp.data.useEntityRecord',\n\t\tsince: '6.1',\n\t} );\n\treturn useEntityRecord( kind, name, recordId, options );\n}\n","/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport useQuerySelect from './use-query-select';\nimport { store as coreStore } from '../';\nimport type { Options, EntityRecordResolution } from './use-entity-record';\n\ntype EntityRecordsResolution< RecordType > = Omit<\n\tEntityRecordResolution< RecordType >,\n\t'record'\n> & {\n\t/** The requested entity record */\n\trecords: RecordType[] | null;\n};\n\nconst EMPTY_ARRAY = [];\n\n/**\n * Resolves the specified entity records.\n *\n * @param  kind      Kind of the entity, e.g. `root` or a `postType`. See rootEntitiesConfig in ../entities.ts for a list of available kinds.\n * @param  name      Name of the entity, e.g. `plugin` or a `post`. See rootEntitiesConfig in ../entities.ts for a list of available names.\n * @param  queryArgs Optional HTTP query description for how to fetch the data, passed to the requested API endpoint.\n * @param  options   Optional hook options.\n * @example\n * ```js\n * import { useEntityRecord } from '@wordpress/core-data';\n *\n * function PageTitlesList() {\n *   const { records, isResolving } = useEntityRecords( 'postType', 'page' );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return (\n *     <ul>\n *       {records.map(( page ) => (\n *         <li>{ page.title }</li>\n *       ))}\n *     </ul>\n *   );\n * }\n *\n * // Rendered in the application:\n * // <PageTitlesList />\n * ```\n *\n * In the above example, when `PageTitlesList` is rendered into an\n * application, the list of records and the resolution details will be retrieved from\n * the store state using `getEntityRecords()`, or resolved if missing.\n *\n * @return Entity records data.\n * @template RecordType\n */\nexport default function useEntityRecords< RecordType >(\n\tkind: string,\n\tname: string,\n\tqueryArgs: Record< string, unknown > = {},\n\toptions: Options = { enabled: true }\n): EntityRecordsResolution< RecordType > {\n\t// Serialize queryArgs to a string that can be safely used as a React dep.\n\t// We can't just pass queryArgs as one of the deps, because if it is passed\n\t// as an object literal, then it will be a different object on each call even\n\t// if the values remain the same.\n\tconst queryAsString = addQueryArgs( '', queryArgs );\n\n\tconst { data: records, ...rest } = useQuerySelect(\n\t\t( query ) => {\n\t\t\tif ( ! options.enabled ) {\n\t\t\t\treturn {\n\t\t\t\t\t// Avoiding returning a new reference on every execution.\n\t\t\t\t\tdata: EMPTY_ARRAY,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn query( coreStore ).getEntityRecords( kind, name, queryArgs );\n\t\t},\n\t\t[ kind, name, queryAsString, options.enabled ]\n\t);\n\n\treturn {\n\t\trecords,\n\t\t...rest,\n\t};\n}\n\nexport function __experimentalUseEntityRecords(\n\tkind: string,\n\tname: string,\n\tqueryArgs: any,\n\toptions: any\n) {\n\tdeprecated( `wp.data.__experimentalUseEntityRecords`, {\n\t\talternative: 'wp.data.useEntityRecords',\n\t\tsince: '6.1',\n\t} );\n\treturn useEntityRecords( kind, name, queryArgs, options );\n}\n","/**\n * Internal dependencies\n */\nimport { store as coreStore } from '../';\nimport { Status } from './constants';\nimport useQuerySelect from './use-query-select';\n\ninterface GlobalResourcePermissionsResolution {\n\t/** Can the current user create new resources of this type? */\n\tcanCreate: boolean;\n}\ninterface SpecificResourcePermissionsResolution {\n\t/** Can the current user update resources of this type? */\n\tcanUpdate: boolean;\n\t/** Can the current user delete resources of this type? */\n\tcanDelete: boolean;\n}\ninterface ResolutionDetails {\n\t/** Resolution status */\n\tstatus: Status;\n\t/**\n\t * Is the data still being resolved?\n\t */\n\tisResolving: boolean;\n}\n\n/**\n * Is the data resolved by now?\n */\ntype HasResolved = boolean;\n\ntype ResourcePermissionsResolution< IdType > = [\n\tHasResolved,\n\tResolutionDetails &\n\t\tGlobalResourcePermissionsResolution &\n\t\t( IdType extends void ? SpecificResourcePermissionsResolution : {} )\n];\n\n/**\n * Resolves resource permissions.\n *\n * @param  resource The resource in question, e.g. media.\n * @param  id       ID of a specific resource entry, if needed, e.g. 10.\n *\n * @example\n * ```js\n * import { useResourcePermissions } from '@wordpress/core-data';\n *\n * function PagesList() {\n *   const { canCreate, isResolving } = useResourcePermissions( 'pages' );\n *\n *   if ( isResolving ) {\n *     return 'Loading ...';\n *   }\n *\n *   return (\n *     <div>\n *       {canCreate ? (<button>+ Create a new page</button>) : false}\n *       // ...\n *     </div>\n *   );\n * }\n *\n * // Rendered in the application:\n * // <PagesList />\n * ```\n *\n * In the above example, when `PagesList` is rendered into an\n * application, the appropriate permissions and the resolution details will be retrieved from\n * the store state using `canUser()`, or resolved if missing.\n *\n * @return Entity records data.\n * @template IdType\n */\nexport default function __experimentalUseResourcePermissions< IdType = void >(\n\tresource: string,\n\tid?: IdType\n): ResourcePermissionsResolution< IdType > {\n\treturn useQuerySelect(\n\t\t( resolve ) => {\n\t\t\tconst { canUser } = resolve( coreStore );\n\t\t\tconst create = canUser( 'create', resource );\n\t\t\tif ( ! id ) {\n\t\t\t\treturn [\n\t\t\t\t\tcreate.hasResolved,\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus: create.status,\n\t\t\t\t\t\tisResolving: create.isResolving,\n\t\t\t\t\t\tcanCreate: create.hasResolved && create.data,\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tconst update = canUser( 'update', resource, id );\n\t\t\tconst _delete = canUser( 'delete', resource, id );\n\t\t\tconst isResolving =\n\t\t\t\tcreate.isResolving || update.isResolving || _delete.isResolving;\n\t\t\tconst hasResolved =\n\t\t\t\tcreate.hasResolved && update.hasResolved && _delete.hasResolved;\n\n\t\t\tlet status = Status.Idle;\n\t\t\tif ( isResolving ) {\n\t\t\t\tstatus = Status.Resolving;\n\t\t\t} else if ( hasResolved ) {\n\t\t\t\tstatus = Status.Success;\n\t\t\t}\n\t\t\treturn [\n\t\t\t\thasResolved,\n\t\t\t\t{\n\t\t\t\t\tstatus,\n\t\t\t\t\tisResolving,\n\t\t\t\t\tcanCreate: hasResolved && create.data,\n\t\t\t\t\tcanUpdate: hasResolved && update.data,\n\t\t\t\t\tcanDelete: hasResolved && _delete.data,\n\t\t\t\t},\n\t\t\t];\n\t\t},\n\t\t[ resource, id ]\n\t);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"htmlEntities\"];","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Filters the search by type\n *\n * @typedef { 'attachment' | 'post' | 'term' | 'post-format' } WPLinkSearchType\n */\n\n/**\n * A link with an id may be of kind post-type or taxonomy\n *\n * @typedef { 'post-type' | 'taxonomy' } WPKind\n */\n\n/**\n * @typedef WPLinkSearchOptions\n *\n * @property {boolean}          [isInitialSuggestions] Displays initial search suggestions, when true.\n * @property {WPLinkSearchType} [type]                 Filters by search type.\n * @property {string}           [subtype]              Slug of the post-type or taxonomy.\n * @property {number}           [page]                 Which page of results to return.\n * @property {number}           [perPage]              Search results per page.\n */\n\n/**\n * @typedef WPLinkSearchResult\n *\n * @property {number} id     Post or term id.\n * @property {string} url    Link url.\n * @property {string} title  Title of the link.\n * @property {string} type   The taxonomy or post type slug or type URL.\n * @property {WPKind} [kind] Link kind of post-type or taxonomy\n */\n\n/**\n * @typedef WPLinkSearchResultAugments\n *\n * @property {{kind: WPKind}} [meta]    Contains kind information.\n * @property {WPKind}         [subtype] Optional subtype if it exists.\n */\n\n/**\n * @typedef {WPLinkSearchResult & WPLinkSearchResultAugments} WPLinkSearchResultAugmented\n */\n\n/**\n * @typedef WPEditorSettings\n *\n * @property {boolean} [ disablePostFormats ] Disables post formats, when true.\n */\n\n/**\n * Fetches link suggestions from the API.\n *\n * @async\n * @param {string}              search\n * @param {WPLinkSearchOptions} [searchOptions]\n * @param {WPEditorSettings}    [settings]\n *\n * @example\n * ```js\n * import { __experimentalFetchLinkSuggestions as fetchLinkSuggestions } from '@wordpress/core-data';\n *\n * //...\n *\n * export function initialize( id, settings ) {\n *\n * settings.__experimentalFetchLinkSuggestions = (\n *     search,\n *     searchOptions\n * ) => fetchLinkSuggestions( search, searchOptions, settings );\n * ```\n * @return {Promise< WPLinkSearchResult[] >} List of search suggestions\n */\nconst fetchLinkSuggestions = async (\n\tsearch,\n\tsearchOptions = {},\n\tsettings = {}\n) => {\n\tconst {\n\t\tisInitialSuggestions = false,\n\t\ttype = undefined,\n\t\tsubtype = undefined,\n\t\tpage = undefined,\n\t\tperPage = isInitialSuggestions ? 3 : 20,\n\t} = searchOptions;\n\n\tconst { disablePostFormats = false } = settings;\n\n\t/** @type {Promise<WPLinkSearchResult>[]} */\n\tconst queries = [];\n\n\tif ( ! type || type === 'post' ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'post',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'post-type', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\tif ( ! type || type === 'term' ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'term',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'taxonomy', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\tif ( ! disablePostFormats && ( ! type || type === 'post-format' ) ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'post-format',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'taxonomy', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\tif ( ! type || type === 'attachment' ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/media', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'media' },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\treturn Promise.all( queries ).then( ( results ) => {\n\t\treturn results\n\t\t\t.reduce(\n\t\t\t\t( /** @type {WPLinkSearchResult[]} */ accumulator, current ) =>\n\t\t\t\t\taccumulator.concat( current ), // Flatten list.\n\t\t\t\t[]\n\t\t\t)\n\t\t\t.filter(\n\t\t\t\t/**\n\t\t\t\t * @param {{ id: number }} result\n\t\t\t\t */\n\t\t\t\t( result ) => {\n\t\t\t\t\treturn !! result.id;\n\t\t\t\t}\n\t\t\t)\n\t\t\t.slice( 0, perPage )\n\t\t\t.map( ( /** @type {WPLinkSearchResultAugmented} */ result ) => {\n\t\t\t\tconst isMedia = result.type === 'attachment';\n\n\t\t\t\treturn {\n\t\t\t\t\tid: result.id,\n\t\t\t\t\t// @ts-ignore fix when we make this a TS file\n\t\t\t\t\turl: isMedia ? result.source_url : result.url,\n\t\t\t\t\ttitle:\n\t\t\t\t\t\tdecodeEntities(\n\t\t\t\t\t\t\tisMedia\n\t\t\t\t\t\t\t\t? // @ts-ignore fix when we make this a TS file\n\t\t\t\t\t\t\t\t  result.title.rendered\n\t\t\t\t\t\t\t\t: result.title || ''\n\t\t\t\t\t\t) || __( '(no title)' ),\n\t\t\t\t\ttype: result.subtype || result.type,\n\t\t\t\t\tkind: result?.meta?.kind,\n\t\t\t\t};\n\t\t\t} );\n\t} );\n};\n\nexport default fetchLinkSuggestions;\n","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\taddQueryArgs,\n\tprependHTTP,\n\tisURL,\n\tgetProtocol,\n\tisValidProtocol,\n} from '@wordpress/url';\n\n/**\n * A simple in-memory cache for requests.\n * This avoids repeat HTTP requests which may be beneficial\n * for those wishing to preserve low-bandwidth.\n */\nconst CACHE = new Map();\n\n/**\n * @typedef WPRemoteUrlData\n *\n * @property {string} title contents of the remote URL's `<title>` tag.\n */\n\n/**\n * Fetches data about a remote URL.\n * eg: <title> tag, favicon...etc.\n *\n * @async\n * @param {string}  url     the URL to request details from.\n * @param {Object?} options any options to pass to the underlying fetch.\n * @example\n * ```js\n * import { __experimentalFetchUrlData as fetchUrlData } from '@wordpress/core-data';\n *\n * //...\n *\n * export function initialize( id, settings ) {\n *\n * settings.__experimentalFetchUrlData = (\n * url\n * ) => fetchUrlData( url );\n * ```\n * @return {Promise< WPRemoteUrlData[] >} Remote URL data.\n */\nconst fetchUrlData = async ( url, options = {} ) => {\n\tconst endpoint = '/wp-block-editor/v1/url-details';\n\n\tconst args = {\n\t\turl: prependHTTP( url ),\n\t};\n\n\tif ( ! isURL( url ) ) {\n\t\treturn Promise.reject( `${ url } is not a valid URL.` );\n\t}\n\n\t// Test for \"http\" based URL as it is possible for valid\n\t// yet unusable URLs such as `tel:123456` to be passed.\n\tconst protocol = getProtocol( url );\n\n\tif (\n\t\t! protocol ||\n\t\t! isValidProtocol( protocol ) ||\n\t\t! protocol.startsWith( 'http' ) ||\n\t\t! /^https?:\\/\\/[^\\/\\s]/i.test( url )\n\t) {\n\t\treturn Promise.reject(\n\t\t\t`${ url } does not have a valid protocol. URLs must be \"http\" based`\n\t\t);\n\t}\n\n\tif ( CACHE.has( url ) ) {\n\t\treturn CACHE.get( url );\n\t}\n\n\treturn apiFetch( {\n\t\tpath: addQueryArgs( endpoint, args ),\n\t\t...options,\n\t} ).then( ( res ) => {\n\t\tCACHE.set( url, res );\n\t\treturn res;\n\t} );\n};\n\nexport default fetchUrlData;\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\nimport * as resolvers from './resolvers';\nimport createLocksActions from './locks/actions';\nimport { rootEntitiesConfig, getMethodName } from './entities';\nimport { STORE_NAME } from './name';\n\n// The entity selectors/resolvers and actions are shortcuts to their generic equivalents\n// (getEntityRecord, getEntityRecords, updateEntityRecord, updateEntityRecords)\n// Instead of getEntityRecord, the consumer could use more user-friendly named selector: getPostType, getTaxonomy...\n// The \"kind\" and the \"name\" of the entity are combined to generate these shortcuts.\n\nconst entitySelectors = rootEntitiesConfig.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name ) ] = ( state, key, query ) =>\n\t\tselectors.getEntityRecord( state, kind, name, key, query );\n\tresult[ getMethodName( kind, name, 'get', true ) ] = ( state, query ) =>\n\t\tselectors.getEntityRecords( state, kind, name, query );\n\treturn result;\n}, {} );\n\nconst entityResolvers = rootEntitiesConfig.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name ) ] = ( key, query ) =>\n\t\tresolvers.getEntityRecord( kind, name, key, query );\n\tconst pluralMethodName = getMethodName( kind, name, 'get', true );\n\tresult[ pluralMethodName ] = ( ...args ) =>\n\t\tresolvers.getEntityRecords( kind, name, ...args );\n\tresult[ pluralMethodName ].shouldInvalidate = ( action ) =>\n\t\tresolvers.getEntityRecords.shouldInvalidate( action, kind, name );\n\treturn result;\n}, {} );\n\nconst entityActions = rootEntitiesConfig.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name, 'save' ) ] = ( key ) =>\n\t\tactions.saveEntityRecord( kind, name, key );\n\tresult[ getMethodName( kind, name, 'delete' ) ] = ( key, query ) =>\n\t\tactions.deleteEntityRecord( kind, name, key, query );\n\treturn result;\n}, {} );\n\nconst storeConfig = () => ( {\n\treducer,\n\tactions: { ...actions, ...entityActions, ...createLocksActions() },\n\tselectors: { ...selectors, ...entitySelectors },\n\tresolvers: { ...resolvers, ...entityResolvers },\n} );\n\n/**\n * Store definition for the code data namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, storeConfig() );\n\nregister( store );\n\nexport { default as EntityProvider } from './entity-provider';\nexport { default as useEntityRecord } from './hooks/use-entity-record';\nexport { default as useEntityRecords } from './hooks/use-entity-records';\nexport { default as __experimentalUseResourcePermissions } from './hooks/use-resource-permissions';\nexport * from './entity-provider';\nexport * from './entity-types';\nexport * from './fetch';\nexport * from './hooks';\n","/**\n * Internal dependencies\n */\nimport createLocks from './engine';\n\nexport default function createLocksActions() {\n\tconst locks = createLocks();\n\n\tfunction __unstableAcquireStoreLock( store, path, { exclusive } ) {\n\t\treturn () => locks.acquire( store, path, exclusive );\n\t}\n\n\tfunction __unstableReleaseStoreLock( lock ) {\n\t\treturn () => locks.release( lock );\n\t}\n\n\treturn { __unstableAcquireStoreLock, __unstableReleaseStoreLock };\n}\n"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","getValuePair","instance","_map","_arrayTreeMap","_objectTreeMap","has","get","properties","keys","sort","map","Array","isArray","property","undefined","propertyValue","valuePair","delete","set","EquivalentKeyMap","iterable","Constructor","TypeError","_classCallCheck","this","clear","iterablePairs","forEach","value","push","protoProps","previousValuePair","callback","_this","thisArg","arguments","call","Map","size","module","exports","fn","options","head","tail","memoized","args","node","len","searchCache","next","prev","val","apply","maxSize","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","o","prop","hasOwnProperty","r","toStringTag","window","isMatch","reducer","state","action","replacer","conservativeMapItem","item","nextItem","hasChanges","result","isEqual","actionProperty","nextKeyState","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","rng","Error","uuid","byteToHex","toString","substr","buf","offset","rnds","random","arr","toLowerCase","receiveItems","items","edits","type","castArray","persistedEdits","removeItems","kind","name","records","invalidateCache","itemIds","receiveQueriedItems","query","maxItems","async","defaultProcessor","requests","preflightResponse","apiFetch","path","method","endpoints","results","batchRequests","chunkSize","tmp","cache","splice","chunk","batchResponse","data","validation","request","body","headers","batchResults","failed","responses","response","error","status","output","ObservableSet","Set","subscribers","add","subscriber","isSuccess","subscribe","STORE_NAME","receiveUserQuery","queryID","users","receiveCurrentUser","currentUser","addEntities","entities","receiveEntityRecords","record","title","receiveCurrentTheme","currentTheme","__experimentalReceiveCurrentGlobalStylesId","currentGlobalStylesId","id","__experimentalReceiveThemeBaseGlobalStyles","stylesheet","globalStyles","__experimentalReceiveThemeGlobalStyleVariations","variations","receiveThemeSupports","deprecated","since","receiveEmbedPreview","url","preview","deleteEntityRecord","recordId","__unstableFetch","throwOnError","dispatch","configs","getOrLoadEntitiesConfig","entityConfig","find","deletedRecord","__experimentalNoFetch","lock","__unstableAcquireStoreLock","exclusive","hasError","baseURL","addQueryArgs","_error","__unstableReleaseStoreLock","editEntityRecord","select","getEntityConfig","transientEdits","mergedEdits","getRawEntityRecord","editedRecord","getEditedEntityRecord","edit","reduce","acc","recordValue","editedRecordValue","meta","undo","undoIgnore","undoEdit","getUndoEdit","isUndo","redo","redoEdit","getRedoEdit","isRedo","__unstableCreateUndoLevel","saveEntityRecord","isAutosave","resolveSelect","entityIdKey","DEFAULT_ENTITY_KEY","entries","evaluatedValue","updatedRecord","persistedRecord","getCurrentUser","currentUserId","autosavePost","getAutosave","includes","newRecord","receiveAutosaves","__unstablePrePersist","__experimentalBatch","batch","processor","lastId","queue","pending","inputOrThunk","input","Promise","resolve","reject","finally","unsubscribe","pair","zip","queueItem","createBatch","api","saveEditedEntityRecord","resultPromises","all","run","hasEditsForEntityRecord","getEntityRecordNonTransientEdits","__experimentalSaveSpecifiedEntityEdits","itemsToSave","editsToSave","some","receiveUploadPermissions","hasUploadPermissions","alternative","receiveUserPermission","isAllowed","postId","autosaves","POST_RAW_ATTRIBUTES","attachmentConfig","baseURLParams","context","plural","label","__","rawAttributes","siteConfig","getTitle","postTypeConfig","taxonomyConfig","sidebarConfig","blocks","widgetConfig","widgetTypeConfig","userConfig","commentConfig","menuConfig","menuItemConfig","menuLocationConfig","globalStyleConfig","rendered","themeConfig","pluginConfig","rootEntitiesConfig","_fields","join","additionalEntityConfigLoaders","loadEntities","postTypes","postType","isTemplate","rest_namespace","rest_base","selection","startCase","slug","String","prePersistPostType","__unstable_rest_base","taxonomies","taxonomy","newEdits","getMethodName","prefix","usePlural","kindPrefix","upperFirst","camelCase","nameSuffix","suffix","getEntitiesConfig","loader","split","WeakMap","parts","stableKey","page","perPage","fields","include","Number","getNormalizedCommaSeparable","slice","getContextFromAction","getQueryParts","getMergedItemIds","nextItemIds","nextItemIdsStartIndex","Math","max","mergedItemIds","isInNextItemsRange","receiveQueries","flowRight","ifMatchingAction","replaceAction","onSubKey","combineReducers","accumulator","itemId","mapValues","contextState","omit","itemIsComplete","queryParts","isCompleteQuery","queries","removedItems","contextQueries","queryItems","filter","queryId","entity","queriedData","queriedDataReducer","nextState","nextEdits","saving","deleting","entitiesConfig","UNDO_INITIAL_STATE","assign","lastEditAction","terms","byId","keyBy","user","themeGlobalStyleVariations","themeBaseGlobalStyles","newConfig","config","entitiesDataReducer","entitiesByKind","groupBy","memo","subEntities","kindReducer","kindMemo","newData","isCreateUndoLevel","isUndoOrRedo","flattenedUndo","pop","comparisonUndoEdits","values","comparisonEdits","isShallowEqual","embedPreviews","userPermissions","autosavesData","blockPatterns","patterns","blockPatternCategories","categories","LEAF_KEY","arrayOf","b","fromIndex","selector","getDependants","rootCache","normalizedGetDependants","getCache","dependants","dependant","caches","isUniqueByDependants","createCache","callSelector","lastDependants","queriedItemsCacheByState","getQueriedItemsUncached","startOffset","endOffset","min","filteredItem","f","field","getQueriedItems","createSelector","queriedItemsCache","queriedItems","EMPTY_OBJECT","isRequestingEmbedPreview","createRegistrySelector","isResolving","getAuthors","getUserQueryResults","queryResults","getEntitiesByKind","getEntity","getEntityRecord","queriedState","__experimentalGetEntityRecordNoResolver","_key","attribute","isRawAttribute","hasEntityRecords","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","primaryKeys","primaryKey","entityRecord","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","isSavingEntityRecord","getEntityRecordEdits","isAutosavingEntityRecord","Boolean","isDeletingEntityRecord","getLastEntitySaveError","getLastEntityDeleteError","getCurrentUndoOffset","hasUndo","hasRedo","getCurrentTheme","__experimentalGetCurrentGlobalStylesId","getThemeSupports","theme_supports","getEmbedPreview","isPreviewEmbedFallback","oEmbedLinkCheck","html","canUser","resource","compact","canUserEditEntityRecord","getAutosaves","authorId","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","__experimentalGetTemplateForLink","link","template","__experimentalGetCurrentThemeBaseGlobalStyles","__experimentalGetCurrentThemeGlobalStylesVariations","getBlockPatterns","getBlockPatternCategories","resolverName","uniq","forwardResolver","resolutionsArgs","selectorName","shouldInvalidate","activeThemes","embedProxyResponse","create","read","update","parse","allowHeader","restBase","restNamespace","getPostType","fetch","then","res","json","e","globalStylesURL","globalStylesObject","themeGlobalStyles","restPatterns","pattern","mapKeys","deepCopyLocksTreePath","tree","newTree","currentNode","branchName","children","locks","getNode","nextNode","hasConflictingLock","DEFAULT_STATE","store","storePath","l","isLockAvailable","iteratePath","descendant","stack","childNode","iterateDescendants","createLocks","processPendingLockRequests","getPendingLockRequests","notifyAcquired","acquire","release","EMPTY_ARRAY","entityContexts","createContext","getEntityContext","EntityProvider","Provider","useEntityId","useContext","useEntityProp","_id","providerId","fullValue","useSelect","useDispatch","useCallback","newValue","useEntityBlockEditor","content","useEffect","parsedContent","onChange","newBlocks","blocksForSerialization","__unstableSerializeAndClean","onInput","Status","META_SELECTORS","__experimentalUseQuerySelect","mapQuerySelect","deps","registry","enrichSelectors","memoize","selectors","resolvers","getIsResolving","hasResolved","Resolving","Success","Idle","useEntityRecord","enabled","rest","useQuerySelect","coreStore","__experimentalUseEntityRecord","useEntityRecords","queryArgs","queryAsString","__experimentalUseEntityRecords","__experimentalUseResourcePermissions","canCreate","_delete","canUpdate","canDelete","search","searchOptions","settings","isInitialSuggestions","subtype","disablePostFormats","per_page","catch","current","concat","isMedia","source_url","decodeEntities","CACHE","endpoint","prependHTTP","isURL","protocol","getProtocol","isValidProtocol","startsWith","test","entitySelectors","entityResolvers","pluralMethodName","entityActions","actions","createReduxStore","createLocksActions","register"],"sourceRoot":""}