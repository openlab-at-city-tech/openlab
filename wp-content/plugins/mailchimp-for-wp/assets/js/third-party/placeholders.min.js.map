{"version":3,"sources":["third-party/placeholders.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","global","nativeSupport","document","createElement","placeholder","Placeholders","disable","noop","disablePlaceholders","enable","node","handleElem","showPlaceholder","keydownVal","validTypes","badKeys","placeholderClassName","classNameRegExp","RegExp","ATTR_CURRENT_VAL","ATTR_ACTIVE","ATTR_INPUT_TYPE","ATTR_FORM_HANDLED","ATTR_EVENTS_BOUND","ATTR_MAXLENGTH","head","getElementsByTagName","root","documentElement","inputs","textareas","hideOnInput","getAttribute","liveUpdates","styleElem","type","elem","styleRules","createTextNode","styleSheet","cssText","nodeValue","appendChild","insertBefore","firstChild","len","attributes","inArray","newElement","timer","setInterval","changeType","setAttribute","value","hidePlaceholder","removeAttribute","clearInterval","addEventListener","safeActiveElement","activeElement","err","arr","item","event","fn","attachEvent","moveCaret","index","range","createTextRange","move","select","selectionStart","focus","setSelectionRange","callback","handleInputs","handleTextareas","handleInputsLength","keydownValue","valueChanged","isPlaceholderValue","replace","className","maxLength","parseInt","val","form","getElementById","makeSubmitHandler","makeFocusHandler","makeBlurHandler","keyCode","preventDefault","makeKeydownHandler","blur","makeKeyupHandler","makeClickHandler"],"mappings":"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","file":"placeholders.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\n/* eslint-disable */\n\n/*!\n * The MIT License\n *\n * Copyright (c) 2012 James Allardice\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n(function (global) {\n  'use strict'; //\n  // Test for support. We do this as early as possible to optimise for browsers\n  // that have native support for the attribute.\n  //\n\n  var test = document.createElement('input');\n  var nativeSupport = test.placeholder !== void 0;\n  global.Placeholders = {\n    nativeSupport: nativeSupport,\n    disable: nativeSupport ? noop : disablePlaceholders,\n    enable: nativeSupport ? noop : enablePlaceholders\n  };\n\n  if (nativeSupport) {\n    return;\n  } //\n  // If we reach this point then the browser does not have native support for\n  // the attribute.\n  //\n  // The list of input element types that support the placeholder attribute.\n\n\n  var validTypes = ['text', 'search', 'url', 'tel', 'email', 'password', 'number', 'textarea']; // The list of keycodes that are not allowed when the polyfill is configured\n  // to hide-on-input.\n\n  var badKeys = [// The following keys all cause the caret to jump to the end of the input\n  // value.\n  27, // Escape\n  33, // Page up\n  34, // Page down\n  35, // End\n  36, // Home\n  // Arrow keys allow you to move the caret manually, which should be\n  // prevented when the placeholder is visible.\n  37, // Left\n  38, // Up\n  39, // Right\n  40, // Down\n  // The following keys allow you to modify the placeholder text by removing\n  // characters, which should be prevented when the placeholder is visible.\n  8, // Backspace\n  46 // Delete\n  ]; // Styling variables.\n\n  var placeholderStyleColor = '#ccc';\n  var placeholderClassName = 'placeholdersjs';\n  var classNameRegExp = new RegExp('(?:^|\\\\s)' + placeholderClassName + '(?!\\\\S)'); // The various data-* attributes used by the polyfill.\n\n  var ATTR_CURRENT_VAL = 'data-placeholder-value';\n  var ATTR_ACTIVE = 'data-placeholder-active';\n  var ATTR_INPUT_TYPE = 'data-placeholder-type';\n  var ATTR_FORM_HANDLED = 'data-placeholder-submit';\n  var ATTR_EVENTS_BOUND = 'data-placeholder-bound';\n  var ATTR_OPTION_FOCUS = 'data-placeholder-focus';\n  var ATTR_OPTION_LIVE = 'data-placeholder-live';\n  var ATTR_MAXLENGTH = 'data-placeholder-maxlength'; // Various other variables used throughout the rest of the script.\n\n  var UPDATE_INTERVAL = 100;\n  var head = document.getElementsByTagName('head')[0];\n  var root = document.documentElement;\n  var Placeholders = global.Placeholders;\n  var keydownVal; // Get references to all the input and textarea elements currently in the DOM\n  // (live NodeList objects to we only need to do this once).\n\n  var inputs = document.getElementsByTagName('input');\n  var textareas = document.getElementsByTagName('textarea'); // Get any settings declared as data-* attributes on the root element.\n  // Currently the only options are whether to hide the placeholder on focus\n  // or input and whether to auto-update.\n\n  var hideOnInput = root.getAttribute(ATTR_OPTION_FOCUS) === 'false';\n  var liveUpdates = root.getAttribute(ATTR_OPTION_LIVE) !== 'false'; // Create style element for placeholder styles (instead of directly setting\n  // style properties on elements - allows for better flexibility alongside\n  // user-defined styles).\n\n  var styleElem = document.createElement('style');\n  styleElem.type = 'text/css'; // Create style rules as text node.\n\n  var styleRules = document.createTextNode('.' + placeholderClassName + ' {' + 'color:' + placeholderStyleColor + ';' + '}'); // Append style rules to newly created stylesheet.\n\n  if (styleElem.styleSheet) {\n    styleElem.styleSheet.cssText = styleRules.nodeValue;\n  } else {\n    styleElem.appendChild(styleRules);\n  } // Prepend new style element to the head (before any existing stylesheets,\n  // so user-defined rules take precedence).\n\n\n  head.insertBefore(styleElem, head.firstChild); // Set up the placeholders.\n\n  var placeholder;\n  var elem;\n\n  for (var i = 0, len = inputs.length + textareas.length; i < len; i++) {\n    // Find the next element. If we've already done all the inputs we move on\n    // to the textareas.\n    elem = i < inputs.length ? inputs[i] : textareas[i - inputs.length]; // Get the value of the placeholder attribute, if any. IE10 emulating IE7\n    // fails with getAttribute, hence the use of the attributes node.\n\n    placeholder = elem.attributes.placeholder; // If the element has a placeholder attribute we need to modify it.\n\n    if (placeholder) {\n      // IE returns an empty object instead of undefined if the attribute is\n      // not present.\n      placeholder = placeholder.nodeValue; // Only apply the polyfill if this element is of a type that supports\n      // placeholders and has a placeholder attribute with a non-empty value.\n\n      if (placeholder && inArray(validTypes, elem.type)) {\n        newElement(elem);\n      }\n    }\n  } // If enabled, the polyfill will repeatedly check for changed/added elements\n  // and apply to those as well.\n\n\n  var timer = setInterval(function () {\n    for (var i = 0, len = inputs.length + textareas.length; i < len; i++) {\n      elem = i < inputs.length ? inputs[i] : textareas[i - inputs.length]; // Only apply the polyfill if this element is of a type that supports\n      // placeholders, and has a placeholder attribute with a non-empty value.\n\n      placeholder = elem.attributes.placeholder;\n\n      if (placeholder) {\n        placeholder = placeholder.nodeValue;\n\n        if (placeholder && inArray(validTypes, elem.type)) {\n          // If the element hasn't had event handlers bound to it then add\n          // them.\n          if (!elem.getAttribute(ATTR_EVENTS_BOUND)) {\n            newElement(elem);\n          } // If the placeholder value has changed or not been initialised yet\n          // we need to update the display.\n\n\n          if (placeholder !== elem.getAttribute(ATTR_CURRENT_VAL) || elem.type === 'password' && !elem.getAttribute(ATTR_INPUT_TYPE)) {\n            // Attempt to change the type of password inputs (fails in IE < 9).\n            if (elem.type === 'password' && !elem.getAttribute(ATTR_INPUT_TYPE) && changeType(elem, 'text')) {\n              elem.setAttribute(ATTR_INPUT_TYPE, 'password');\n            } // If the placeholder value has changed and the placeholder is\n            // currently on display we need to change it.\n\n\n            if (elem.value === elem.getAttribute(ATTR_CURRENT_VAL)) {\n              elem.value = placeholder;\n            } // Keep a reference to the current placeholder value in case it\n            // changes via another script.\n\n\n            elem.setAttribute(ATTR_CURRENT_VAL, placeholder);\n          }\n        }\n      } else if (elem.getAttribute(ATTR_ACTIVE)) {\n        hidePlaceholder(elem);\n        elem.removeAttribute(ATTR_CURRENT_VAL);\n      }\n    } // If live updates are not enabled cancel the timer.\n\n\n    if (!liveUpdates) {\n      clearInterval(timer);\n    }\n  }, UPDATE_INTERVAL); // Disabling placeholders before unloading the page prevents flash of\n  // unstyled placeholders on load if the page was refreshed.\n\n  addEventListener(global, 'beforeunload', function () {\n    Placeholders.disable();\n  }); //\n  // Utility functions\n  //\n  // No-op (used in place of public methods when native support is detected).\n\n  function noop() {} // Avoid IE9 activeElement of death when an iframe is used.\n  //\n  // More info:\n  //  - http://bugs.jquery.com/ticket/13393\n  //  - https://github.com/jquery/jquery/commit/85fc5878b3c6af73f42d61eedf73013e7faae408\n\n\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  } // Check whether an item is in an array. We don't use Array.prototype.indexOf\n  // so we don't clobber any existing polyfills. This is a really simple\n  // alternative.\n\n\n  function inArray(arr, item) {\n    for (var i = 0, len = arr.length; i < len; i++) {\n      if (arr[i] === item) {\n        return true;\n      }\n    }\n\n    return false;\n  } // Cross-browser DOM event binding\n\n\n  function addEventListener(elem, event, fn) {\n    if (elem.addEventListener) {\n      return elem.addEventListener(event, fn, false);\n    }\n\n    if (elem.attachEvent) {\n      return elem.attachEvent('on' + event, fn);\n    }\n  } // Move the caret to the index position specified. Assumes that the element\n  // has focus.\n\n\n  function moveCaret(elem, index) {\n    var range;\n\n    if (elem.createTextRange) {\n      range = elem.createTextRange();\n      range.move('character', index);\n      range.select();\n    } else if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(index, index);\n    }\n  } // Attempt to change the type property of an input element.\n\n\n  function changeType(elem, type) {\n    try {\n      elem.type = type;\n      return true;\n    } catch (e) {\n      // You can't change input type in IE8 and below.\n      return false;\n    }\n  }\n\n  function handleElem(node, callback) {\n    // Check if the passed in node is an input/textarea (in which case it can't\n    // have any affected descendants).\n    if (node && node.getAttribute(ATTR_CURRENT_VAL)) {\n      callback(node);\n    } else {\n      // If an element was passed in, get all affected descendants. Otherwise,\n      // get all affected elements in document.\n      var handleInputs = node ? node.getElementsByTagName('input') : inputs;\n      var handleTextareas = node ? node.getElementsByTagName('textarea') : textareas;\n      var handleInputsLength = handleInputs ? handleInputs.length : 0;\n      var handleTextareasLength = handleTextareas ? handleTextareas.length : 0; // Run the callback for each element.\n\n      var len = handleInputsLength + handleTextareasLength;\n      var elem;\n\n      for (var i = 0; i < len; i++) {\n        elem = i < handleInputsLength ? handleInputs[i] : handleTextareas[i - handleInputsLength];\n        callback(elem);\n      }\n    }\n  } // Return all affected elements to their normal state (remove placeholder\n  // value if present).\n\n\n  function disablePlaceholders(node) {\n    handleElem(node, hidePlaceholder);\n  } // Show the placeholder value on all appropriate elements.\n\n\n  function enablePlaceholders(node) {\n    handleElem(node, showPlaceholder);\n  } // Hide the placeholder value on a single element. Returns true if the\n  // placeholder was hidden and false if it was not (because it wasn't visible\n  // in the first place).\n\n\n  function hidePlaceholder(elem, keydownValue) {\n    var valueChanged = !!keydownValue && elem.value !== keydownValue;\n    var isPlaceholderValue = elem.value === elem.getAttribute(ATTR_CURRENT_VAL);\n\n    if ((valueChanged || isPlaceholderValue) && elem.getAttribute(ATTR_ACTIVE) === 'true') {\n      elem.removeAttribute(ATTR_ACTIVE);\n      elem.value = elem.value.replace(elem.getAttribute(ATTR_CURRENT_VAL), '');\n      elem.className = elem.className.replace(classNameRegExp, ''); // Restore the maxlength value. Old FF returns -1 if attribute not set.\n      // See GH-56.\n\n      var maxLength = elem.getAttribute(ATTR_MAXLENGTH);\n\n      if (parseInt(maxLength, 10) >= 0) {\n        elem.setAttribute('maxLength', maxLength);\n        elem.removeAttribute(ATTR_MAXLENGTH);\n      } // If the polyfill has changed the type of the element we need to change\n      // it back.\n\n\n      var type = elem.getAttribute(ATTR_INPUT_TYPE);\n\n      if (type) {\n        elem.type = type;\n      }\n\n      return true;\n    }\n\n    return false;\n  } // Show the placeholder value on a single element. Returns true if the\n  // placeholder was shown and false if it was not (because it was already\n  // visible).\n\n\n  function showPlaceholder(elem) {\n    var val = elem.getAttribute(ATTR_CURRENT_VAL);\n\n    if (elem.value === '' && val) {\n      elem.setAttribute(ATTR_ACTIVE, 'true');\n      elem.value = val;\n      elem.className += ' ' + placeholderClassName; // Store and remove the maxlength value.\n\n      var maxLength = elem.getAttribute(ATTR_MAXLENGTH);\n\n      if (!maxLength) {\n        elem.setAttribute(ATTR_MAXLENGTH, elem.maxLength);\n        elem.removeAttribute('maxLength');\n      } // If the type of element needs to change, change it (e.g. password\n      // inputs).\n\n\n      var type = elem.getAttribute(ATTR_INPUT_TYPE);\n\n      if (type) {\n        elem.type = 'text';\n      } else if (elem.type === 'password' && changeType(elem, 'text')) {\n        elem.setAttribute(ATTR_INPUT_TYPE, 'password');\n      }\n\n      return true;\n    }\n\n    return false;\n  } // Returns a function that is used as a focus event handler.\n\n\n  function makeFocusHandler(elem) {\n    return function () {\n      // Only hide the placeholder value if the (default) hide-on-focus\n      // behaviour is enabled.\n      if (hideOnInput && elem.value === elem.getAttribute(ATTR_CURRENT_VAL) && elem.getAttribute(ATTR_ACTIVE) === 'true') {\n        // Move the caret to the start of the input (this mimics the behaviour\n        // of all browsers that do not hide the placeholder on focus).\n        moveCaret(elem, 0);\n      } else {\n        // Remove the placeholder.\n        hidePlaceholder(elem);\n      }\n    };\n  } // Returns a function that is used as a blur event handler.\n\n\n  function makeBlurHandler(elem) {\n    return function () {\n      showPlaceholder(elem);\n    };\n  } // Returns a function that is used as a submit event handler on form elements\n  // that have children affected by this polyfill.\n\n\n  function makeSubmitHandler(form) {\n    return function () {\n      // Turn off placeholders on all appropriate descendant elements.\n      disablePlaceholders(form);\n    };\n  } // Functions that are used as a event handlers when the hide-on-input\n  // behaviour has been activated - very basic implementation of the 'input'\n  // event.\n\n\n  function makeKeydownHandler(elem) {\n    return function (e) {\n      keydownVal = elem.value; // Prevent the use of the arrow keys (try to keep the cursor before the\n      // placeholder).\n\n      if (elem.getAttribute(ATTR_ACTIVE) === 'true' && keydownVal === elem.getAttribute(ATTR_CURRENT_VAL) && inArray(badKeys, e.keyCode)) {\n        if (e.preventDefault) {\n          e.preventDefault();\n        }\n\n        return false;\n      }\n    };\n  }\n\n  function makeKeyupHandler(elem) {\n    return function () {\n      hidePlaceholder(elem, keydownVal); // If the element is now empty we need to show the placeholder\n\n      if (elem.value === '') {\n        elem.blur();\n        moveCaret(elem, 0);\n      }\n    };\n  }\n\n  function makeClickHandler(elem) {\n    return function () {\n      if (elem === safeActiveElement() && elem.value === elem.getAttribute(ATTR_CURRENT_VAL) && elem.getAttribute(ATTR_ACTIVE) === 'true') {\n        moveCaret(elem, 0);\n      }\n    };\n  } // Bind event handlers to an element that we need to affect with the\n  // polyfill.\n\n\n  function newElement(elem) {\n    // If the element is part of a form, make sure the placeholder string is\n    // not submitted as a value.\n    var form = elem.form;\n\n    if (form && typeof form === 'string') {\n      // Get the real form.\n      form = document.getElementById(form); // Set a flag on the form so we know it's been handled (forms can contain\n      // multiple inputs).\n\n      if (!form.getAttribute(ATTR_FORM_HANDLED)) {\n        addEventListener(form, 'submit', makeSubmitHandler(form));\n        form.setAttribute(ATTR_FORM_HANDLED, 'true');\n      }\n    } // Bind event handlers to the element so we can hide/show the placeholder\n    // as appropriate.\n\n\n    addEventListener(elem, 'focus', makeFocusHandler(elem));\n    addEventListener(elem, 'blur', makeBlurHandler(elem)); // If the placeholder should hide on input rather than on focus we need\n    // additional event handlers\n\n    if (hideOnInput) {\n      addEventListener(elem, 'keydown', makeKeydownHandler(elem));\n      addEventListener(elem, 'keyup', makeKeyupHandler(elem));\n      addEventListener(elem, 'click', makeClickHandler(elem));\n    } // Remember that we've bound event handlers to this element.\n\n\n    elem.setAttribute(ATTR_EVENTS_BOUND, 'true');\n    elem.setAttribute(ATTR_CURRENT_VAL, placeholder); // If the element doesn't have a value and is not focussed, set it to the\n    // placeholder string.\n\n    if (hideOnInput || elem !== safeActiveElement()) {\n      showPlaceholder(elem);\n    }\n  }\n})(void 0);\n\n},{}]},{},[1]);\n"]}