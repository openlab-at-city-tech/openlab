{"version":3,"sources":["bp-groups/js/dynamic-groups.js"],"names":["i18n","__","sprintf","wp","dynamicWidgetBlock","bp","bpGroupsWidgetBlock","loop","groups","container","type","tmpl","useTemplate","selector","document","querySelector","output","length","forEach","group","created_since","extra","total_member_count","membersCount","parseInt","last_activity_diff","avatar_alt","name","innerHTML","start","blocks","block","i","query_args","list","closest","getItems","querySelectorAll","navItem","addEventListener","event","preventDefault","target","classList","remove","add","newType","getAttribute","settings","window","bpDynamicGroupsSettings","bpDynamicGroupsBlocks","bpDynamicGroups","readyState"],"mappings":";AAGA,MACCA,MAAM,GACLC,EADK,QAELC,IAEEC,IAKE,mBACLC,GACGC,GAOJ,MAAMC,UAA4BF,EACjCG,KAAMC,EAAS,GAAIC,EAAY,GAAIC,EAAO,UACnCC,MAAAA,EAAO,MAAMC,YAAa,0BAC1BC,EAAWC,SAASC,cAAe,IAAMN,GAC3CO,IAAAA,EAAS,GAERR,GAAUA,EAAOS,OACrBT,EAAOU,QAAWC,IACZ,GAAA,WAAaT,GAAQS,EAAMC,cAE/BD,EAAME,MAAQnB,EAASD,EAAI,aAAc,cAAgBkB,EAAMC,oBACzD,GAAK,YAAcV,GAAQS,EAAMG,mBAAqB,CACtDC,MAAAA,EAAeC,SAAUL,EAAMG,mBAAoB,IAGxDH,EAAME,MADF,IAAME,EACItB,EAAI,aAAc,cACrB,IAAMsB,EACHtB,EAAI,WAAY,cAGhBC,EAASD,EAAI,aAAc,cAAgBkB,EAAMG,yBAIhEH,EAAME,MAAQnB,EAASD,EAAI,YAAa,cAAgBkB,EAAMM,oBAI/DN,EAAMO,WAAaxB,EAASD,EAAI,4BAA6B,cAAgBkB,EAAMQ,MAEnFX,GAAUL,EAAMQ,KAGjBH,EAAS,6BAA+Bf,EAAI,kCAAmC,cAAiB,SAGjGY,EAASe,UAAYZ,EAGtBa,QACMC,KAAAA,OAAOZ,QAAS,CAAEa,EAAOC,KACvB,MAAA,SAAEnB,GAAakB,GACf,KAAErB,GAASqB,EAAME,WACjBC,EAAOpB,SAASC,cAAe,IAAMF,GAAWsB,QAAS,+BAGzDC,MAAAA,SAAU1B,EAAMsB,GAGtBE,EAAKG,iBAAkB,mBAAoBnB,QAAWoB,IACrDA,EAAQC,iBAAkB,QAAWC,IACpCA,EAAMC,iBAGND,EAAME,OAAOP,QAAS,iBAAkBpB,cAAe,aAAc4B,UAAUC,OAAQ,YACvFJ,EAAME,OAAOC,UAAUE,IAAK,YAEtBC,MAAAA,EAAUN,EAAME,OAAOK,aAAc,gBAEtCD,IAAY,KAAKhB,OAAQE,GAAIC,WAAWvB,MACtC0B,MAAAA,SAAUU,EAASd,UAQ/B,MAAMgB,EAAWC,OAAOC,yBAA2B,GAC7CpB,EAASmB,OAAOE,uBAAyB,GACzCC,EAAkB,IAAI9C,EAAqB0C,EAAUlB,GAEtD,YAAchB,SAASuC,WAC3BvC,SAASyB,iBAAkB,mBAAoBa,EAAgBvB,SAE/DuB,EAAgBvB","file":"dynamic-groups.js","sourceRoot":"../src/js","sourcesContent":["/**\n * WordPress dependencies\n */\nconst {\n\ti18n: {\n\t\t__,\n\t\tsprintf,\n\t},\n} = wp;\n\n/**\n * BuddyPress dependencies.\n */\nconst {\n\tdynamicWidgetBlock,\n} = bp;\n\n/**\n * Front-end Dynamic Groups Widget Block class.\n *\n * @since 9.0.0\n */\nclass bpGroupsWidgetBlock extends dynamicWidgetBlock {\n\tloop( groups = [], container = '', type = 'active' ) {\n\t\tconst tmpl = super.useTemplate( 'bp-dynamic-groups-item' );\n\t\tconst selector = document.querySelector( '#' + container );\n\t\tlet output = '';\n\n\t\tif ( groups && groups.length ) {\n\t\t\tgroups.forEach( ( group ) => {\n\t\t\t\tif ( 'newest' === type && group.created_since ) {\n\t\t\t\t\t/* translators: %s is time elapsed since the group was created */\n\t\t\t\t\tgroup.extra = sprintf( __( 'Created %s', 'buddypress' ), group.created_since );\n\t\t\t\t} else if ( 'popular' === type && group.total_member_count ) {\n\t\t\t\t\tconst membersCount = parseInt( group.total_member_count, 10 );\n\n\t\t\t\t\tif ( 0 === membersCount ) {\n\t\t\t\t\t\tgroup.extra = __( 'No members', 'buddypress' );\n\t\t\t\t\t} else if ( 1 === membersCount ) {\n\t\t\t\t\t\tgroup.extra = __( '1 member', 'buddypress' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* translators: %s is the number of Group members */\n\t\t\t\t\t\tgroup.extra = sprintf( __( '%s members', 'buddypress' ), group.total_member_count );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* translators: %s: last activity timestamp (e.g. \"Active 1 hour ago\") */\n\t\t\t\t\tgroup.extra = sprintf( __( 'Active %s', 'buddypress' ), group.last_activity_diff );\n\t\t\t\t}\n\n\t\t\t\t/* Translators: %s is the group's name. */\n\t\t\t\tgroup.avatar_alt = sprintf( __( 'Group Profile photo of %s', 'buddypress' ), group.name );\n\n\t\t\t\toutput += tmpl( group );\n\t\t\t} );\n\t\t} else {\n\t\t\toutput = '<div class=\"widget-error\">' + __( 'There are no groups to display.', 'buddypress' ) + '</div>';\n\t\t}\n\n\t\tselector.innerHTML = output;\n\t}\n\n\tstart() {\n\t\tthis.blocks.forEach( ( block, i ) => {\n\t\t\tconst { selector } = block;\n\t\t\tconst { type } = block.query_args;\n\t\t\tconst list = document.querySelector( '#' + selector ).closest( '.bp-dynamic-block-container' );\n\n\t\t\t// Get default Block's type groups.\n\t\t\tsuper.getItems( type, i );\n\n\t\t\t// Listen to Block's Nav item clics\n\t\t\tlist.querySelectorAll( '.item-options a' ).forEach( ( navItem ) => {\n\t\t\t\tnavItem.addEventListener( 'click', ( event ) => {\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t// Changes the displayed filter.\n\t\t\t\t\tevent.target.closest( '.item-options' ).querySelector( '.selected' ).classList.remove( 'selected' );\n\t\t\t\t\tevent.target.classList.add( 'selected' );\n\n\t\t\t\t\tconst newType = event.target.getAttribute( 'data-bp-sort' );\n\n\t\t\t\t\tif ( newType !== this.blocks[ i ].query_args.type ) {\n\t\t\t\t\t\tsuper.getItems( newType, i );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\t}\n}\n\nconst settings = window.bpDynamicGroupsSettings || {};\nconst blocks = window.bpDynamicGroupsBlocks || [];\nconst bpDynamicGroups = new bpGroupsWidgetBlock( settings, blocks );\n\nif ( 'loading' === document.readyState ) {\n\tdocument.addEventListener( 'DOMContentLoaded', bpDynamicGroups.start() );\n} else {\n\tbpDynamicGroups.start();\n}\n"]}