/* FILE: global/modifiers/_decorations.scss */

// Sticky element within container

	// This will not work if any of the parents has overflow
	// styles set. We are using `--scrollbar_width` CSS variable
	// to mitigate this problem in the theme, so it should work
	// in vast majority of cases. Unless a block parent has an
	// overflow style set, of course...
	.is-sticky-within-container {
		@include media(
			( map_get( $breakpoint, 'xl' ), 'min-width' ),
			( map_get( $breakpoint, 's' ), 'min-height' )
		) {
			position: sticky;
			top: 2em;
		}
	}

// Shadow

	$spread : 6vh;
	$indent : 1vh;
	$opacity : .2;

	.has-inner-shadow,
	.is-style-inner-shadow {
		position: relative;

		body &::after {
			content: '';
			position: absolute;
			display: block; // This is required for cover block, for example.
			left: 0;
			right: 0;
			top: 0;
			bottom: 0;
			box-shadow: inset 0 #{ $indent } #{ $spread } rgba( #000, $opacity );
			z-index: 99;
			pointer-events: none;
		}

		&.alignfull::after {
			box-shadow:
				inset 0 #{ $spread + $indent } #{ $spread } -#{ $spread } rgba( #000, $opacity ),
				inset 0 #{ $indent - $spread } #{ $spread } -#{ $spread } rgba( #000, $opacity );
		}

	}

		// For block editor only:
		[data-align="full"] > .has-inner-shadow,
		[data-align="full"] > .is-style-inner-shadow {

			&::after {
				box-shadow:
					inset 0 #{ $spread + $indent } #{ $spread } -#{ $spread } rgba( #000, $opacity ),
					inset 0 #{ $indent - $spread } #{ $spread } -#{ $spread } rgba( #000, $opacity );
			}

		}

	.has-drop-shadow,
	.is-style-drop-shadow {
		box-shadow: var(--drop_shadow);
		z-index: 1;
	}

// Others

	// Invert colors filter.

		.invert,
		.is-inverted,
		.has-invert-filter {
			filter: invert(1);
		}

	// Gaps

		$important_modifiers: _important( 'modifier_no_gaps' );

		.is-style-no-gaps.is-style-no-gaps {

			&,
			& > .blocks-gallery-grid {
				--wp--style--block-gap: 0px; // WP6.0+ fix
				--wp--style--gallery-gap-default: var(--wp--style--block-gap);
				gap: 0 $important_modifiers;

				> [class] {
					margin: 0 $important_modifiers;
				}

			}

		}

		$important_modifiers: null; // Required reset.
